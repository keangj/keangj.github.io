<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue3 Vite Web3Modal 搭建 Web3 项目</title>
      <link href="/2022/04/01/web3modal/"/>
      <url>/2022/04/01/web3modal/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3-Vite-Web3Modal-搭建-Web3-项目"><a href="#Vue3-Vite-Web3Modal-搭建-Web3-项目" class="headerlink" title="Vue3 Vite Web3Modal 搭建 Web3 项目"></a>Vue3 Vite Web3Modal 搭建 Web3 项目</h1><h2 id="创建项目并运行项目"><a href="#创建项目并运行项目" class="headerlink" title="创建项目并运行项目"></a>创建项目并运行项目</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pnpm create vite web3Modal -- --template vue-ts</span><br><span class="line"><span class="built_in">cd</span> web3Modal</span><br><span class="line">pnpm install</span><br><span class="line">pnpm dev</span><br></pre></td></tr></table></figure><h2 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pnpm add web3 web3modal @walletconnect/web3-provider</span><br></pre></td></tr></table></figure><p>如有 ts 找不到模块类型声明的问题，在项目中的 xxx.d.ts 中添加以下代码</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// declare module &lt;package name&gt;</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;web3modal&#x27;</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;web3/dist/web3.min.js&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="添加-web3modal-配置"><a href="#添加-web3modal-配置" class="headerlink" title="添加 web3modal 配置"></a>添加 web3modal 配置</h2><p>创建配置文件 hooks&#x2F;web3&#x2F;config.ts</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">WalletConnectProvider</span> <span class="keyword">from</span> <span class="string">&#x27;@walletconnect/web3-provider&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> providerOptions = &#123;</span><br><span class="line">  <span class="attr">walletconnect</span>: &#123;</span><br><span class="line">    <span class="attr">package</span>: <span class="title class_">WalletConnectProvider</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="comment">// 自定义 rpc</span></span><br><span class="line">      <span class="attr">rpc</span>: &#123;</span><br><span class="line">        <span class="number">56</span>: <span class="string">&#x27;https://bsc-dataseed1.binance.org/&#x27;</span>,</span><br><span class="line">        <span class="number">97</span>: <span class="string">&#x27;https://data-seed-prebsc-1-s1.binance.org:8545/&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; providerOptions &#125;</span><br></pre></td></tr></table></figure><h2 id="创建-web3modal-provider"><a href="#创建-web3modal-provider" class="headerlink" title="创建 web3modal provider"></a>创建 web3modal provider</h2><p>创建文件 hook&#x2F;web3&#x2F;useWallet.ts</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Web3Modal</span>, &#123; providers &#125; <span class="keyword">from</span> <span class="string">&#x27;web3modal&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; providerOptions &#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">WalletConnectProvider</span> <span class="keyword">from</span> <span class="string">&quot;@walletconnect/web3-provider&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Web3</span> <span class="keyword">from</span> <span class="string">&quot;web3/dist/web3.min.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">WalletInfo</span> &#123;</span><br><span class="line">  <span class="attr">web3</span>: <span class="keyword">typeof</span> <span class="title class_">Web3</span> | <span class="literal">null</span></span><br><span class="line">  <span class="attr">provider</span>: <span class="keyword">typeof</span> providers | <span class="literal">null</span></span><br><span class="line">  <span class="attr">account</span>: <span class="built_in">string</span> | <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">walletInfo</span>: <span class="title class_">WalletInfo</span> = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">web3</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">provider</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">account</span>: <span class="literal">null</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useWallet</span> () &#123;</span><br><span class="line">  <span class="comment">// 创建 web3Modal 实例</span></span><br><span class="line">  <span class="keyword">const</span> web3Modal = <span class="keyword">new</span> <span class="title class_">Web3Modal</span>(&#123;</span><br><span class="line">    providerOptions</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取当前连接钱包地址</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getAccounts</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [account] = <span class="keyword">await</span> walletInfo.<span class="property">web3</span>.<span class="property">eth</span>.<span class="title function_">getAccounts</span>()</span><br><span class="line">    walletInfo.<span class="property">account</span> = account</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 订阅事件</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">subscribeToEvents</span> = (<span class="params">provider: WalletConnectProvider</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!provider) <span class="keyword">return</span></span><br><span class="line">    provider.<span class="title function_">on</span>(<span class="string">&#x27;connect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    &#125;)</span><br><span class="line">    provider.<span class="title function_">on</span>(<span class="string">&#x27;accountsChanged&#x27;</span>, <span class="function">(<span class="params">accounts: <span class="built_in">string</span>[]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">getAccounts</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    provider.<span class="title function_">on</span>(<span class="string">&#x27;chainChanged&#x27;</span>, <span class="function">(<span class="params">chainId: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    &#125;)</span><br><span class="line">    provider.<span class="title function_">on</span>(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function">(<span class="params">code: <span class="built_in">number</span>, reason: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 建立连接</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onConnect</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> provider = <span class="keyword">await</span> web3Modal.<span class="title function_">connect</span>()</span><br><span class="line">    <span class="title function_">subscribeToEvents</span>(provider)</span><br><span class="line">    <span class="keyword">const</span> web3 = <span class="keyword">new</span> <span class="title class_">Web3</span>(provider)</span><br><span class="line">    walletInfo.<span class="property">provider</span> = provider</span><br><span class="line">    walletInfo.<span class="property">web3</span> = web3</span><br><span class="line">    <span class="title function_">getAccounts</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重置钱包</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">resetWallet</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> walletInfo.<span class="property">web3</span>?.<span class="property">currentProvider</span>?.<span class="property">close</span>?.();</span><br><span class="line">    web3Modal.<span class="title function_">clearCachedProvider</span>();</span><br><span class="line">    walletInfo.<span class="property">provider</span> = <span class="literal">null</span></span><br><span class="line">    walletInfo.<span class="property">web3</span> = <span class="literal">null</span></span><br><span class="line">    walletInfo.<span class="property">account</span> = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...<span class="title function_">toRefs</span>(walletInfo),</span><br><span class="line">    onConnect,</span><br><span class="line">    resetWallet</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="添加代币合约"><a href="#添加代币合约" class="headerlink" title="添加代币合约"></a>添加代币合约</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hooks/web3/useERC20.ts, 封装代币合约方法调用</span></span><br><span class="line"><span class="keyword">import</span> &#123; useWallet &#125; <span class="keyword">from</span> <span class="string">&#x27;./useWallet&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; utils &#125; <span class="keyword">from</span> <span class="string">&#x27;web3/dist/web3.min.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; web3 &#125; = <span class="title function_">useWallet</span>()</span><br><span class="line"><span class="comment">// busd abi</span></span><br><span class="line"><span class="keyword">const</span> abi = [&#123; <span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;constructor&quot;</span> &#125;, &#123; <span class="string">&quot;anonymous&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;inputs&quot;</span>: [&#123; <span class="string">&quot;indexed&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;owner&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;indexed&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;spender&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;indexed&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;value&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125;], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Approval&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;event&quot;</span> &#125;, &#123; <span class="string">&quot;anonymous&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;inputs&quot;</span>: [&#123; <span class="string">&quot;indexed&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;previousOwner&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;indexed&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;newOwner&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;OwnershipTransferred&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;event&quot;</span> &#125;, &#123; <span class="string">&quot;anonymous&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;inputs&quot;</span>: [&#123; <span class="string">&quot;indexed&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;from&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;indexed&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;to&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;indexed&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;value&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125;], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Transfer&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;event&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;owner&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;spender&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;allowance&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125;], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;view&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;spender&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;amount&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125;], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;approve&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;bool&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;bool&quot;</span> &#125;], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;account&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;balanceOf&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125;], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;view&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;decimals&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint8&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint8&quot;</span> &#125;], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;view&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;spender&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;subtractedValue&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125;], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;decreaseAllowance&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;bool&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;bool&quot;</span> &#125;], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;spender&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;addedValue&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125;], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;increaseAllowance&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;bool&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;bool&quot;</span> &#125;], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;amount&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125;], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;mint&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;name&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;string&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span> &#125;], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;view&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;owner&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;view&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;renounceOwnership&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;symbol&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;string&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span> &#125;], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;view&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;totalSupply&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125;], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;view&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;recipient&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;amount&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125;], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;transfer&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;bool&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;bool&quot;</span> &#125;], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;sender&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;recipient&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;amount&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125;], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;transferFrom&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;bool&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;bool&quot;</span> &#125;], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [&#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;newOwner&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;transferOwnership&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;]</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ERC20ContractType</span> = <span class="string">&#x27;busd&#x27;</span></span><br><span class="line"><span class="keyword">const</span> contracts = &#123;</span><br><span class="line">  <span class="attr">busd</span>: <span class="string">&#x27;0xe9e7cea3dedca5984780bafc599bd69add087d56&#x27;</span><span class="comment">// busd 合约地址</span></span><br><span class="line">  <span class="comment">// other contract</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useERC20</span>(<span class="params">contractType: ERC20ContractType</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> contractAddress = contracts[contractType]</span><br><span class="line">  <span class="keyword">const</span> erc20Instance = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="title class_">Contract</span> &#125; = web3.<span class="property">value</span>.<span class="property">eth</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Contract</span>(abi, contractAddress)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// 获取余额，address 为要查询的钱包地址</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getBalance</span>(<span class="params">address: <span class="built_in">string</span></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      erc20Instance.<span class="property">value</span>?.<span class="property">methods</span></span><br><span class="line">        .<span class="title function_">balanceOf</span>(address).<span class="title function_">call</span>()</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res: <span class="built_in">string</span></span>) =&gt;</span> <span class="title function_">resolve</span>(utils.<span class="title function_">fromWei</span>(res)))</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">error: <span class="built_in">Error</span></span>) =&gt;</span> <span class="title function_">reject</span>(error))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">// 授权给 address，price 数额</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">approve</span>(<span class="params">address: <span class="built_in">string</span>, price: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [account] = <span class="keyword">await</span> web3.<span class="property">value</span>.<span class="property">eth</span>.<span class="title function_">getAccounts</span>()</span><br><span class="line">    <span class="keyword">const</span> balance = <span class="keyword">await</span> <span class="title function_">getBalance</span>(account)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(balance) &lt; price) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;余额不足&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      erc20Instance.<span class="property">value</span>.<span class="property">methods</span></span><br><span class="line">        .<span class="title function_">approve</span>(address, (utils.<span class="title function_">toWei</span>(price.<span class="title function_">toString</span>())))</span><br><span class="line">        .<span class="title function_">send</span>(&#123; <span class="attr">from</span>: account &#125;)<span class="comment">// from 为授权方</span></span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">error: <span class="built_in">Error</span></span>) =&gt;</span> <span class="title function_">reject</span>(error))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getBalance,</span><br><span class="line">    approve</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="在-vue-中调用"><a href="#在-vue-中调用" class="headerlink" title="在 vue 中调用"></a>在 vue 中调用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; useWallet &#125; from &#x27;./hooks/web3/useWallet&#x27;</span><br><span class="line">import &#123; useERC20 &#125; from &#x27;./hooks/web3/useErc20&#x27;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">const &#123; onConnect, account &#125; = useWallet()</span><br><span class="line">const &#123; getBalance: getBusdBalance &#125; = useERC20(&#x27;busd&#x27;)</span><br><span class="line"></span><br><span class="line">const amount = ref&lt;string | null&gt;(null)</span><br><span class="line">const getBalance = async () =&gt; &#123;</span><br><span class="line">  amount.value = await getBusdBalance(account.value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;onConnect&quot;&gt;onConnect&lt;/button&gt;</span><br><span class="line">  &lt;button v-if=&quot;account&quot; @click=&quot;getBalance&quot;&gt;getBalance&lt;/button&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; account &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; amount &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="vite-中出现的问题"><a href="#vite-中出现的问题" class="headerlink" title="vite 中出现的问题"></a>vite 中出现的问题</h2><p>Web3Modal 需要 node 环境的依赖（process、buffer、events 等）</p><p>使用 vite 报 Buffer process EventEmitter global 不存在的错误</p><p>解决方案一</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装以下依赖</span></span><br><span class="line">pnpm add -D rollup-plugin-polyfill-node</span><br></pre></td></tr></table></figure><p>修改 vite.config.ts</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> nodePolyfills <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-polyfill-node&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      ...nodePolyfills (&#123; <span class="attr">include</span>: [<span class="string">&#x27;node_modules/**/*.js&#x27;</span>, <span class="regexp">/node_modules\/.vite\/.*js/</span>] &#125;),</span><br><span class="line">      <span class="attr">apply</span>: <span class="string">&#x27;serve&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">plugins</span>: [<span class="title function_">nodePolyfills</span>()]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">commonjsOptions</span>: &#123;</span><br><span class="line">      <span class="attr">transformMixedEsModules</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>解决方案二</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装以下依赖</span></span><br><span class="line">pnpm add buffer buffer process util</span><br></pre></td></tr></table></figure><p>在 <em>index.html</em> 中添加以下代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">global</span> = <span class="variable language_">window</span>;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> process <span class="keyword">from</span> <span class="string">&quot;process&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; <span class="title class_">Buffer</span> &#125; <span class="keyword">from</span> <span class="string">&quot;buffer&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">EventEmitter</span> <span class="keyword">from</span> <span class="string">&quot;events&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">Buffer</span> = <span class="title class_">Buffer</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">process</span> = process;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">EventEmitter</span> = <span class="title class_">EventEmitter</span>;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <em>vite.config.ts</em> 中添加以下代码</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解决 build 后报错</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">commonjsOptions</span>: &#123;</span><br><span class="line">      <span class="attr">transformMixedEsModules</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决方案三</p><p>使用方案一时如遇到使用 ui 库 vite 加载资源错误问题使用一下配置</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"># 安装以下依赖</span><br><span class="line">pnpm add -D rollup-plugin-polyfill-node <span class="meta">@esbuild</span>-plugins/node-globals-polyfill <span class="meta">@esbuild</span>-plugins/node-modules-polyfill</span><br></pre></td></tr></table></figure><p>vite.config.ts</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">optimizeDeps</span>: &#123;</span><br><span class="line">    <span class="attr">esbuildOptions</span>: &#123;</span><br><span class="line">      <span class="comment">// Node.js global to browser globalThis</span></span><br><span class="line">      <span class="attr">define</span>: &#123;</span><br><span class="line">        <span class="attr">global</span>: <span class="string">&#x27;globalThis&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// Enable esbuild polyfill plugins</span></span><br><span class="line">      <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="title class_">NodeGlobalsPolyfillPlugin</span>(&#123;</span><br><span class="line">          <span class="attr">process</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">buffer</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="title class_">NodeModulesPolyfillPlugin</span>(),</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">plugins</span>: [<span class="title function_">nodePolyfills</span>()],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">commonjsOptions</span>: &#123;</span><br><span class="line">      <span class="attr">transformMixedEsModules</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/keangj/web3Modal-example">web3Modal-example</a></p>]]></content>
      
      
      <categories>
          
          <category> Vite </category>
          
          <category> Typescript </category>
          
          <category> Vue3 </category>
          
          <category> web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vite </tag>
            
            <tag> Typescript </tag>
            
            <tag> Vue3 </tag>
            
            <tag> web3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2022/03/29/Docker/"/>
      <url>/2022/03/29/Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 <a href="https://docs.docker.com/engine/install/debian/">docker</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择相应的系统版本，跟着文档安装即可</span></span><br><span class="line"><span class="comment"># Debian</span></span><br><span class="line"><span class="comment"># 更新 apt，并安装相应的包</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br><span class="line"><span class="comment"># 添加 GPG 密钥</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"><span class="comment"># 设置 docker 仓库</span></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \</span></span><br><span class="line"><span class="string">  <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"><span class="comment"># 更新 apt，并安装 docker</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line">apt-cache madison docker-ce</span><br><span class="line"><span class="comment"># or 指定版本</span></span><br><span class="line">sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io</span><br><span class="line"><span class="comment"># 运行 hello world</span></span><br><span class="line">sudo docker run hello-world</span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">docker --version</span><br></pre></td></tr></table></figure><h2 id="安装-docker-compose"><a href="#安装-docker-compose" class="headerlink" title="安装 docker compose"></a>安装 <a href="https://docs.docker.com/compose/install/">docker compose</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载 docker compose</span></span><br><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="comment"># 添加权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name &lt;容器名&gt; -p 8000:3000 -d &lt;your username&gt;/node-web-app</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">-d</td><td align="left">守护容器，就是后台运行，退出命令窗口容器也不会停止</td></tr><tr><td align="center">-it</td><td align="left">交互式容器 退出命令窗口容器就停止运行了。将容器的 shell 映射到当前的 shell，你在本级窗口输入的命令，会传入容器</td></tr><tr><td align="center">-p</td><td align="left">宿主机端口和容器端口映射，将容器的 3000 端口映射到本机的 8000 端口</td></tr><tr><td align="center">-e</td><td align="left">MYSQL_ROOT_PASSWORD&#x3D;123456：初始化root用户的密码</td></tr></tbody></table><h2 id="容器常用操作"><a href="#容器常用操作" class="headerlink" title="容器常用操作"></a>容器常用操作</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker start &lt;container <span class="built_in">id</span>&gt;<span class="comment"># 运行容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container <span class="built_in">id</span>&gt; bash<span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">kill</span> &lt;container <span class="built_in">id</span>&gt;<span class="comment"># 杀死容器</span></span><br><span class="line">docker stop &lt;container <span class="built_in">id</span>&gt;<span class="comment"># 停止容器</span></span><br><span class="line">docker <span class="built_in">rm</span> &lt;container <span class="built_in">id</span>&gt;<span class="comment"># 删除容器</span></span><br><span class="line">docker restart &lt;container <span class="built_in">id</span>&gt;<span class="comment"># 重启容器</span></span><br><span class="line">docker logs &lt;container <span class="built_in">id</span>&gt;<span class="comment"># 查看容器日志</span></span><br><span class="line">docker ps<span class="comment"># 查看正在运行的容器</span></span><br><span class="line">docker ps -a<span class="comment"># 查看所有容器</span></span><br><span class="line">docker system prune<span class="comment"># 删除所有停止的容器</span></span><br></pre></td></tr></table></figure><h2 id="镜像常用操作"><a href="#镜像常用操作" class="headerlink" title="镜像常用操作"></a>镜像常用操作</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build . -t &lt;image name&gt;:&lt;version&gt;<span class="comment"># 创建镜像，不指定 version 默认为 latest</span></span><br><span class="line">docker images <span class="comment"># 镜像列表, docker image ls 也可以</span></span><br><span class="line">docker search &lt;image name&gt; <span class="comment"># 查找镜像</span></span><br><span class="line">docker pull &lt;image name&gt;<span class="comment"># 拉取镜像</span></span><br><span class="line">docker rmi &lt;image <span class="built_in">id</span> | image name&gt;<span class="comment"># 删除镜像</span></span><br></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>dockerfile 用来配置 docker 镜像，Docker 根据此文件生成 image 文件</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">14</span><span class="comment"># 指定基础镜像，&#x27;:&#x27; 后的数字用来指定镜像版本。这里指定了版本为 14 的 node 镜像，常用的镜像有 nginx mysql php 等</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> &lt;author name&gt;<span class="comment"># 设置镜像作者</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /example<span class="comment"># 指定工作路径为 /example</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /example<span class="comment"># 将当前目录下的所有文件（不包含 .dockerignore 排除的路径），拷贝到 image 文件的 /example 目录</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pnpm install<span class="comment"># 在工作目录下，运行 pnpm install 命令。RUN 命令在 image 构建阶段执行，执行结果都会打包进 image 文件。RUN 命令可以有多个</span></span></span><br><span class="line"><span class="keyword">ENV</span> VERSION <span class="number">14.0</span><span class="comment"># 用来设置环境变量，&lt;key&gt;=&lt;value&gt; &lt;key2&gt;=&lt;value2&gt; 或者 ENV &lt;key&gt; &lt;value&gt; 两种写法。$VERSION 使用变量</span></span><br><span class="line"><span class="keyword">ARG</span> NAME=HI <span class="comment"># 设置构建环境时的环境变量。该指令仅在 Dockerfile 内有效，如在 FROM 指令之前指定，就只能用于 FROM 指令中，想在 FROM 指令后使用需重新设置。AGR 指令会被构建命令 docker build --build-arg &lt;name&gt;=&lt;value&gt; 覆盖</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /data <span class="comment"># 定义匿名卷</span></span></span><br><span class="line"><span class="keyword">USER</span> jay <span class="comment"># 切换到指定用户</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span><span class="comment">#容器对外暴露端口，允许外部连接暴露的端口</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;pnpm&quot;</span>, <span class="string">&quot;start&quot;</span>]<span class="comment"># 容器启动后自动执行 pnpm start 命令。CMD 命令只能有一个。如在 docker run 后附加命令，该命令会覆盖 CMD 命令</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web3.js</title>
      <link href="/2022/03/28/web3/"/>
      <url>/2022/03/28/web3/</url>
      
        <content type="html"><![CDATA[<h1 id="Web3"><a href="#Web3" class="headerlink" title="Web3"></a>Web3</h1><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><ul><li><p>浏览器安装 <em><a href="https://metamask.io/download/">metamask</a></em> 插件</p></li><li><p>安装 web3.js</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install web3</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn add web3</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">pnpm add web3</span><br></pre></td></tr></table></figure></li></ul><h2 id="web3-示例"><a href="#web3-示例" class="headerlink" title="web3 示例"></a>web3 示例</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Web3</span>, &#123; utils &#125; <span class="keyword">from</span> <span class="string">&#x27;web3&#x27;</span><span class="comment">// 使用这种方式有可能报错</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Web3</span>, &#123; utils &#125; <span class="keyword">from</span> <span class="string">&#x27;web3/dist/web3.min.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 xx.d.ts 中添加 ethereum 声明</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">    <span class="attr">ethereum</span>: <span class="built_in">any</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否安装 metamask</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable language_">window</span>.<span class="property">ethereum</span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">$message</span>?.<span class="title function_">error</span>(<span class="string">&#x27;Please download the MetaMask plugin&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 web3 实例</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">web3</span>: <span class="keyword">typeof</span> <span class="title class_">Web3</span>  = <span class="keyword">new</span> <span class="title class_">Web3</span>(<span class="title class_">Web3</span>.<span class="property">givenProvider</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 account</span></span><br><span class="line"><span class="keyword">const</span> [account] = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="title function_">getAccounts</span>()</span><br><span class="line"><span class="comment">// or metamask 方法</span></span><br><span class="line"><span class="keyword">const</span> [account] = <span class="keyword">await</span> <span class="variable language_">window</span>.<span class="property">ethereum</span>?.<span class="title function_">request</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;eth_requestAccounts&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交易</span></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  <span class="attr">from</span>: account,</span><br><span class="line">  <span class="attr">to</span>: <span class="string">&#x27;0x...&#x27;</span>,<span class="comment">// 交易对方地址</span></span><br><span class="line">  <span class="attr">value</span>: utils.<span class="title function_">toWei</span>(<span class="string">&#x27;100&#x27;</span>))<span class="comment">// 转账金额 100，utils.toWei 将金额转换为 wei。wei 为以太单位 </span></span><br><span class="line">&#125;</span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">sendTransaction</span>(params, <span class="keyword">function</span>(<span class="params">error: <span class="built_in">Error</span>, transactionHash: <span class="built_in">string</span></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(transactionHash)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听 accounts 变化</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">ethereum</span>.<span class="title function_">on</span>(<span class="string">&#x27;accountsChanged&#x27;</span>, <span class="keyword">async</span> (accounts) =&gt; &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;accountsChanged&#x27;</span>, accounts)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 监听连接</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">ethereum</span>.<span class="title function_">on</span>(<span class="string">&#x27;connect&#x27;</span>,  <span class="function">(<span class="params">connectInfo</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;connect&#x27;</span>, connectInfo)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 监听 message</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">ethereum</span>.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>,  <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;message&#x27;</span>, message)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 监听链变化</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">ethereum</span>.<span class="title function_">on</span>(<span class="string">&#x27;chainChanged&#x27;</span>,  <span class="function">(<span class="params">chainId</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;chainChanged&#x27;</span>, chainId)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="添加网络"><a href="#添加网络" class="headerlink" title="添加网络"></a>添加网络</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addChain</span> () &#123;</span><br><span class="line">  <span class="comment">// 添加 BSC 主网</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">ethereum</span></span><br><span class="line">    .<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;wallet_addEthereumChain&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">chainId</span>: <span class="string">&#x27;0x38&#x27;</span>,</span><br><span class="line">        <span class="attr">chainName</span>: <span class="string">&#x27;Binance Smart Chain Mainnet&#x27;</span>,</span><br><span class="line">        <span class="attr">nativeCurrency</span>: &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;BNB&#x27;</span>,</span><br><span class="line">          <span class="attr">symbol</span>: <span class="string">&#x27;BNB&#x27;</span>,</span><br><span class="line">          <span class="attr">decimals</span>: <span class="number">18</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">rpcUrls</span>: [<span class="string">&#x27;https://bsc-dataseed1.binance.org&#x27;</span>],</span><br><span class="line">        <span class="attr">blockExplorerUrls</span>: [<span class="string">&#x27;https://bscscan.com&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;网络切换成功&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error: <span class="built_in">Error</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切换网络"><a href="#切换网络" class="headerlink" title="切换网络"></a>切换网络</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">switchChain</span> (<span class="attr">chainId</span>: <span class="built_in">string</span>) &#123;</span><br><span class="line">  <span class="comment">// chainId 需为十六进制</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">ethereum</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;wallet_switchEthereumChain&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: [&#123; <span class="attr">chainId</span>: chainId &#125;],</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error: <span class="built_in">Error</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">code</span> === <span class="number">4902</span>) &#123;</span><br><span class="line">      <span class="title function_">addChain</span>()<span class="comment">// 添加网络</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取链-id，并切换网络"><a href="#获取链-id，并切换网络" class="headerlink" title="获取链 id，并切换网络"></a>获取链 id，并切换网络</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">web3.<span class="property">eth</span>.<span class="property">net</span>.<span class="title function_">getId</span>(<span class="function">(<span class="params">error: <span class="built_in">Error</span>, id: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 不为 BSC 主网，则切换到 BSC 主网</span></span><br><span class="line">  id !== <span class="number">56</span> &amp;&amp; <span class="title function_">switchChain</span>(<span class="string">&#x27;0x38&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="代币合约（ERC20）"><a href="#代币合约（ERC20）" class="headerlink" title="代币合约（ERC20）"></a>代币合约（ERC20）</h2><h3 id="创建代币合约实例"><a href="#创建代币合约实例" class="headerlink" title="创建代币合约实例"></a>创建代币合约实例</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以 BUSD 为例</span></span><br><span class="line"><span class="keyword">const</span> busdContractAddress = <span class="string">&#x27;0xe9e7cea3dedca5984780bafc599bd69add087d56&#x27;</span><span class="comment">// BUSD 合约地址，测试网为 &#x27;0x7F38297507F95F7395D1B8fEC7140fAA3Dbe854c&#x27;</span></span><br><span class="line"><span class="keyword">const</span> contractAbi = [ &#123; <span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;constructor&quot;</span> &#125;, &#123; <span class="string">&quot;anonymous&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;inputs&quot;</span>: [ &#123; <span class="string">&quot;indexed&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;owner&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;indexed&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;spender&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;indexed&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;value&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125; ], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Approval&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;event&quot;</span> &#125;, &#123; <span class="string">&quot;anonymous&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;inputs&quot;</span>: [ &#123; <span class="string">&quot;indexed&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;previousOwner&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;indexed&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;newOwner&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125; ], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;OwnershipTransferred&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;event&quot;</span> &#125;, &#123; <span class="string">&quot;anonymous&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;inputs&quot;</span>: [ &#123; <span class="string">&quot;indexed&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;from&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;indexed&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;to&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;indexed&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;value&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125; ], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Transfer&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;event&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;owner&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;spender&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125; ], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;allowance&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125; ], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;view&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;spender&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;amount&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125; ], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;approve&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;bool&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;bool&quot;</span> &#125; ], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;account&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125; ], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;balanceOf&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125; ], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;view&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;decimals&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint8&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint8&quot;</span> &#125; ], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;view&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;spender&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;subtractedValue&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125; ], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;decreaseAllowance&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;bool&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;bool&quot;</span> &#125; ], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;spender&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;addedValue&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125; ], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;increaseAllowance&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;bool&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;bool&quot;</span> &#125; ], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;amount&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125; ], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;mint&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;name&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;string&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span> &#125; ], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;view&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;owner&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125; ], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;view&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;renounceOwnership&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;symbol&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;string&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span> &#125; ], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;view&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;totalSupply&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125; ], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;view&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;recipient&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;amount&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125; ], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;transfer&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;bool&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;bool&quot;</span> &#125; ], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;sender&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;recipient&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125;, &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;uint256&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;amount&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uint256&quot;</span> &#125; ], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;transferFrom&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;bool&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;bool&quot;</span> &#125; ], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125;, &#123; <span class="string">&quot;inputs&quot;</span>: [ &#123; <span class="string">&quot;internalType&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;newOwner&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;address&quot;</span> &#125; ], <span class="string">&quot;name&quot;</span>: <span class="string">&quot;transferOwnership&quot;</span>, <span class="string">&quot;outputs&quot;</span>: [], <span class="string">&quot;stateMutability&quot;</span>: <span class="string">&quot;nonpayable&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span> &#125; ]<span class="comment">// BUSD 合约 ABI</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 BUSD 合约实例</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">busdInstance</span>: <span class="keyword">typeof</span> <span class="title class_">Web3</span>.<span class="property">eth</span>.<span class="property">Contract</span> = <span class="keyword">new</span> web3.<span class="property">value</span>.<span class="property">eth</span>.<span class="title class_">Contract</span>(contractAbi, busdContractAddress)</span><br></pre></td></tr></table></figure><h3 id="查询代币余额"><a href="#查询代币余额" class="headerlink" title="查询代币余额"></a>查询代币余额</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取某个钱包的代币余额</span></span><br><span class="line"><span class="comment">// 获取当前连接钱包地址，address 参数可以为当前连接地址或者其他钱包地址</span></span><br><span class="line"><span class="keyword">const</span> [address] = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="title function_">getAccounts</span>()</span><br><span class="line">busdInstance.<span class="property">value</span>?.<span class="property">methods</span>.<span class="title function_">balanceOf</span>(address).<span class="title function_">call</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res: <span class="built_in">string</span></span>) =&gt;</span> <span class="title function_">resolve</span>(utils.<span class="title function_">fromWei</span>(res)))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error: <span class="built_in">Error</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="代币-approve"><a href="#代币-approve" class="headerlink" title="代币 approve"></a>代币 <em>approve</em></h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用代币交易（转账）时，需先调用 approve 方法为交易地址授予权限</span></span><br><span class="line"><span class="comment">// 授权给某个地址 100BUSD 的权限</span></span><br><span class="line"><span class="keyword">const</span> address = <span class="string">&#x27;0x...&#x27;</span></span><br><span class="line"><span class="keyword">const</span> [account] = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="title function_">getAccounts</span>()</span><br><span class="line">busdInstance.<span class="property">value</span>.<span class="property">methods</span>.<span class="title function_">approve</span>(address, utils.<span class="title function_">toWei</span>(<span class="string">&#x27;100&#x27;</span>))</span><br><span class="line">  .<span class="title function_">send</span>(&#123; <span class="attr">from</span>: account &#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error: <span class="built_in">Error</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="交易（转账）"><a href="#交易（转账）" class="headerlink" title="交易（转账）"></a>交易（转账）</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> toAddress = <span class="string">&#x27;0x...&#x27;</span><span class="comment">// 交易对方地址，地址和金额需与 approve 时的传参一致</span></span><br><span class="line"><span class="keyword">const</span> [account] = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="title function_">getAccounts</span>()</span><br><span class="line"><span class="comment">// 当前用户转账</span></span><br><span class="line">busdInstance.<span class="property">methods</span>.<span class="title function_">transfer</span>(toAddress, utils.<span class="title function_">toWei</span>(<span class="string">&#x27;100&#x27;</span>))</span><br><span class="line">  .<span class="title function_">send</span>(&#123; <span class="attr">from</span>: account &#125;, <span class="keyword">function</span>(<span class="params">error: <span class="built_in">Error</span>, transactionHash: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(transactionHash)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error: <span class="built_in">Error</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// or 指定用户转账</span></span><br><span class="line"><span class="keyword">const</span> [fromAddress] = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="title function_">getAccounts</span>()</span><br><span class="line">busdInstance.<span class="property">methods</span>.<span class="title function_">transferFrom</span>(fromAddress, toAddress, utils.<span class="title function_">toWei</span>(<span class="string">&#x27;100&#x27;</span>))</span><br><span class="line">  .<span class="title function_">send</span>(&#123; <span class="attr">from</span>: account &#125;, <span class="keyword">function</span>(<span class="params">error: <span class="built_in">Error</span>, transactionHash: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(transactionHash)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error: <span class="built_in">Error</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
          <category> web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
            <tag> web3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web3 接入 WalletConnect1.0</title>
      <link href="/2022/03/23/Web3%20%E6%8E%A5%E5%85%A5%20WalletConnect1.0/"/>
      <url>/2022/03/23/Web3%20%E6%8E%A5%E5%85%A5%20WalletConnect1.0/</url>
      
        <content type="html"><![CDATA[<h1 id="Web3-接入-WalletConnect1-0"><a href="#Web3-接入-WalletConnect1-0" class="headerlink" title="Web3 接入 WalletConnect1.0"></a>Web3 接入 WalletConnect1.0</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pnpm add web3 @walletconnect/web3-provider</span><br></pre></td></tr></table></figure><h2 id="创建-walletConnetct-provider"><a href="#创建-walletConnetct-provider" class="headerlink" title="创建 walletConnetct provider"></a>创建 <em>walletConnetct provider</em></h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">WalletConnectProvider</span> <span class="keyword">from</span> <span class="string">&quot;@walletconnect/web3-provider&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 infura 创建，需注册 infura 账号</span></span><br><span class="line"><span class="keyword">const</span> provider = <span class="keyword">new</span> <span class="title class_">WalletConnectProvider</span>(&#123;</span><br><span class="line">  <span class="attr">infuraId</span>: &lt;infuraId&gt;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// or 使用自定义 RPC 创建</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">provider</span>: <span class="built_in">any</span> = <span class="keyword">new</span> <span class="title class_">WalletConnectProvider</span>(&#123;</span><br><span class="line">  <span class="attr">rpc</span>: &#123;</span><br><span class="line">    <span class="number">56</span>: <span class="string">&quot;https://bsc-dataseed1.binance.org/&quot;</span>,<span class="comment">// BSC 主网</span></span><br><span class="line">    <span class="number">97</span>: <span class="string">&quot;https://data-seed-prebsc-1-s1.binance.org:8545/&quot;</span><span class="comment">// BSC 测试网</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">qrcodeModalOptions</span>: &#123;</span><br><span class="line">    <span class="attr">mobileLinks</span>: [<span class="comment">// 配置 modal 显示列表</span></span><br><span class="line">      <span class="string">&quot;metamask&quot;</span>,</span><br><span class="line">      <span class="string">&quot;tokenpocket&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">subscribeToEvents</span> = (<span class="params">provider: WalletConnectProvider</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 监听连接</span></span><br><span class="line">  provider.<span class="title function_">on</span>(<span class="string">&quot;connect&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;connect&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 监听 accounts 变化</span></span><br><span class="line">  provider.<span class="title function_">on</span>(<span class="string">&quot;accountsChanged&quot;</span>, <span class="function">(<span class="params">accounts: <span class="built_in">string</span>[]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;accountsChanged&#x27;</span>, accounts)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 监听 accounts 变化</span></span><br><span class="line">  provider.<span class="title function_">on</span>(<span class="string">&quot;chainChanged&quot;</span>, <span class="function">(<span class="params">chainId: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;chainChanged&#x27;</span>, chainId)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 监听断开</span></span><br><span class="line">  provider.<span class="title function_">on</span>(<span class="string">&quot;disconnect&quot;</span>, <span class="function">(<span class="params">code: <span class="built_in">number</span>, reason: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;disconnect&#x27;</span>, code, reason)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">subscribeToEvents</span>(provider)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  调用 provider 的 enable 方法调起 QR code modal</span></span><br><span class="line"><span class="keyword">await</span> provider.<span class="title function_">enable</span>()</span><br></pre></td></tr></table></figure><h2 id="创建-web3-实例"><a href="#创建-web3-实例" class="headerlink" title="创建 web3 实例"></a>创建 web3 实例</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Web3</span> <span class="keyword">from</span> <span class="string">&#x27;web3&#x27;</span></span><br><span class="line"><span class="comment">// or 如第一种引入方式报错请使用第二种方式</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Web3</span> <span class="keyword">from</span> <span class="string">&#x27;web3/dist/web3.min.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 web3 实例</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">web3</span>: <span class="keyword">typeof</span> <span class="title class_">Web3</span> = <span class="keyword">new</span> <span class="title class_">Web3</span>(provider)</span><br><span class="line"><span class="comment">// 获取连接的 accounts</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">accounts</span>: <span class="built_in">string</span>[] = <span class="keyword">await</span> web3?.<span class="property">eth</span>.<span class="title function_">getAccounts</span>()</span><br></pre></td></tr></table></figure><h3 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">killSession</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  provider.<span class="title function_">disconnect</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h2><ol><li><p>使用 vite 报 Buffer process EventEmitter global 不存在的错误</p><p>解决方案一（推荐）</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装以下依赖</span></span><br><span class="line">pnpm add -D rollup-plugin-polyfill-node</span><br></pre></td></tr></table></figure><p>修改 vite.config.ts</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> nodePolyfills <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-polyfill-node&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      ...nodePolyfills (&#123; <span class="attr">include</span>: [<span class="string">&#x27;node_modules/**/*.js&#x27;</span>, <span class="regexp">/node_modules\/.vite\/.*js/</span>] &#125;),</span><br><span class="line">      <span class="attr">apply</span>: <span class="string">&#x27;serve&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">plugins</span>: [<span class="title function_">nodePolyfills</span>()]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">commonjsOptions</span>: &#123;</span><br><span class="line">      <span class="attr">transformMixedEsModules</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>解决方案二</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装以下依赖</span></span><br><span class="line">pnpm add buffer buffer process util</span><br></pre></td></tr></table></figure><p>在 <em>index.html</em> 中添加以下代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">global</span> = <span class="variable language_">window</span>;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> process <span class="keyword">from</span> <span class="string">&quot;process&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; <span class="title class_">Buffer</span> &#125; <span class="keyword">from</span> <span class="string">&quot;buffer&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">EventEmitter</span> <span class="keyword">from</span> <span class="string">&quot;events&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">Buffer</span> = <span class="title class_">Buffer</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">process</span> = process;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">EventEmitter</span> = <span class="title class_">EventEmitter</span>;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <em>vite.config.ts</em> 中添加以下代码</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解决 build 后报错</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">commonjsOptions</span>: &#123;</span><br><span class="line">      <span class="attr">transformMixedEsModules</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>无法调起 walletConnect QR code modal</p><p>walletConnect 必须在 https 环境下使用</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置 vite.config.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">https</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>或者使用 <em>nginx</em> 配置 https</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443  ssl http2;</span><br><span class="line">    server_name example.io;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入 ssl 证书</span></span><br><span class="line">    include ssl/example.io/ssl.conf;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass https://127.0.0.1:3000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vite </category>
          
          <category> Typescript </category>
          
          <category> Vue3 </category>
          
          <category> web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vite </tag>
            
            <tag> Typescript </tag>
            
            <tag> Vue3 </tag>
            
            <tag> web3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2022/03/12/Nginx/"/>
      <url>/2022/03/12/Nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h3 id="Nginx-命令"><a href="#Nginx-命令" class="headerlink" title="Nginx 命令"></a>Nginx 命令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nginx -v <span class="comment"># 查看 nginx 版本</span></span><br><span class="line">nginx -V <span class="comment"># 查看版本和配置选项信息</span></span><br><span class="line">nginx<span class="comment"># 启动</span></span><br><span class="line">nginx -s reopen <span class="comment"># 重启</span></span><br><span class="line">nginx -s stop<span class="comment"># 立即停止</span></span><br><span class="line">nginx -s quit <span class="comment"># 等待进程结束后关闭</span></span><br><span class="line">nginx -s reload<span class="comment"># 重新加载配置</span></span><br><span class="line">nginx -T <span class="comment"># 查看最终配置</span></span><br><span class="line">nginx -t <span class="comment"># 测试配置文件是否有语法错误</span></span><br><span class="line">nginx -c &lt;fileName&gt; <span class="comment"># 指定配置文件</span></span><br><span class="line">ps aux|grep nginx<span class="comment"># 查看进程</span></span><br></pre></td></tr></table></figure><h2 id="Nginx-基本配置"><a href="#Nginx-基本配置" class="headerlink" title="Nginx 基本配置"></a>Nginx 基本配置</h2><h3 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx.config</span></span><br><span class="line"><span class="comment"># nginx 全局配置 start</span></span><br><span class="line"><span class="comment">#user  nobody;# 运行用户</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>; <span class="comment"># 并发处理服务，值越大，并发数越多。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误日志</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;# pid 位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx 全局配置 end</span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;<span class="comment"># 事件</span></span><br><span class="line"><span class="attribute">worker_connections</span>  <span class="number">1024</span>;<span class="comment"># 最大连接数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;<span class="comment"># http 配置</span></span><br><span class="line">  <span class="attribute">include</span>       mime.types;</span><br><span class="line">  <span class="attribute">default_type</span>  application/octet-stream;<span class="comment"># 设置默认类型</span></span><br><span class="line">  <span class="attribute">server_names_hash_bucket_size</span> <span class="number">256</span>;</span><br><span class="line">  <span class="attribute">proxy_buffer_size</span> <span class="number">10240k</span>;</span><br><span class="line">  <span class="attribute">proxy_buffers</span> <span class="number">16</span> <span class="number">10240k</span>;</span><br><span class="line">  <span class="attribute">proxy_busy_buffers_size</span> <span class="number">20480k</span>;</span><br><span class="line">  <span class="attribute">proxy_temp_file_write_size</span> <span class="number">20480k</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志</span></span><br><span class="line">  <span class="attribute">log_format</span>  main  <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">  <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">  <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#access_log  logs/access.log  main;# 设置日志存放位置</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">  <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">  <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">include</span> servers/<span class="regexp">*.conf</span>;<span class="comment"># 引入了 servers 目录下的全部 .conf 文件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># servers/&lt;file name&gt;.conf</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;<span class="comment"># 监听 80 端口</span></span><br><span class="line">  <span class="attribute">server_name</span> localhost;<span class="comment"># 服务名，域名</span></span><br><span class="line">  <span class="attribute">default_type</span> text/html; <span class="comment"># 为当前 server 设置类型，不设置默认使用全局默认类型</span></span><br><span class="line">  </span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span> /example;<span class="comment"># 静态服务器 example 目录</span></span><br><span class="line"><span class="attribute">index</span> index.html index.htm;<span class="comment"># 默认访问 index.html 文件</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="location-优先级"><a href="#location-优先级" class="headerlink" title="location 优先级"></a>location 优先级</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># location[= | ~ | ~* | ^~] &lt;path&gt; &#123; ... &#125;</span></span><br><span class="line"><span class="comment"># = 进行普通字符精确匹配。也就是完全匹配。</span></span><br><span class="line"><span class="comment"># ^~ 前缀匹配。如果匹配成功，则不再匹配其他location。</span></span><br><span class="line"><span class="comment"># ~ 表示执行一个正则匹配，区分大小写</span></span><br><span class="line"><span class="comment"># ~* 表示执行一个正则匹配，不区分大小写</span></span><br><span class="line"><span class="comment"># /xxx/ 常规字符串路径匹配</span></span><br><span class="line"><span class="comment"># / 通用匹配，任何请求都会匹配到</span></span><br><span class="line"><span class="section">location</span> / &#123;<span class="comment"># 优先级最低</span></span><br><span class="line"><span class="attribute">root</span> /example;<span class="comment"># 静态服务器 example 目录</span></span><br><span class="line"><span class="attribute">index</span> index.html index.htm;<span class="comment"># 默认访问 index.html 文件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> = /example &#123; <span class="comment"># &#x27;=&#x27; 优先级最高</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="section">location</span><span class="regexp"> ^~</span> /example &#123;<span class="comment"># &#x27;^~&#x27; 优先级次高</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="section">location</span> <span class="regexp">~ &lt;RegExp&gt;</span> &#123;<span class="comment"># 正则表达式 优先级次次高</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 同优先级，匹配第一个</span></span><br><span class="line"><span class="section">location</span> <span class="regexp">~ ^/\w</span> &#123;<span class="comment"># 第一个被匹配</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="section">location</span> <span class="regexp">~ ^/\[a-z]</span> &#123;</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="return"><a href="#return" class="headerlink" title="return"></a>return</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回 http 状态码</span></span><br><span class="line"><span class="section">location</span> /example &#123;</span><br><span class="line"><span class="comment"># return &lt;status code&gt; &lt;url&gt;</span></span><br><span class="line"><span class="attribute">return</span> <span class="number">301</span> http://www.examole.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="error-page"><a href="#error-page" class="headerlink" title="error_page"></a>error_page</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> /example &#123;</span><br><span class="line"><span class="comment"># error_page &lt;status code&gt; &lt;url&gt;</span></span><br><span class="line"><span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="section">location</span> /example &#123;</span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="attribute">rewrite</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="log"><a href="#log" class="headerlink" title="log"></a>log</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需将 gzip 设置为 on</span></span><br><span class="line"><span class="attribute">log_format</span>  main  <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">access_log</span>  /usr/local/etc/nginx/logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line"><span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set $&lt;variableName&gt; &lt;vlaue&gt;</span></span><br><span class="line"><span class="attribute">set</span> <span class="variable">$path</span> /test</span><br><span class="line">location /set &#123;</span><br><span class="line"><span class="attribute">root</span> <span class="variable">$path</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$args</span> ：<span class="comment">#这个变量等于请求行中的参数，同$query_string</span></span><br><span class="line"><span class="variable">$content_length</span> ：请求头中的Content-length字段</span><br><span class="line"><span class="variable">$content_type</span> ：请求头中的Content-Type字段</span><br><span class="line"><span class="variable">$document_root</span> ：当前请求在root指令中指定的值</span><br><span class="line"><span class="variable">$host</span> ：请求主机头字段，否则为服务器名称</span><br><span class="line"><span class="variable">$http_user_agent</span> ：客户端agent信息</span><br><span class="line"><span class="variable">$http_cookie</span> ：客户端cookie信息</span><br><span class="line"><span class="variable">$limit_rate</span> ：这个变量可以限制连接速率</span><br><span class="line"><span class="variable">$request_method</span> ：客户端请求的动作，通常为GET或POST</span><br><span class="line"><span class="variable">$remote_addr</span> ：客户端的IP地址</span><br><span class="line"><span class="variable">$remote_port</span> ：客户端的端口</span><br><span class="line"><span class="variable">$remote_user</span> ：已经经过Auth Basic Module验证的用户名</span><br><span class="line"><span class="variable">$request_filename</span> ：当前请求的文件路径，由root或alias指令与URI请求生成</span><br><span class="line"><span class="variable">$scheme</span> ：HTTP方法（如http，https）</span><br><span class="line"><span class="variable">$server_protocol</span> ：请求使用的协议，通常是HTTP/<span class="number">1</span>.<span class="number">0</span>或HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="variable">$server_addr</span> ：服务器地址，在完成一次系统调用后可以确定这个值</span><br><span class="line"><span class="variable">$server_name</span> ：服务器名称</span><br><span class="line"><span class="variable">$server_port</span> ：请求到达服务器的端口号</span><br><span class="line"><span class="variable">$request_uri</span> ：包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”</span><br><span class="line"><span class="variable">$uri</span> ：不带请求参数的当前URI，<span class="variable">$uri</span>不包含主机名，如”/foo/bar.html”</span><br><span class="line"><span class="variable">$document_uri</span> ：与<span class="variable">$uri</span>相同</span><br></pre></td></tr></table></figure><h2 id="Nginx-常用功能"><a href="#Nginx-常用功能" class="headerlink" title="Nginx 常用功能"></a>Nginx 常用功能</h2><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;<span class="comment"># 监听 80 端口</span></span><br><span class="line">  <span class="attribute">server_name</span> localhost;<span class="comment"># 服务名，域名</span></span><br><span class="line">  <span class="attribute">default_type</span> text/html; <span class="comment"># 为当前 server 设置类型，不设置默认使用全局默认类型</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># proxy_pass 为反向代理</span></span><br><span class="line">  <span class="comment"># proxy_pass url 末尾不带 &#x27;/&#x27; 时，连同匹配到的 /test/ 路径一起进行反向代理 </span></span><br><span class="line">  <span class="section">location</span> /test &#123;<span class="comment"># /test/xxx =&gt; http://example.com/test/xxx</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://example.com;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># proxy_pass url 末尾带 &#x27;/&#x27; 时，省略了匹配到的 /test/ 路径</span></span><br><span class="line">  <span class="section">location</span> /test/ &#123; <span class="comment"># /test/xxx =&gt; http://example.com/xxx</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://example.com/;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> /api &#123;<span class="comment"># 将 localhost:80/api 反向代理到 http://api.example.com</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://api.example.com;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 禁止访问 deny</span></span><br><span class="line"><span class="section">location</span> /example &#123;</span><br><span class="line"><span class="attribute">root</span> <span class="variable">$doc_root</span>;</span><br><span class="line"><span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> / &#123;<span class="comment"># 规则自上而下匹配</span></span><br><span class="line"><span class="attribute">deny</span> &lt;ip&gt;; <span class="comment"># 禁止某个 ip</span></span><br><span class="line"><span class="attribute">allow</span> &lt;ip&gt;; <span class="comment"># 允许某个 ip</span></span><br><span class="line"><span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><p>反向代理</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">3000</span>;</span><br><span class="line">  <span class="attribute">server_name</span> www.example.com;</span><br><span class="line">  </span><br><span class="line">  <span class="section">location</span><span class="regexp"> ^~/api</span> &#123;<span class="comment"># /api/ 代理到 api.example.com/api</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> api.example.com;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置请求头</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">add_header</span> Access-Control-Allow-Origin http://example.com always;<span class="comment"># 设置请求源。* 允许所有请求，带 cookie 的请求不支持 *</span></span><br><span class="line">  <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">&quot;GET, POST, PUT, OPTIONS&quot;</span>;<span class="comment"># 允许的方法</span></span><br><span class="line">  <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="string">&quot;Accept,Accept-Encoding,Accept-Language,Connection,Content-Length,Content-Type,Host,Origin,Referer,User-Agent&quot;</span>;<span class="comment"># 允许请求的 header</span></span><br><span class="line">  <span class="attribute">add_header</span> Access-Control-Allow-Credentials <span class="literal">true</span>;    <span class="comment"># 带 cookie，Access-Control-Allow-Credentials 为 true Access-Control-Allow-Origin 和 Access-Control-Allow-Headers 不能为 *</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 非简单请求的预检请求 OPTIONS 请求返回 204</span></span><br><span class="line">  <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="number">86400</span>;   <span class="comment"># OPTIONS 请求的有效期，在有效期内不用发出另一条预检请求</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="comment"># 服务端口为 443，开启 ssl</span></span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span>  ssl http2;</span><br><span class="line">  <span class="comment"># 配置域名</span></span><br><span class="line">  <span class="attribute">server_name</span> example.com;</span><br><span class="line"><span class="comment"># 配置 ssl 证书</span></span><br><span class="line">  <span class="attribute">ssl_certificate</span>      ssl/xxx.pem;</span><br><span class="line">  <span class="attribute">ssl_certificate_key</span>  ssl/xxx2.pem;</span><br><span class="line">  <span class="comment"># 缓存有效期</span></span><br><span class="line">  <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line">  <span class="comment"># 使用服务器端端首选算法</span></span><br><span class="line">  <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="comment"># 支持 ssl 协议</span></span><br><span class="line">  <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">  <span class="comment"># 加密算法</span></span><br><span class="line">  <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">  <span class="comment"># 配置静态文件路径</span></span><br><span class="line">    <span class="attribute">root</span> /data/www;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># servers/&lt;file name&gt;.conf</span></span><br><span class="line"><span class="section">upstream</span> balance &#123;</span><br><span class="line"><span class="comment"># weight 为权重，权重越大访问概率越高；不配置权重默认配置为轮询。</span></span><br><span class="line"><span class="attribute">server</span> <span class="number">127.0.0.1:8080</span> weight=<span class="number">1</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">127.0.0.1:8081</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">127.0.0.1:8082</span> backup;<span class="comment">#backup 为备用服务器，只有其他服务器宕机的情况下才会使用。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="section">upstream</span> test &#123;</span><br><span class="line">fair;<span class="comment"># 设置 fair 可以按服务器的响应时间来分配请求，响应时间短的优先分配, 需安装第三方插件。</span></span><br><span class="line"><span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line"><span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">upstream</span> test2 &#123;</span><br><span class="line">ip_hash;<span class="comment"># </span></span><br><span class="line"><span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line"><span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">upstream</span> test3 &#123;</span><br><span class="line"><span class="attribute">hash</span> <span class="variable">$requst_url</span>;<span class="comment"># url_hash 需安装第三方插件。</span></span><br><span class="line"><span class="attribute">hash_method</span> crc32;</span><br><span class="line"><span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line"><span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;<span class="comment"># 监听 80 端口</span></span><br><span class="line">  <span class="attribute">server_name</span> example.com;<span class="comment"># 服务名</span></span><br><span class="line">  <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> balance;<span class="comment"># 反向代理到 balance 设置的两个服务器</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://balance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 3 + Typescript + Vite2</title>
      <link href="/2021/08/10/Vue%203%20+%20Typescript%20+%20Vite2/"/>
      <url>/2021/08/10/Vue%203%20+%20Typescript%20+%20Vite2/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn create vite &lt;project name&gt; --template vue-ts</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn create vite</span><br></pre></td></tr></table></figure><h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h2><p>安装 node TS 声明文件</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add --dev @types/node</span><br></pre></td></tr></table></figure><p>修改 <code>vite.config.ts</code> </p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span><span class="comment">// 此语法有可能导致 idea 报错 TS1259: Module &#x27;&quot;path&quot;&#x27; can only be default-imported using the &#x27;esModuleInterop&#x27; flag, 改成 import path = require(&#x27;path&#x27;) 可解决报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&quot;src&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src&quot;</span>),<span class="comment">// 配置根目录别名</span></span><br><span class="line">      <span class="string">&quot;comps&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src/components&quot;</span>),<span class="comment">// 配置组件目录别名</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add --dev vue-router@next</span><br></pre></td></tr></table></figure><p>添加 <code>views/home.vue</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent &#125; from &#x27;vue&#x27;</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &#x27;HelloWorld&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>创建 <code>src/router/index.ts</code></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory, <span class="title class_">RouteRecordRaw</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;src/views/home.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>修改 <code>main.ts</code> 添加 <code>router</code> 配置</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>修改 <code>App.vue</code> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add vuex@next --save</span><br></pre></td></tr></table></figure><p>创建 <code>store/index.ts</code></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>修改 <code>main.ts</code> 添加 <code>router</code> 配置</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">use</span>(store).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="SASS"><a href="#SASS" class="headerlink" title="SASS"></a>SASS</h2><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add --dev sass</span><br></pre></td></tr></table></figure><p>添加 <code>styles/index.scss styles/common.scss</code></p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// styles/index.scss</span></span><br><span class="line"><span class="keyword">@import</span> url(./common.scss);</span><br></pre></td></tr></table></figure><p>修改 <code>main.ts</code> 引入</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/styles/index.scss&#x27;</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="jsx-x2F-tsx"><a href="#jsx-x2F-tsx" class="headerlink" title="jsx&#x2F;tsx"></a>jsx&#x2F;tsx</h2><p>安装插件</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add --dev @vitejs/plugin-vue-jsx</span><br></pre></td></tr></table></figure><p>修改 <code>vite.config.ts</code></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">import</span> vueJsx <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue-jsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>(), <span class="title function_">vueJsx</span>()],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>修改 <code>views/home.vue</code> </p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;tsx&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">() =&gt;</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        hello, world</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><p>配置 <code>.editorconfig</code></p><p>在项目根目录创建 <code>.editorconfig</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Editor configuration, see http://editorconfig.org</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示是最顶层的 EditorConfig 配置文件</span></span><br><span class="line"><span class="string">root</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[<span class="string">*</span>] <span class="comment"># 表示所有文件适用</span></span><br><span class="line"><span class="string">charset</span> <span class="string">=</span> <span class="string">utf-8</span> <span class="comment"># 设置文件字符集为 utf-8</span></span><br><span class="line"><span class="string">indent_style</span> <span class="string">=</span> <span class="string">space</span> <span class="comment"># 缩进风格（tab | space）</span></span><br><span class="line"><span class="string">indent_size</span> <span class="string">=</span> <span class="number">2</span> <span class="comment"># 缩进大小</span></span><br><span class="line"><span class="string">end_of_line</span> <span class="string">=</span> <span class="string">lf</span> <span class="comment"># 控制换行类型(lf | cr | crlf)</span></span><br><span class="line"><span class="string">trim_trailing_whitespace</span> <span class="string">=</span> <span class="literal">true</span> <span class="comment"># 去除行首的任意空白字符</span></span><br><span class="line"><span class="string">insert_final_newline</span> <span class="string">=</span> <span class="literal">true</span> <span class="comment"># 始终在文件末尾插入一个新行</span></span><br><span class="line"></span><br><span class="line">[<span class="string">*.md</span>] <span class="comment"># 表示仅 md 文件适用以下规则</span></span><br><span class="line"><span class="string">max_line_length</span> <span class="string">=</span> <span class="string">off</span></span><br><span class="line"><span class="string">trim_trailing_whitespace</span> <span class="string">=</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>配置 <code>eslint</code></p><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add --dev prettier eslint</span><br></pre></td></tr></table></figure><h3 id="配置-prettier"><a href="#配置-prettier" class="headerlink" title="配置 prettier"></a>配置 <code>prettier</code></h3><p>在项目目录添加 <code>.prettierrc</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;useTabs&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">80</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bracketSpacing&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>修改 <code>package.json</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write .&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h3 id="配置-ESlint"><a href="#配置-ESlint" class="headerlink" title="配置 ESlint"></a>配置 <code>ESlint</code></h3><p>创建 <code>.eslintrc.js</code> 文件</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx eslint --init</span><br></pre></td></tr></table></figure><h3 id="使用-husky"><a href="#使用-husky" class="headerlink" title="使用 husky"></a>使用 husky</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx husky-init &amp;&amp; yarn</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 添加</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">&quot;lint:code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --fix ./src --ext .vue,.js,.jsx,.ts,.tsx&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>修改 <code>.husky/pre-commit</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line"></span><br><span class="line">yarn lint:code</span><br></pre></td></tr></table></figure><h3 id="lint-staged"><a href="#lint-staged" class="headerlink" title="lint-staged"></a>lint-staged</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add --dev lint-staged</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 添加</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;*.&#123;js,jsx,ts,tsx&#125;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;prettier --write&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;eslint --fix&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;*.vue&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;prettier --parser=vue --write&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;eslint --fix&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="jest"><a href="#jest" class="headerlink" title="jest"></a>jest</h2><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add --dev jest  @types/jest vue-jest@next @vue/test-utils@next</span><br><span class="line">yarn add --dev ts-jest @babel/preset-env @babel/preset-typescript</span><br></pre></td></tr></table></figure><p>添加 <code>jest.config.ts</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx jest --init</span><br><span class="line">√ Would you like to use Typescript <span class="keyword">for</span> the configuration file? ... <span class="built_in">yes</span></span><br><span class="line">√ Choose the <span class="built_in">test</span> environment that will be used <span class="keyword">for</span> testing » jsdom (browser-like)</span><br><span class="line">√ Do you want Jest to add coverage reports? ... <span class="built_in">yes</span></span><br><span class="line">√ Which provider should be used to instrument code <span class="keyword">for</span> coverage? » babel</span><br><span class="line">√ Automatically clear mock calls and instances between every <span class="built_in">test</span>? ... <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>修改 <code>jest.config.ts</code></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">testEnvironment</span>: <span class="string">&quot;jsdom&quot;</span>,</span><br><span class="line">  <span class="attr">transform</span>: &#123;</span><br><span class="line">    <span class="string">&quot;^.+\\.vue$&quot;</span>: <span class="string">&quot;vue-jest&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;^.+\\.(j|t)sx?$&#x27;</span>: [</span><br><span class="line">      <span class="string">&#x27;babel-jest&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">presets</span>: [</span><br><span class="line">          [<span class="string">&#x27;@babel/preset-env&#x27;</span>, &#123; <span class="attr">targets</span>: &#123; <span class="attr">node</span>: <span class="string">&#x27;current&#x27;</span> &#125; &#125;],</span><br><span class="line">          [<span class="string">&#x27;@babel/preset-typescript&#x27;</span>]</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">plugins</span>: [<span class="string">&#x27;@vue/babel-plugin-jsx&#x27;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">moduleFileExtensions</span>: [<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;jsx&#x27;</span>, <span class="string">&#x27;ts&#x27;</span>, <span class="string">&#x27;tsx&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;node&#x27;</span>],</span><br><span class="line">  <span class="attr">testMatch</span>: [<span class="string">&quot;**/tests/**/*.spec.(js|ts)&quot;</span>, <span class="string">&quot;**/__tests__/**/*.spec.(js|ts)&quot;</span>],</span><br><span class="line">  <span class="attr">testPathIgnorePatterns</span>: [<span class="string">&#x27;/node_modules/&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决报错"><a href="#解决报错" class="headerlink" title="解决报错"></a>解决报错</h3><h4 id="TypeError-Cannot-destructure-property-39-config-39-of-39-undefined-39-as-it-is-undefined"><a href="#TypeError-Cannot-destructure-property-39-config-39-of-39-undefined-39-as-it-is-undefined" class="headerlink" title="TypeError: Cannot destructure property &#39;config&#39; of &#39;undefined&#39; as it is undefined."></a><code>TypeError: Cannot destructure property &#39;config&#39; of &#39;undefined&#39; as it is undefined.</code></h4><p>将 jest 和 ts-jest(babel-jest)版本从 27 改为 26</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add --dev ts-jest@26.5.6 jest@26.6.3</span><br></pre></td></tr></table></figure><h4 id="TS7016-Could-not-find-a-declaration-file-for-module-39-vue-test-utils-39"><a href="#TS7016-Could-not-find-a-declaration-file-for-module-39-vue-test-utils-39" class="headerlink" title="TS7016: Could not find a declaration file for module &#39;@vue/test-utils&#39;."></a><code>TS7016: Could not find a declaration file for module &#39;@vue/test-utils&#39;.</code></h4><p>添加 <code>&lt;file name&gt;.d.ts</code></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;@vue/test-utils&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="解决测试文件引入样式无法识别的问题-1"><a href="#解决测试文件引入样式无法识别的问题-1" class="headerlink" title="解决测试文件引入样式无法识别的问题 1"></a>解决测试文件引入样式无法识别的问题 <a href="https://jestjs.io/zh-Hans/docs/webpack#%E6%A8%A1%E6%8B%9F-css-%E6%A8%A1%E5%9D%97"><sup>1</sup></a></h4><p>在 <code>jest.config.ts</code> 添加</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="attr">moduleNameMapper</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;\\.(css|less|scss|sass)$&#x27;</span>: <span class="string">&#x27;&lt;rootDir&gt;/__mocks__/styleMock.ts&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$&#x27;</span>: <span class="string">&#x27;&lt;rootDir&gt;/__mocks__/fileMock.ts&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>并在项目目录下创建 <code>__mocks__/fileMock.ts</code> 和 <code>__mocks__/styleMock.ts</code></p><h2 id="提交规范"><a href="#提交规范" class="headerlink" title="提交规范"></a>提交规范</h2><h3 id="使用-commitizen"><a href="#使用-commitizen" class="headerlink" title="使用 commitizen"></a>使用 <code>commitizen</code></h3><p>安装 <code>commitizen</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn global add commitizen</span><br></pre></td></tr></table></figure><p>初始化 <code>commitizen</code></p><p>安装并初始化 <code>commitizen</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx commitizen init cz-conventional-changelog --yarn --dev --exact</span><br></pre></td></tr></table></figure><p>自定义配置</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx commitizen init cz-customizable --yarn --dev --exact --force</span><br></pre></td></tr></table></figure><p>在项目根目录添加 <code>.cz-config.js</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// type 类型（定义之后，可通过上下键选择）</span></span><br><span class="line">  <span class="attr">types</span>: [</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;feat&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;feat:     新增功能&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;fix&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;fix:      Bug修复&#x27;</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;docs&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;docs:     文档类的更新，包括修改用户文档或者开发文档等&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;style&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;style:    代码格式（不影响功能，例如空格、分号等格式修正）&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;refactor&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;refactor: 代码重构（不包括 feat fix perf style）&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;perf&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;perf:     提高代码性能的变更&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;test&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;test:     添加、修改测试用例&#x27;</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;build&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;build:    构建流程、外部依赖变更（如升级 npm 包、修改 webpack 配置等）&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;ci&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;ci:       修改 CI 配置、脚本&#x27;</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;chore&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;chore:    对构建过程或辅助工具和库的更改（不影响源文件、测试用例）&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;revert&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;revert:   回滚 commit&#x27;</span> &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// scope 类型（定义之后，可通过上下键选择）</span></span><br><span class="line">  <span class="attr">scopes</span>: [</span><br><span class="line">    [<span class="string">&#x27;components&#x27;</span>, <span class="string">&#x27;组件相关&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;hooks&#x27;</span>, <span class="string">&#x27;hook 相关&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;utils&#x27;</span>, <span class="string">&#x27;utils 相关&#x27;</span>],</span><br><span class="line">    <span class="comment">// [&#x27;element-ui&#x27;, &#x27;对 element-ui 的调整&#x27;],</span></span><br><span class="line">    [<span class="string">&#x27;styles&#x27;</span>, <span class="string">&#x27;样式相关&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;deps&#x27;</span>, <span class="string">&#x27;项目依赖&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;auth&#x27;</span>, <span class="string">&#x27;对 auth 修改&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;other&#x27;</span>, <span class="string">&#x27;其他修改&#x27;</span>],</span><br><span class="line">    <span class="comment">// 如果选择 custom，后面会让你再输入一个自定义的 scope。也可以不设置此项，把后面的 allowCustomScopes 设置为 true</span></span><br><span class="line">    [<span class="string">&#x27;custom&#x27;</span>, <span class="string">&#x27;以上都不是？我要自定义&#x27;</span>]</span><br><span class="line">  ].<span class="title function_">map</span>(<span class="function">(<span class="params">[value, description]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      value,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">`<span class="subst">$&#123;value.padEnd(<span class="number">30</span>)&#125;</span> (<span class="subst">$&#123;description&#125;</span>)`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否允许自定义填写 scope，在 scope 选择的时候，会有 empty 和 custom 可以选择。</span></span><br><span class="line">  <span class="comment">// allowCustomScopes: true,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// allowTicketNumber: false,</span></span><br><span class="line">  <span class="comment">// isTicketNumberRequired: false,</span></span><br><span class="line">  <span class="comment">// ticketNumberPrefix: &#x27;TICKET-&#x27;,</span></span><br><span class="line">  <span class="comment">// ticketNumberRegExp: &#x27;\\d&#123;1,5&#125;&#x27;,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 针对每一个 type 去定义对应的 scopes，例如 fix</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  scopeOverrides: &#123;</span></span><br><span class="line"><span class="comment">    fix: [</span></span><br><span class="line"><span class="comment">      &#123; name: &#x27;merge&#x27; &#125;,</span></span><br><span class="line"><span class="comment">      &#123; name: &#x27;style&#x27; &#125;,</span></span><br><span class="line"><span class="comment">      &#123; name: &#x27;e2eTest&#x27; &#125;,</span></span><br><span class="line"><span class="comment">      &#123; name: &#x27;unitTest&#x27; &#125;</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 交互提示信息</span></span><br><span class="line">  <span class="attr">messages</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;确保本次提交遵循 Angular 规范！\n选择你要提交的类型：&#x27;</span>,</span><br><span class="line">    <span class="attr">scope</span>: <span class="string">&#x27;\n选择一个 scope（可选）：&#x27;</span>,</span><br><span class="line">    <span class="comment">// 选择 scope: custom 时会出下面的提示</span></span><br><span class="line">    <span class="attr">customScope</span>: <span class="string">&#x27;请输入自定义的 scope：&#x27;</span>,</span><br><span class="line">    <span class="attr">subject</span>: <span class="string">&#x27;填写简短精炼的变更描述：\n&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;填写更加详细的变更描述（可选）。使用 &quot;|&quot;  换行：\n&#x27;</span>,</span><br><span class="line">    <span class="attr">breaking</span>: <span class="string">&#x27;列举非兼容性重大的变更（可选）：\n&#x27;</span>,</span><br><span class="line">    <span class="attr">footer</span>: <span class="string">&#x27;列举出所有变更的 ISSUES CLOSED（可选）。 例如: #31, #34：\n&#x27;</span>,</span><br><span class="line">    <span class="attr">confirmCommit</span>: <span class="string">&#x27;确认提交？&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置只有 type 选择了 feat 或 fix，才询问 breaking message</span></span><br><span class="line">  <span class="attr">allowBreakingChanges</span>: [<span class="string">&#x27;feat&#x27;</span>, <span class="string">&#x27;fix&#x27;</span>],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 跳过要询问的步骤</span></span><br><span class="line">  <span class="comment">// skipQuestions: [&#x27;body&#x27;, &#x27;footer&#x27;],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// subject 限制长度</span></span><br><span class="line">  <span class="attr">subjectLimit</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">breaklineChar</span>: <span class="string">&#x27;|&#x27;</span> <span class="comment">// 支持 body 和 footer</span></span><br><span class="line">  <span class="comment">// footerPrefix : &#x27;ISSUES CLOSED:&#x27;</span></span><br><span class="line">  <span class="comment">// askForBreakingChangeFirst : true,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-commitlint-验证-commit"><a href="#使用-commitlint-验证-commit" class="headerlink" title="使用 commitlint 验证 commit"></a>使用 commitlint 验证 commit</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add --dev @commitlint/config-conventional @commitlint/cli</span><br></pre></td></tr></table></figure><p>创建 <code>commitlint.config.js</code></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; <span class="attr">extends</span>: [<span class="string">&#x27;@commitlint/config-conventional&#x27;</span>] &#125;</span><br></pre></td></tr></table></figure><p>使用以下命令生成 commit-msg</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx husky add .husky/commit-msg <span class="string">&quot;npx --no-install commitlint --edit <span class="variable">$1</span>&quot;</span></span><br></pre></td></tr></table></figure><p>使用 <code>commitizen</code> 提交代码</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git cz</span><br></pre></td></tr></table></figure><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><p>安装 axios</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add axios</span><br></pre></td></tr></table></figure><p>在根目录添加配置文件 <code>.env.development</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VITE_BASE_API=/api</span><br></pre></td></tr></table></figure><p>添加 <code>env.d.ts</code> 声明文件</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// eslint-disable-next-line no-unused-vars</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ImportMetaEnv</span> &#123;</span><br><span class="line">  <span class="attr">VITE_BASE_API</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 <code>src/utils/request.ts</code></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Axios</span> <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">baseURL</span>: <span class="built_in">string</span> = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_BASE_API</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> axios = <span class="title class_">Axios</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">  baseURL,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前置拦截器（发起请求之前的拦截）</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据你的项目实际情况来对 config 做处理</span></span><br><span class="line"><span class="comment">     * 这里对 config 不做任何处理，直接返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// config.headers[&#x27;X-Token&#x27;] = &#x27;my token&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后置拦截器（获取到响应时的拦截）</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据你的项目实际情况来对 response 和 error 做处理</span></span><br><span class="line"><span class="comment">     * 这里对 response 和 error 不做任何处理，直接返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span> &amp;&amp; error.<span class="property">response</span>.<span class="property">data</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> code = error.<span class="property">response</span>.<span class="property">status</span></span><br><span class="line">      <span class="keyword">const</span> msg = error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Code: <span class="subst">$&#123;code&#125;</span>, Message: <span class="subst">$&#123;msg&#125;</span>`</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;[Axios Error]&#x27;</span>, error.<span class="property">response</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`<span class="subst">$&#123;error&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure><h2 id="完整项目"><a href="#完整项目" class="headerlink" title="完整项目"></a>完整项目</h2><p><a href="https://github.com/keangj/vue3-vite-demo">项目地址</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://juejin.cn/post/6910014283707318279#heading-9">备战2021：vite工程化实践，建议收藏</a></li><li>[2] <a href="https://juejin.cn/post/6951649464637636622#heading-8">从 0 开始手把手带你搭建一套规范的 Vue3.x 项目工程环境</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vite </category>
          
          <category> Vue </category>
          
          <category> Typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vite </tag>
            
            <tag> Vue </tag>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise、async</title>
      <link href="/2021/07/15/Promise/"/>
      <url>/2021/07/15/Promise/</url>
      
        <content type="html"><![CDATA[<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise.resolve() 创建一个成功或失败</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">reject</span>())); <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>Promise.reject() 创建一个失败</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;错误&#x27;</span>).<span class="title function_">then</span>(<span class="literal">null</span>, <span class="function"><span class="params">reason</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(reason))<span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>Promise.all() 所有都成功,或者有一个失败</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>), <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>), <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>)])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">values</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(values)) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>), <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">2</span>), <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">3</span>)])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="literal">null</span>, <span class="function"><span class="params">reason</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>Promise.race() 返回第一个改变状态的结果</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>), <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>)])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">values</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(values)) <span class="comment">// 1</span></span><br><span class="line"> <span class="title class_">Promise</span>.<span class="title function_">race</span>([<span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">1</span>), <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>)])</span><br><span class="line">   .<span class="title function_">then</span>(<span class="literal">null</span>, <span class="function"><span class="params">reason</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>Promise.allSettled() 返回所有的结果</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([<span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">1</span>), <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>), <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>)]).<span class="title function_">then</span>(<span class="function"><span class="params">values</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(values)) <span class="comment">// [&#123;status: &#x27;rejected&#x27;, values: 1&#125;, &#123;status: &#x27;fulfilled&#x27;, values: 2&#125;, &#123;status: &#x27;fulfilled&#x27;, values: 3&#125;]</span></span><br></pre></td></tr></table></figure><p>用 Promise.all()  模拟 allSettled</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">allSettled</span> = promise =&gt; promise.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">fulfilled</span> =&gt;</span> (&#123;<span class="attr">status</span>: <span class="string">&#x27;fulfilled&#x27;</span>, <span class="attr">value</span>: fulfilled&#125;),</span><br><span class="line">  <span class="function"><span class="params">rejected</span> =&gt;</span> (&#123;<span class="attr">status</span>: <span class="string">&#x27;rejected&#x27;</span>, <span class="attr">value</span>: rejected&#125;)</span><br><span class="line">)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">  <span class="title function_">allSettled</span>(<span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">1</span>)), <span class="title function_">allSettled</span>(<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>)), <span class="title function_">allSettled</span>(<span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">3</span>))</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function"><span class="params">values</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(values))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">allSettled</span> = promiseList =&gt; <span class="title class_">Promise</span>.<span class="title function_">all</span>(promiseList.<span class="title function_">map</span>(</span><br><span class="line">  <span class="function"><span class="params">promise</span> =&gt;</span> promise.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">fulfilled</span> =&gt;</span> (&#123;<span class="attr">status</span>: <span class="string">&#x27;fulfilled&#x27;</span>, <span class="attr">value</span>: fulfilled&#125;),</span><br><span class="line">    <span class="function"><span class="params">rejected</span> =&gt;</span> (&#123;<span class="attr">status</span>: <span class="string">&#x27;rejected&#x27;</span>, <span class="attr">value</span>: rejected&#125;)</span><br><span class="line">  )</span><br><span class="line">))</span><br><span class="line"><span class="title function_">allSettled</span>([<span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">1</span>), <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>), <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">3</span>)])</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">values</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(values))</span><br></pre></td></tr></table></figure><p>链式调用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">`<span class="subst">$&#123;res&#125;</span>, world`</span>)).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br></pre></td></tr></table></figure><p>错误处理</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;hello&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`success:<span class="subst">$&#123;res&#125;</span>`</span>)).<span class="title function_">catch</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`error:<span class="subst">$&#123;res&#125;</span>`</span>)) <span class="comment">//error:hello</span></span><br><span class="line"><span class="comment">// catch 等同于 .then 的第二个参数</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;hello&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`success:<span class="subst">$&#123;res&#125;</span>`</span>)).<span class="title function_">then</span>(<span class="literal">null</span>, <span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`error:<span class="subst">$&#123;res&#125;</span>`</span>))</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;hello&#x27;</span>).<span class="title function_">then</span>(<span class="literal">null</span>, <span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`error:<span class="subst">$&#123;res&#125;</span>`</span>))</span><br></pre></td></tr></table></figure><h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><p>await 只能在 async 函数里使用，async 函数会返回一个 Promise</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn2</span> () &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">fn</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)<span class="comment">// hi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>try catch 捕获异常</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">ajax</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`error:<span class="subst">$&#123;error&#125;</span>`</span>)<span class="comment">// error:出错了</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p>使用 catch 捕获异常</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">ajax</span>().<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`error:<span class="subst">$&#123;error&#125;</span>`</span>))<span class="comment">// error:出错了</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p>await 会使等号左边的代码变成异步</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span> () &#123; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn2:同步1&#x27;</span>)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Promise&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn2:同步2&#x27;</span>)</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;同步&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">fn2</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异步&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="comment">// &#x27;同步&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;fn2:同步1&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;fn2:同步2&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;Promise&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;异步&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="简单实现-Promise"><a href="#简单实现-Promise" class="headerlink" title="简单实现 Promise"></a>简单实现 Promise</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Promise</span> &#123;</span><br><span class="line">  success = []</span><br><span class="line">  error = []</span><br><span class="line">  resolve = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">success</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">success</span>[i](data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  reject = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">error</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">error</span>[i](data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>, <span class="variable language_">this</span>.<span class="property">reject</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">success, error</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">success</span>.<span class="title function_">push</span>(success)</span><br><span class="line">    error &amp;&amp; <span class="variable language_">this</span>.<span class="property">error</span>.<span class="title function_">push</span>(error)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise2</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2021/07/07/Webpack5/"/>
      <url>/2021/07/07/Webpack5/</url>
      
        <content type="html"><![CDATA[<h2 id="webpack5"><a href="#webpack5" class="headerlink" title="webpack5"></a>webpack5</h2><p>初始化项目</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn init -y</span><br></pre></td></tr></table></figure><p>安装 <code>webpack</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add webpack webpack-cli --dev</span><br></pre></td></tr></table></figure><p>根目录创建 <code>webpack.config.js</code> 并添加以下内容</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 添加</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h3 id="支持部分-IE-浏览器"><a href="#支持部分-IE-浏览器" class="headerlink" title="支持部分 IE 浏览器"></a>支持部分 IE 浏览器</h3><p>根目录创建 <code>.browserslistrc</code> 并添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[production]# production 环境</span><br><span class="line">&gt; 1%# 支持大于 1% 的浏览器</span><br><span class="line">ie 9# 支持 IE9</span><br><span class="line"></span><br><span class="line">[modern]</span><br><span class="line">last 1 chrome version# chrome 最新的一个个版本</span><br><span class="line">last 1 firefox version# firefox 最新的一个个版本</span><br><span class="line"></span><br><span class="line">[ssr]</span><br><span class="line">node 12</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="用-babel-打包-js"><a href="#用-babel-打包-js" class="headerlink" title="用 babel 打包 js"></a>用 <code>babel</code> 打包 <code>js</code></h3><p>安装  <code>babel</code> 相关依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add babel-loader @babel/core @babel/preset-env --dev</span><br></pre></td></tr></table></figure><ol><li><p>新建 <code>babel.config.js</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>webpack.config.js</code> 里添加</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.jsx?$/</span>,<span class="comment">// 匹配以 .js、.jsx 结尾的文件</span></span><br><span class="line">          <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,<span class="comment">// 排除文件夹 node_modules</span></span><br><span class="line">          <span class="attr">use</span>: [<span class="string">&#x27;babel-loader&#x27;</span>]<span class="comment">// 使用的 babel-loader</span></span><br><span class="line">      &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="支持-React"><a href="#支持-React" class="headerlink" title="支持 React"></a>支持 <code>React</code></h3><p>安装  <code>@babel/preset-react</code> </p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add react react-dom</span><br></pre></td></tr></table></figure><p>安装  <code>@babel/preset-react</code> </p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add @babel/preset-react --dev</span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.js</code> 文件中 <code>babel-loder</code> 的 <code>options</code> 里修改为</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">use</span>: &#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">presets</span>: [</span><br><span class="line">            [<span class="string">&#x27;@babel/preset-env&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;@babel/preset-react&#x27;</span>]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加-eslint"><a href="#添加-eslint" class="headerlink" title="添加 eslint"></a>添加 <code>eslint</code></h3><p>安装 <code>eslint</code> 依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add eslint eslint-webpack-plugin eslint-plugin-import eslint-plugin-flowtype babel-eslint  --dev</span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.js</code> 中添加 <code>eslint-webpack-plugin</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;eslint-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">ESLintPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line">  &#125;)],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加-dev-server"><a href="#添加-dev-server" class="headerlink" title="添加 dev server"></a>添加 <code>dev server</code></h3><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add --dev webpack-dev-server</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 中添加</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack serve&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.js</code> 中添加</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3000</span>,<span class="comment">// 端口号</span></span><br><span class="line">  <span class="attr">hot</span>: <span class="literal">true</span>,<span class="comment">// 开启热更新</span></span><br><span class="line">  <span class="attr">hotOnly</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">compress</span>: <span class="literal">true</span>, <span class="comment">// gzip 压缩</span></span><br><span class="line">  <span class="attr">historyApiFallback</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加-VUE"><a href="#添加-VUE" class="headerlink" title="添加 VUE"></a>添加 <code>VUE</code></h3><p>安装 <code>vue</code> 依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add --dev vue-loader@next @vue/compiler-sfc</span><br><span class="line">yarn add vue@next</span><br></pre></td></tr></table></figure><p>在 src 目录下添加 App.vue</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;test&quot;&gt;hi&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .test &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>修改 index.ts 为 main.ts 并添加内容</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在 webpack.config.js 添加</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader/dist/index&#x27;</span>)</span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="attr">use</span>: [<span class="string">&#x27;vue-loader&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>()</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="添加-react规则"><a href="#添加-react规则" class="headerlink" title="添加 react规则"></a>添加 <code>react</code>规则</h3><p>安装 <code>react</code> 依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add eslint-config-react-app eslint-plugin-jsx-a11y eslint-plugin-react eslint-plugin-react-hooks --dev</span><br></pre></td></tr></table></figure><p>根目录创建 <code>.eslintrc.js</code> 并添加以下内容</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;react-app&#x27;</span>],<span class="comment">// react 规则</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;<span class="comment">// 自定义规则</span></span><br><span class="line">    <span class="string">&#x27;react/jsx-uses-react&#x27;</span>: [<span class="number">2</span>],<span class="comment">// 0：不开启、1：警告、2：报错</span></span><br><span class="line">    <span class="string">&#x27;react/react-in-jsx-scope&#x27;</span>: [<span class="number">2</span>],<span class="comment">// 提示要在 JSX 文件里手动引入 React</span></span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: [<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.js</code> 的 <code>eslint-webpack-plugin</code> 添加 <code>.jsx</code> 检查 <code>jsx</code> 文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;eslint-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">ESLintPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>]</span><br><span class="line">  &#125;)],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">presets</span>: [</span><br><span class="line">              [<span class="string">&#x27;@babel/preset-env&#x27;</span>],</span><br><span class="line">              [<span class="string">&#x27;@babel/preset-react&#x27;</span>, &#123; <span class="attr">runtime</span>: <span class="string">&#x27;classic&#x27;</span> &#125;]</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包-TypeScript"><a href="#打包-TypeScript" class="headerlink" title="打包 TypeScript"></a>打包 <code>TypeScript</code></h3><p>安装 <code>typescript</code> 依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add typescript @babel/preset-typescript --dev</span><br></pre></td></tr></table></figure><p>添加 <code>tsconfig.json</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx tsc --init</span><br></pre></td></tr></table></figure><p>修改 <code>src/index.js</code> 为 <code>src/index.ts</code></p><p>修改 <code>package.json</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc --noEmit &amp;&amp; webpack&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>修改 <code>babel.config.js</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">presets</span>: [</span><br><span class="line">        [<span class="string">&#x27;@babel/preset-env&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;@babel/preset-typescript&#x27;</span>]</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 <code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.ts&#x27;</span>,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.[jt]sx?$/</span>,<span class="comment">// 匹配 ts 文件</span></span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;babel-loader&#x27;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为 <code>ts</code> 添加 <code>eslint</code></p><p>安装 <code>airbnb</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add eslint-config-airbnb-typescript @typescript-eslint/eslint-plugin --dev</span><br></pre></td></tr></table></figure><p>在 <code>.eslintrc</code> 添加一下代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">overrides</span>: [&#123;</span><br><span class="line">    <span class="attr">files</span>: [<span class="string">&#x27;*.ts&#x27;</span>, <span class="string">&#x27;*.tsx&#x27;</span>],</span><br><span class="line">    <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">      <span class="attr">project</span>: <span class="string">&#x27;./tsconfig.json&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">extends</span>: [<span class="string">&#x27;airbnb-typescript&#x27;</span>],使用 airbnb 代码检查</span><br><span class="line">    <span class="attr">rules</span>: &#123;<span class="comment">// 配置规则</span></span><br><span class="line">      <span class="string">&#x27;@typescript-eslint/object-curly-spacing&#x27;</span>: [<span class="number">0</span>],</span><br><span class="line">      <span class="string">&#x27;import/prefer-default-export&#x27;</span>: [<span class="number">0</span>],</span><br><span class="line">      <span class="string">&#x27;no-console&#x27;</span>: [<span class="number">0</span>],<span class="comment">// console</span></span><br><span class="line">      <span class="string">&#x27;import/extensions&#x27;</span>: [<span class="number">0</span>]<span class="comment">// 引入拓展名</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.js</code> 的 <code>ESLintPlugin</code> 添加 <code>.ts</code> 和 <code>.tsx</code> </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">ESLintPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>]</span><br><span class="line">  &#125;)],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支持-tsx"><a href="#支持-tsx" class="headerlink" title="支持 tsx"></a>支持 <code>tsx</code></h3><p>安装 <code>react</code> 声明文件</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add @types/react @types/react-dom --dev</span><br></pre></td></tr></table></figure><p>修改 <code>tsconfig.json</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span>   </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="支持"><a href="#支持" class="headerlink" title="支持 @"></a>支持 <code>@</code></h3><p>修改 <code>tsconfig.json</code></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span>     </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.js</code> 中添加</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.json&quot;</span>, <span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.js&quot;</span>, <span class="string">&quot;...&quot;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支持-CSS-和-SCSS"><a href="#支持-CSS-和-SCSS" class="headerlink" title="支持 CSS  和 SCSS"></a>支持 <code>CSS </code> 和 <code>SCSS</code></h3><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add sass style-loader css-loader sass-loader --dev</span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.js</code> 中添加</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动引入全局 <code>SCSS</code> 文件</p><p>在 <code>webpack.config.js</code> 中修改 <code>sass-loader</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;sass-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">additionalData</span>: <span class="string">`@import &#x27;~[文件路径]&#x27;;`</span>,<span class="comment">// 在每一个文件前附加数据</span></span><br><span class="line">              <span class="attr">sassOptions</span>: &#123;</span><br><span class="line">                <span class="attr">includePaths</span>: [__dirname]<span class="comment">// 基于当前目录</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JS</code> 读取<code>SCSS</code> 变量</p><p>在 <code>webpack.config.js</code> 中修改 <code>css-loader</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">modules</span>: &#123;</span><br><span class="line">                <span class="attr">compileType</span>: <span class="string">&#x27;icss&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;sass-loader&#x27;</span>,</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支持-LESS"><a href="#支持-LESS" class="headerlink" title="支持 LESS"></a>支持 <code>LESS</code></h3><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add less less-loader --dev</span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.js</code> 中添加</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">modules</span>: &#123;</span><br><span class="line">                <span class="attr">compileType</span>: <span class="string">&#x27;icss&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">&#x27;less-loader&#x27;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动引入全局 <code>LESS</code> 文件</p><p>在 <code>webpack.config.js</code> 中修改 <code>less-loader</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// ...</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">additionalData</span>: <span class="string">`@import &#x27;~[文件路径]&#x27;;`</span><span class="comment">// 在每一个文件前附加数据</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支持-stylus"><a href="#支持-stylus" class="headerlink" title="支持 stylus"></a>支持 <code>stylus</code></h3><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add stylus stylus-loader --dev</span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.js</code> 中添加</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.styl(us)?$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">modules</span>: &#123;</span><br><span class="line">                <span class="attr">compileType</span>: <span class="string">&#x27;icss&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;stylus-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">stylusOptions</span>: &#123;</span><br><span class="line">                <span class="attr">import</span>: [path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;[文件路径]&#x27;</span>)]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="把-CSS打包为单独文件"><a href="#把-CSS打包为单独文件" class="headerlink" title="把 CSS打包为单独文件"></a>把 <code>CSS</code>打包为单独文件</h3><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add mini-css-extract-plugin --dev</span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.js</code> 中添加</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mode = <span class="string">&#x27;production&#x27;</span>;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  mode,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintPlugin</span>(&#123; <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>] &#125;),</span><br><span class="line">    mode === <span class="string">&#x27;production&#x27;</span> &amp;&amp; <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>()<span class="comment">// 添加 MiniCssExtractPlugin 插件</span></span><br><span class="line">  ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>),</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          mode === <span class="string">&#x27;production&#x27;</span> ? <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span> : <span class="string">&#x27;style-loader&#x27;</span>, <span class="comment">// 只在生产环境单独打包</span></span><br><span class="line">          <span class="comment">// ...</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.styl(us)?$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          mode === <span class="string">&#x27;production&#x27;</span> ? <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span> : <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="comment">// ...</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          mode === <span class="string">&#x27;production&#x27;</span> ? <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span> : <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="comment">// ...</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为 <code>CSS、JS</code>文件名添加 <code>hash</code></p><p>在 <code>webpack.config.js</code> 中添加</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  mode,</span><br><span class="line">  <span class="attr">output</span>: &#123; <span class="attr">filename</span>: <span class="string">&#x27;[name].[contenthash].css&#x27;</span> &#125;,<span class="comment">// 为 JS 添加 hash</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintPlugin</span>(&#123; <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>] &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123; <span class="attr">filename</span>: <span class="string">&#x27;[name].[contenthash].css&#x27;</span> &#125;)<span class="comment">// 为 CSS 添加 hash</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自动生成-index-html"><a href="#自动生成-index-html" class="headerlink" title="自动生成 index.html"></a>自动生成 index.html</h3><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add html-webpack-plugin --dev</span><br></pre></td></tr></table></figure><p>新建 <code>public/index.html</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>app<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.js</code> 中添加</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  mode,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>),</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="把-CSS打包为单独文件-1"><a href="#把-CSS打包为单独文件-1" class="headerlink" title="把 CSS打包为单独文件"></a>把 <code>CSS</code>打包为单独文件</h3><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add mini-css-extract-plugin --dev</span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.js</code> 中添加</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span>  = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  mode,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123; <span class="attr">filename</span>: <span class="string">&#x27;[name].[contenthash].css&#x27;</span> &#125;),</span><br><span class="line">  ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>),</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自动清理-dist"><a href="#自动清理-dist" class="headerlink" title="自动清理 dist"></a>自动清理 <code>dist</code></h3><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add clean-webpack-plugin --dev</span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.js</code> 中添加</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  mode,</span><br><span class="line">  <span class="attr">output</span>: &#123; </span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>) </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>()</span><br><span class="line">  ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>),</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h4 id="runtime-打包优化"><a href="#runtime-打包优化" class="headerlink" title="runtime 打包优化"></a><code>runtime</code> 打包优化</h4><p>在 <code>webpack.config.js</code> 中添加</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">runtimeChunk</span>: <span class="string">&#x27;single&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="node-依赖单独打包"><a href="#node-依赖单独打包" class="headerlink" title="node 依赖单独打包"></a>node 依赖单独打包</h4><p>在 <code>webpack.config.js</code> 中添加</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="attr">vendor</span>: &#123;</span><br><span class="line">          <span class="attr">minSize</span>: <span class="number">0</span>,<span class="comment">// 如果不写 0，由于 React 文件尺寸太小，会直接跳过</span></span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>, <span class="comment">// 为了匹配 /node_modules/ 或 \node_modules\</span></span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;vendors&#x27;</span>, <span class="comment">// 文件名</span></span><br><span class="line">          <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,  <span class="comment">// all 表示同步加载和异步加载，async 表示异步加载，initial 表示同步加载</span></span><br><span class="line">          <span class="comment">// 这三行的整体意思就是把两种加载方式的来自 node_modules 目录的文件打包为 vendors.xxx.js</span></span><br><span class="line">          <span class="comment">// 其中 vendors 是第三方的意思</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="固定-moduleIds"><a href="#固定-moduleIds" class="headerlink" title="固定 moduleIds"></a>固定 <code>moduleIds</code></h4><p>在 <code>webpack.config.js</code> 中添加</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">moduleIds</span>: <span class="string">&#x27;deterministic&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解决-TS-默认不加文件后缀报错（TS-2691）"><a href="#解决-TS-默认不加文件后缀报错（TS-2691）" class="headerlink" title="解决 TS 默认不加文件后缀报错（TS 2691）"></a>解决 <code>TS</code> 默认不加文件后缀报错（TS 2691）</h3><p>在 <code>TS</code> 中引入 <code>.ts</code> 文件不加后缀， <code>webpack</code> 会把没有后缀的文件默认解析为 <code>.js</code> ，导致打包找不到对应文件。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;c&#125; <span class="keyword">from</span> <span class="string">&#x27;./fileName&#x27;</span>;<span class="comment">// Module not found: Error: Can&#x27;t resolve &#x27;./fileName&#x27;</span></span><br></pre></td></tr></table></figure><p>加了后缀， <code>TS</code>会报错</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;c&#125; <span class="keyword">from</span> <span class="string">&#x27;./fileName.ts&#x27;</span>;<span class="comment">// 导入路径不能以“.ts”扩展名结束。考虑改为导入“./fileName”。ts(2691)</span></span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.js</code> 中添加 <code>resolve.extensions</code> 可 <code>webpack</code> 优先解析</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.json&quot;</span>, <span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.js&quot;</span>, <span class="string">&quot;...&quot;</span>],  <span class="comment">// 按顺序解析后缀名。如果有多个文件有相同的名字，但后缀名不同，webpack 会解析列在数组首位的后缀的文件 并跳过其余的后缀。 &quot;...&quot; 为默认拓展名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH 登录</title>
      <link href="/2021/05/11/ssh/"/>
      <url>/2021/05/11/ssh/</url>
      
        <content type="html"><![CDATA[<h1 id="SSH-登录"><a href="#SSH-登录" class="headerlink" title="SSH 登录"></a>SSH 登录</h1><h2 id="远程执行"><a href="#远程执行" class="headerlink" title="远程执行"></a>远程执行</h2><p>执行远程脚本</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh user@ip <span class="string">&#x27;sh test.sh&#x27;</span></span><br></pre></td></tr></table></figure><p>本地脚本远程执行</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh user@ip <span class="string">&#x27;bash -s&#x27;</span> &lt; test.sh</span><br></pre></td></tr></table></figure><h2 id="ssh-登录"><a href="#ssh-登录" class="headerlink" title="ssh 登录"></a>ssh 登录</h2><p><code>ls -al ~/.ssh</code> 以查看是否存在现有 SSH 密钥</p><p><code>ssh-keygen</code>  生成密钥</p><p><code>-b</code>参数指定密钥的二进制位数。这个参数值越大，密钥就越不容易破解，但是加密解密的计算开销也会加大。</p><p>一般来说，<code>-b</code>至少应该是<code>1024</code>，更安全一些可以设为<code>2048</code>或者更高。</p><p><code>-C</code>参数可以为密钥文件指定新的注释，格式为<code>username@host</code></p><p>-t 指定密钥的加密算法，如 dsa rsa ed25519</p><p><code>-f</code>参数指定生成的私钥文件</p><p><code>-F</code>参数检查某个主机名是否在<code>known_hosts</code>文件里面</p><p><code>-N</code>参数用于指定私钥的密码（passphrase）</p><p><code>-p</code>参数用于重新指定私钥的密码（passphrase）。它与<code>-N</code>的不同之处在于，新密码不在命令中指定，而是执行后再输入。ssh 先要求输入旧密码，然后要求输入两遍新密码</p><p><code>-R</code>参数将指定的主机公钥指纹移出<code>known_hosts</code>文件</p><p>复制 SSH 公钥</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_ed25519.pub</span><br></pre></td></tr></table></figure><p>或者找到 <code>.ssh</code> 文件夹里的 <code>.pub</code> 文件 </p><h3 id="使用命令行登录服务器"><a href="#使用命令行登录服务器" class="headerlink" title="使用命令行登录服务器"></a>使用命令行登录服务器</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -i ~/.ssh/id_ed25519.pub &lt;用户名&gt;@&lt;服务器 ip&gt; -p 23</span><br></pre></td></tr></table></figure><ul><li><code>-i</code> 指定私钥</li><li><code>-p</code> 指定端口</li></ul><p>配置 <code>config</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 服务器名</span><br><span class="line">Host &lt;服务器名&gt;</span><br><span class="line">    HostName &lt;服务器 IP&gt;</span><br><span class="line">    User &lt;用户名&gt;</span><br><span class="line">    IdentityFile &lt;密钥位置&gt;</span><br></pre></td></tr></table></figure><p>配置后可使用 <code>ssh &lt;服务器名&gt;</code> 登录</p>]]></content>
      
      
      <categories>
          
          <category> SSH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2019/07/26/TypeScript/"/>
      <url>/2019/07/26/TypeScript/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><p>TypeScript 是 JavaScript 的超集</p><h2 id="TypeScript-支持的类型"><a href="#TypeScript-支持的类型" class="headerlink" title="TypeScript 支持的类型"></a>TypeScript 支持的类型</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">undefine</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">bool</span>: <span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">number</span>: <span class="built_in">number</span> = <span class="number">123</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">string</span>: <span class="built_in">string</span> = <span class="string">&#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">big</span>: <span class="built_in">bigint</span> = <span class="number">123n</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">symbol</span>: <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: <span class="built_in">object</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 可以当作类型使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: T = <span class="keyword">new</span> <span class="title function_">T</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr2</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span> | <span class="built_in">string</span>&gt; = [<span class="number">1</span>, <span class="string">&#x27;&#x27;</span>]<span class="comment">// 泛型</span></span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 枚举成员的初始值会从 0 开始自增</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Position</span> &#123;</span><br><span class="line">  <span class="variable constant_">UP</span>,</span><br><span class="line">  <span class="variable constant_">DOWN</span>,</span><br><span class="line">  <span class="variable constant_">LEFT</span>,</span><br><span class="line">  <span class="variable constant_">RIGHT</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>.<span class="property">UP</span>)<span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>.<span class="property">DOWN</span>)<span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>.<span class="property">LEFT</span>)<span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>.<span class="property">RIGHT</span>)<span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>[<span class="number">0</span>])<span class="comment">// &#x27;UP&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>[<span class="number">1</span>])<span class="comment">// &#x27;DOWN&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>[<span class="number">2</span>])<span class="comment">// &#x27;LEFT&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>[<span class="number">3</span>])<span class="comment">// &#x27;RIGHT&#x27;</span></span><br></pre></td></tr></table></figure><p>也可以为枚举赋值</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Position</span> &#123;</span><br><span class="line">  <span class="variable constant_">UP</span> = <span class="string">&#x27;up&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">DOWN</span> = <span class="string">&#x27;down&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">LEFT</span> = <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">RIGHT</span> = <span class="string">&#x27;right&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>.<span class="property">UP</span>)<span class="comment">// &#x27;up&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>.<span class="property">DOWN</span>)<span class="comment">// &#x27;down&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>.<span class="property">LEFT</span>)<span class="comment">// &#x27;left&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>.<span class="property">RIGHT</span>)<span class="comment">// &#x27;right&#x27;</span></span><br><span class="line"><span class="comment">// 数字枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Num</span> &#123;</span><br><span class="line">  <span class="variable constant_">ZERO</span> = <span class="number">0</span>,</span><br><span class="line">  <span class="variable constant_">ONE</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="variable constant_">TWO</span> = <span class="number">2</span>,</span><br><span class="line">  <span class="variable constant_">THREE</span> = <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Num</span>.<span class="property">ZERO</span>)<span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Num</span>.<span class="property">ONE</span>)<span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Num</span>.<span class="property">TWO</span>)<span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Num</span>.<span class="property">THREE</span>)<span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>如果从中间开始赋值为字符串需要重新为之后的成员赋初始值</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Position</span> &#123;</span><br><span class="line">  <span class="variable constant_">UP</span>,</span><br><span class="line">  <span class="variable constant_">DOWN</span> = <span class="string">&#x27;down&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">LEFT</span> = <span class="number">6</span>,<span class="comment">// 必须指定初始值</span></span><br><span class="line">  <span class="variable constant_">RIGHT</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>.<span class="property">UP</span>)<span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>.<span class="property">DOWN</span>)<span class="comment">// &#x27;down&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>.<span class="property">LEFT</span>)<span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>.<span class="property">RIGHT</span>)<span class="comment">// 7</span></span><br></pre></td></tr></table></figure><p>计算成员</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Position</span> &#123;</span><br><span class="line">  <span class="variable constant_">UP</span>,</span><br><span class="line">  <span class="variable constant_">DOWN</span> = <span class="string">&#x27;down&#x27;</span>.<span class="property">length</span>,<span class="comment">// 计算成员</span></span><br><span class="line">  <span class="variable constant_">LEFT</span> = <span class="number">6</span>,</span><br><span class="line">  <span class="variable constant_">RIGHT</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>.<span class="property">UP</span>)<span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>.<span class="property">DOWN</span>)<span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>.<span class="property">LEFT</span>)<span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Position</span>.<span class="property">RIGHT</span>)<span class="comment">// 7</span></span><br></pre></td></tr></table></figure><p>常量枚举</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Position</span> &#123;</span><br><span class="line">  <span class="variable constant_">UP</span>,</span><br><span class="line">  <span class="variable constant_">DOWN</span>,</span><br><span class="line">  <span class="variable constant_">LEFT</span>,</span><br><span class="line">  <span class="variable constant_">RIGHT</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 常量枚举不能有计算成员</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">  <span class="variable constant_">UP</span>,</span><br><span class="line">  <span class="variable constant_">DOWN</span> = <span class="string">&#x27;down&#x27;</span>.<span class="property">length</span>,<span class="comment">// error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">fn</span>: <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn2</span> = (<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt; a + b</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Fn</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">fn3</span>:<span class="title class_">Fn</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fn2</span> &#123;</span><br><span class="line">  (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">attr</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn4</span> =  (<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt; <span class="built_in">number</span></span><br><span class="line">fn4.<span class="property">attr</span> = <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b:<span class="built_in">number</span></span>): <span class="built_in">number</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">string</span>, b:<span class="built_in">string</span></span>): <span class="built_in">string</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span> | <span class="built_in">string</span>, b: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="built_in">number</span> | <span class="built_in">string</span> &#123;&#125;<span class="comment">// 这里的类型需包含之前定义的类型，也可以是顶级类型 any unknown</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="title function_">add</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"><span class="title function_">add</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="number">1</span>)<span class="comment">// error</span></span><br></pre></td></tr></table></figure><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><p><code>any</code> 为顶级类型（top type），可以是任何值</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">any</span> = <span class="literal">undefined</span></span><br><span class="line">value = <span class="literal">null</span></span><br><span class="line">value = <span class="string">&#x27;&#x27;</span></span><br><span class="line">value = []</span><br></pre></td></tr></table></figure><h3 id="Unknown"><a href="#Unknown" class="headerlink" title="Unknown"></a>Unknown</h3><p>和 <code>any</code> 一样是顶级类型，所有的值都可以赋给 <code>unknown</code>。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: unknow = <span class="literal">undefined</span></span><br><span class="line">value = <span class="literal">null</span></span><br><span class="line">value = <span class="string">&#x27;&#x27;</span></span><br><span class="line">value = []</span><br></pre></td></tr></table></figure><p>但 <code>unknown</code> 只能被赋值为 <code>unknow</code> 和 <code>any</code></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: unknow</span><br><span class="line"><span class="keyword">let</span> <span class="attr">value2</span>: unknow = value</span><br><span class="line"><span class="keyword">let</span> <span class="attr">value3</span>: <span class="built_in">any</span> = vlaue</span><br><span class="line"><span class="keyword">let</span> <span class="attr">value4</span>: <span class="built_in">boolean</span> = value <span class="comment">// error</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value5</span>: <span class="built_in">object</span> = value <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p><code>unknown</code> 不可以直接被操作</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">unknown</span> </span><br><span class="line"><span class="keyword">type</span> T = &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;</span><br><span class="line">a.<span class="property">name</span><span class="comment">// 类型“unknown”上不存在属性“name”。ts(2339)</span></span><br><span class="line"><span class="comment">// 可以使用断言或类型收窄</span></span><br><span class="line">(a <span class="keyword">as</span> T).<span class="property">name</span></span><br></pre></td></tr></table></figure><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p>never 和 any unknown 相反为底部类型（bottom type），不存在的值</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// never, 不能将任何值赋给 never</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">never</span> = <span class="number">1</span><span class="comment">// error</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">never</span> = <span class="string">&#x27;&#x27;</span><span class="comment">// error</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">never</span> = []<span class="comment">// error</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">never</span> = &#123;&#125;<span class="comment">// error</span></span><br><span class="line"><span class="keyword">type</span> T = <span class="built_in">number</span> &amp; <span class="built_in">string</span><span class="comment">// 没有任何值属于 number 和 string 类型，所以 type T = never</span></span><br></pre></td></tr></table></figure><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><p>没有类型</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个函数没有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> (): <span class="built_in">void</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>固定长度数组</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: [<span class="built_in">number</span>, <span class="built_in">string</span>, <span class="built_in">boolean</span>] = [<span class="number">1</span>, <span class="string">&#x27;&#x27;</span>, <span class="literal">true</span>]</span><br></pre></td></tr></table></figure><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>断言值为某种类型</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">(&lt;<span class="built_in">string</span>&gt;someValue).<span class="property">length</span>;</span><br><span class="line">(someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br><span class="line"><span class="comment">// 当你在TypeScript里使用JSX时，只有 as语法断言是被允许的</span></span><br></pre></td></tr></table></figure><h3 id="非空断言"><a href="#非空断言" class="headerlink" title="非空断言"></a>非空断言</h3><p><code>value!</code> 断言当前值不为 <code>null</code> 和 <code>undefined</code></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">number</span> | <span class="literal">null</span> | <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="built_in">number</span> = value<span class="comment">// error</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n2</span>: <span class="built_in">number</span> = value! <span class="comment">// value 不为 null 和 undefined 只可能为 number</span></span><br><span class="line">obj.<span class="property">fn</span>!()<span class="comment">// 断言函数不为 undefined</span></span><br><span class="line"><span class="comment">// 确定赋值断言</span></span><br><span class="line"><span class="keyword">let</span> s!: <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)<span class="comment">// error</span></span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口用来描述一个对象拥有哪些属性</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">say</span>(<span class="attr">content</span>: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以是函数</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fn</span> &#123;</span><br><span class="line">  (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fn = (a, b): <span class="function"><span class="params">Fn</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的属性也可以是函数</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fn</span> &#123;</span><br><span class="line">  (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">subtraction</span>(<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fn = (): <span class="function"><span class="params">Fn</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">n</span>: <span class="built_in">any</span> = <span class="keyword">function</span> (<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">  &#125;</span><br><span class="line">  n.<span class="property">subtraction</span> = <span class="keyword">function</span> (<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">add</span>: <span class="title class_">Fn</span> = <span class="title function_">fn</span>()</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// interface 可以是数组</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Arr</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个同名 interface 会合并为一个</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">  <span class="attr">skin</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">Human</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jay&#x27;</span>,</span><br><span class="line">  <span class="attr">skin</span>: <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Human</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Plant</span> = &#123; <span class="attr">color</span>: <span class="built_in">string</span>; &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Grass</span> <span class="keyword">extends</span> <span class="title class_">Plant</span> &#123;</span><br><span class="line">  <span class="attr">category</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环引用自身"><a href="#循环引用自身" class="headerlink" title="循环引用自身"></a>循环引用自身</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">string</span> | <span class="title class_">Example</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="implements"><a href="#implements" class="headerlink" title="implements"></a>implements</h3><p>从 class 或 interface 实现所有的属性和方法，同时可以重写属性和方法</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">  <span class="title function_">run</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Language</span> &#123;</span><br><span class="line">  <span class="title function_">say</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">  run () &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一个类可以 implements 多个 interface 或 class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span> <span class="keyword">implements</span> <span class="title class_">Action</span>, <span class="title class_">Language</span> &#123;</span><br><span class="line">  run () &#123;&#125;</span><br><span class="line">  say () &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="implements-和-extends-的区别"><a href="#implements-和-extends-的区别" class="headerlink" title="implements 和 extends 的区别"></a>implements 和 extends 的区别</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// implements 只能用于 class，不能用于 interface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">  <span class="title function_">run</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span>, <span class="title class_">Action</span> &#123;</span><br><span class="line">  run () &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// interface 不能 implements interface 或 class</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> implements <span class="title class_">Action</span> &#123;&#125;<span class="comment">// error: Interface declaration cannot have &#x27;implements&#x27; clause</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> implements <span class="title class_">Vehicle</span> &#123;&#125;<span class="comment">// error: Interface declaration cannot have &#x27;implements&#x27; clause</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// interface 可以 extends interface 或 class</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person2</span> <span class="keyword">extends</span> <span class="title class_">Action</span> &#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person2</span> <span class="keyword">extends</span> <span class="title class_">Vehicle</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 只能 extends class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person3</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Action</span> &#123;&#125;<span class="comment">// error: Cannot extend an interface &#x27;Action&#x27;. Did you mean &#x27;implements&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person3</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="传-interface-未定义的属性"><a href="#传-interface-未定义的属性" class="headerlink" title="传 interface 未定义的属性"></a>传 interface 未定义的属性</h3><ul><li><p>类型断言</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">jay</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jay&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">skin</span>: <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line">&#125; <span class="keyword">as</span> <span class="title class_">Person</span></span><br></pre></td></tr></table></figure></li><li><p>索引签名</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="interface-和-type-区别"><a href="#interface-和-type-区别" class="headerlink" title="interface 和 type 区别"></a>interface 和 type 区别</h3><ol><li>interface 使用 <strong>extends</strong> 继承，type 使用 <strong>&amp;</strong> 联合类型继承</li><li>interface 可以通过重复声明来拓展，type 同名只能声明一次</li><li>interface 会创建新的类型，type 只是类型别名</li><li>Interface 可以循环引用自身，type 不可以</li></ol><h2 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h2><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><p>多个类型合并为一个类型</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> X &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Y = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">z</span>: X &amp; Y = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;hi&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">233</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多类型同属性合并，类型为 <code>never</code></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> X &#123;</span><br><span class="line"><span class="attr">a</span>: <span class="built_in">string</span>;</span><br><span class="line"><span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Y &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">z</span>: X &amp; Y = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&#x27;string&#x27;</span>,<span class="comment">// error, b 的类型为 never</span></span><br><span class="line">  <span class="attr">c</span>: <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以是函数</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="function">(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F3</span> = <span class="function">(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">example</span>: <span class="variable constant_">F1</span> &amp; <span class="variable constant_">F2</span> &amp; <span class="variable constant_">F3</span> = <span class="function">(<span class="params">a: <span class="built_in">string</span> | <span class="built_in">number</span>, b: <span class="built_in">string</span> | <span class="built_in">number</span></span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="title function_">example</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="title function_">example</span>(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="title function_">example</span>(<span class="string">&#x27;1&#x27;</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p>值可以是定义的某一种类型</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> x &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> y &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">z1</span>: x | y = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;hi&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">666</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">z2</span>: x | y = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="number">233</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>为类型起一个新的名字</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> str = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">name</span>:str = <span class="string">&#x27;jay&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> gender = <span class="string">&#x27;male&#x27;</span> | <span class="string">&#x27;female&#x27;</span>;</span><br><span class="line"><span class="keyword">interface</span> human &#123;</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> | <span class="string">&#x27;female&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this-类型"><a href="#this-类型" class="headerlink" title="this 类型"></a>this 类型</h3><p>指定 this 的类型</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span> (<span class="attr">this</span>: number, <span class="attr">name</span>: string) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hi, <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHi</span>(<span class="string">&#x27;jay&#x27;</span>) <span class="comment">// error</span></span><br><span class="line">sayHi.<span class="title function_">call</span>(<span class="number">666</span>, <span class="string">&#x27;jay&#x27;</span>)  <span class="comment">// TS 不会检查 call 的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span> (<span class="attr">this</span>: number | <span class="keyword">void</span>, <span class="attr">name</span>: string) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hi, <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHi</span>(<span class="string">&#x27;jay&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&#123; [P <span class="keyword">in</span> K]: T &#125;<span class="comment">// in 关键字用于遍历 K 类型中的所有类型</span></span><br><span class="line">&#123; [P <span class="keyword">in</span> K]?: T &#125;<span class="comment">// ? 表示增加可选修饰符</span></span><br><span class="line">&#123; [P <span class="keyword">in</span> K]-?: T &#125;<span class="comment">// -? 表示移除可选修饰符</span></span><br><span class="line">&#123; <span class="keyword">readonly</span> [P <span class="keyword">in</span> K]: T &#125;<span class="comment">// readonly 表示增加只读修饰符</span></span><br><span class="line">&#123; -<span class="keyword">readonly</span> [P <span class="keyword">in</span> K]?: T &#125;<span class="comment">// - readonly 表示移除只读修饰符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = &#123; [P <span class="keyword">in</span> <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>]: <span class="built_in">string</span> &#125;;<span class="comment">// type T1 = &#123; a: string; b: string; &#125;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = &#123; [P <span class="keyword">in</span> <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>]: P &#125;;<span class="comment">// type T1 = &#123; a: &#x27;a&#x27;; b: &#x27;b&#x27;; &#125;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// as, 使用 as 可以对映射类型中的键进行重新映射，NewKeyType 必须是 string | number | symbol （联合类型）的子类</span></span><br><span class="line"><span class="comment">// &#123; [K in keyof T as NewKeyType]: T[K] &#125;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// type T3 = &#123; jayname: string; jayage: string; &#125;// &#123; string &amp; K &#125; 用来过滤 K 中非 string 类型的键</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = &#123; [K <span class="keyword">in</span> keyof <span class="title class_">Person</span> <span class="keyword">as</span> <span class="string">`jay<span class="subst">$&#123;<span class="built_in">string</span> &amp; K&#125;</span>`</span> ]: <span class="built_in">string</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 索引类型的 key 只能是 number string symble 和模版字面量类型</span></span><br><span class="line">&#123; [<span class="attr">key</span>: keyType]: valueType &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CreateObjectOptions</span> &#123;</span><br><span class="line">  [<span class="attr">K</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createObject</span> (<span class="attr">options</span>: <span class="title class_">CreateObjectOptions</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">createObject</span>(&#123;</span><br><span class="line">  <span class="attr">obj</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jay&#x27;</span>,</span><br><span class="line">  <span class="attr">xxx</span>: <span class="number">123</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> pluck&lt;T, K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">object</span>: T, <span class="attr">keys</span>: <span class="title class_">Array</span>&lt;K&gt;): T[k][] &#123;</span><br><span class="line">  <span class="comment">// T 等于  &#123;name: String, age: Number&#125;</span></span><br><span class="line">  <span class="comment">// keyof T 等于  &#x27;name&#x27; | &#x27;age&#x27;</span></span><br><span class="line">  <span class="comment">// K extends keyof T 等于  &#x27;name&#x27; | &#x27;age&#x27;</span></span><br><span class="line">  <span class="comment">// extends keyof 表示有其中之一的 key，in keyof 表示全部的 key 都要有</span></span><br><span class="line">  <span class="keyword">return</span> keys.<span class="title function_">map</span>(<span class="function"><span class="params">key</span> =&gt;</span> <span class="built_in">object</span>[key])</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">pluck</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;jay&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;, [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>])</span><br></pre></td></tr></table></figure><h3 id="可识别类型"><a href="#可识别类型" class="headerlink" title="可识别类型"></a>可识别类型</h3><p>1.有一个共有的字段<br>2.共有字段是可穷举的</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="literal">false</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125; | &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="literal">true</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">example</span>: <span class="title class_">Props</span> = &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jay&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">example2</span>: <span class="title class_">Props</span> = &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jay&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> (<span class="attr">params</span>: <span class="title class_">Props</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">status</span> === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params.<span class="property">name</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params.<span class="property">age</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件类型"><a href="#条件类型" class="headerlink" title="条件类型"></a>条件类型</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// T extends U ? A : B，和三元表达式类似</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IsString</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">string</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">IsString</span>&lt;<span class="built_in">number</span>&gt;<span class="comment">// type T1 = false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">IsString</span>&lt;<span class="built_in">string</span>&gt;<span class="comment">// type T1 = true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">IsString</span>&lt;<span class="string">&#x27;string&#x27;</span>&gt; <span class="comment">// type T1 = true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">IsString</span>&lt;<span class="built_in">any</span>&gt; <span class="comment">// type T1 = boolean，因同时返回 true false 结果为 boolean</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T5</span> = <span class="title class_">IsString</span>&lt;<span class="built_in">never</span>&gt; <span class="comment">// type T1 = never，never被认为是空的联合类型</span></span><br><span class="line"><span class="comment">// never是所有类型的子类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A1</span> = <span class="built_in">never</span> <span class="keyword">extends</span> <span class="string">&#x27;x&#x27;</span> ? <span class="built_in">string</span> : <span class="built_in">number</span>; <span class="comment">// string</span></span><br></pre></td></tr></table></figure><p>分布式条件类型，在使用了 extends 关键字的条件类型中如被检查的类型（T）为裸类型（没有被数组、元组、Promise 包装过的类型，如：T[] [T] 等）被称为分布式条件类型</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在泛型类型中当被检查类型为联合类型，在运算过程中会被分解为多个分支</span></span><br><span class="line"><span class="comment">// X ｜ Y extends U ? A : B</span></span><br><span class="line"><span class="comment">// (X extends U ? A : B) | (Y extends U ? A : B)</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Example</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">string</span> ? <span class="string">&#x27;yes&#x27;</span> : <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Example</span>&lt;<span class="built_in">number</span> | <span class="built_in">string</span>&gt;; <span class="comment">// type T1 = &#x27;yes&#x27; | &#x27;no&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 被检查的类型 T 被 [] 包装过就不属于分布式条件类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Example2</span>&lt;T&gt; = T[] <span class="keyword">extends</span> <span class="built_in">number</span>[] ? <span class="string">&#x27;yes&#x27;</span> : <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Example2</span>&lt;<span class="built_in">number</span> | <span class="built_in">string</span>&gt;;  <span class="comment">// type T2 = &#x27;no&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>把类型当作参数使用</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Add</span>&lt;T&gt; = <span class="function">(<span class="params">a: T, b: T</span>) =&gt;</span> T</span><br><span class="line"><span class="keyword">const</span> <span class="attr">add</span>: <span class="title class_">Add</span>&lt;<span class="built_in">number</span>&gt; = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b<span class="comment">// 在使用时根据传入类型来确定泛型的类型</span></span><br></pre></td></tr></table></figure><h2 id="工具类型"><a href="#工具类型" class="headerlink" title="工具类型"></a>工具类型</h2><h3 id="ReturnType"><a href="#ReturnType" class="headerlink" title="ReturnType"></a>ReturnType<T></h3><p>返回 T 的返回值类型，T 为 (…args: any) &#x3D;&gt; any</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">ReturnType</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">number</span>&gt;<span class="comment">// type Result = number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> (<span class="attr">str</span>: <span class="built_in">string</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">toString</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result2</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> fn&gt;<span class="comment">// type Result2 = string</span></span><br></pre></td></tr></table></figure><h3 id="Record-lt-K-T-gt"><a href="#Record-lt-K-T-gt" class="headerlink" title="Record&lt;K, T&gt;"></a>Record&lt;K, T&gt;</h3><p>定义对象的 key value 类型</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">example</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt; = &#123; <span class="attr">jay</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">example2</span>: <span class="title class_">Record</span>&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt; = &#123; <span class="number">0</span>: <span class="string">&#x27;&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> productType = <span class="string">&#x27;food&#x27;</span> | <span class="string">&#x27;commodity&#x27;</span> | <span class="string">&#x27;clothe&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">example3</span>: <span class="title class_">Record</span>&lt;productType, productType&gt; = &#123; </span><br><span class="line">  <span class="attr">food</span>: <span class="string">&#x27;food&#x27;</span>,</span><br><span class="line">  <span class="attr">commodity</span>: <span class="string">&#x27;commodity&#x27;</span>,</span><br><span class="line">  <span class="attr">clothe</span>: <span class="string">&#x27;clothe&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Readonly"><a href="#Readonly" class="headerlink" title="Readonly"></a>Readonly<T></h3><p>返回 T 并将所有属性的类型变为只读</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jay&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">p1.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">Person</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jay&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">p2.<span class="property">age</span> = <span class="number">22</span> <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h3 id="ReadonlyArray"><a href="#ReadonlyArray" class="headerlink" title="ReadonlyArray"></a>ReadonlyArray<T></h3><p>只读的数组</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">ReadonlyArray</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">6</span> <span class="comment">// error</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">6</span>)<span class="comment">// error</span></span><br></pre></td></tr></table></figure><h3 id="Required"><a href="#Required" class="headerlink" title="Required"></a>Required<T></h3><p>返回 T 并将类型所有变为 required</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">Required</span>&lt;<span class="title class_">Person</span>&gt;;<span class="comment">// type Result = &#123; name: string; age: number; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial<T></h3><p>返回 T 并将类型所有变为可选</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Pserson2</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Person</span>&gt;;</span><br><span class="line"><span class="comment">// Person2 为 Person3 的简写</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person3</span> &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Omit-lt-T-K-gt"><a href="#Omit-lt-T-K-gt" class="headerlink" title="Omit&lt;T, K&gt;"></a>Omit&lt;T, K&gt;</h3><p>返回 T 并去除 K 属性</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">useTools</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Cat</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;useTools&#x27;</span>&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">cat</span>: <span class="title class_">Cat</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 去除多个属性</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Dog</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;useTools&#x27;</span> | <span class="string">&#x27;name&#x27;</span>&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">dog</span>: <span class="title class_">Dog</span> = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改接口属性类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">skin</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Example</span> <span class="keyword">extends</span> <span class="title class_">Omit</span>&lt;<span class="title class_">Person</span>, &#x27;age&#x27;&gt; &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">jay</span>: <span class="title class_">Example</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;jay&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>, <span class="attr">skin</span>: <span class="string">&#x27;yellow&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="Pick-lt-T-K-gt"><a href="#Pick-lt-T-K-gt" class="headerlink" title="Pick&lt;T, K&gt;"></a>Pick&lt;T, K&gt;</h3><p>返回 T 中对应的 K 属性</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;name&#x27;</span>&gt;<span class="comment">// type Result = &#123; name: string; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Exclude-lt-T-U-gt"><a href="#Exclude-lt-T-U-gt" class="headerlink" title="Exclude&lt;T, U&gt;"></a>Exclude&lt;T, U&gt;</h3><p>返回 T 中不包含 U 的</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">Exclude</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&gt;<span class="comment">// type Result = &quot;a&quot; | &quot;b&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Extract-lt-T-U-gt"><a href="#Extract-lt-T-U-gt" class="headerlink" title="Extract&lt;T, U&gt;"></a>Extract&lt;T, U&gt;</h3><p>返回 T 和 U 的交集</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">Extract</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&gt;<span class="comment">// type Result = &quot;c&quot;</span></span><br></pre></td></tr></table></figure><h3 id="NonNullable"><a href="#NonNullable" class="headerlink" title="NonNullable"></a>NonNullable<T></h3><p>返回 T 并去除 undefined</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span> | <span class="literal">undefined</span>&gt;<span class="comment">// type Result = string | number | boolean</span></span><br></pre></td></tr></table></figure><h3 id="infer"><a href="#infer" class="headerlink" title="infer"></a>infer</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// infer 只能在条件类型(T extends X ? Y : Z)的 extends 子句中才能使用</span></span><br><span class="line"><span class="comment">// infer 声明的变量只能在条件类型的 true 分支中使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Example</span>&lt;T&gt; = T <span class="keyword">extends</span> (infer U)[] ? U : T;<span class="comment">// U 用于存放推断的类型</span></span><br><span class="line"><span class="comment">// Example 传入 string[]，T 为 string[]</span></span><br><span class="line"><span class="comment">// T extends (infer U)[] 等于string[] extends (infer U)[]，类型匹配 string 匹配 (infer U)，[] 匹配 []，因此 U 为 string。</span></span><br><span class="line"><span class="keyword">type</span> T = <span class="title class_">Example</span>&lt;<span class="built_in">string</span>[]&gt;<span class="comment">// type T = string</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="keyof"><a href="#keyof" class="headerlink" title="keyof"></a>keyof</h3><p>获取类型的所有 key</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">useTools</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Keys</span> = keyof <span class="title class_">Person</span>;<span class="comment">// type keys = &#x27;name&#x27; | &#x27;age&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Values</span> = keyof &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="title class_">Person</span> &#125;;  <span class="comment">// type Values = string | number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">k</span>: <span class="title class_">Keys</span> = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">k2</span>: <span class="title class_">Keys</span> = <span class="string">&#x27;age&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">v</span>: <span class="title class_">Values</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">v2</span>: <span class="title class_">Values</span> = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line">  <span class="title class_">Male</span>,</span><br><span class="line">  <span class="title class_">Female</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> G = keyof <span class="keyword">typeof</span> <span class="title class_">Gender</span>;<span class="comment">// type G = &quot;Male&quot; | &quot;Female&quot;</span></span><br></pre></td></tr></table></figure><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><p>泛型约束</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Gender</span> = <span class="string">&#x27;male&#x27;</span> | <span class="string">&#x27;female&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Gender</span>&gt; = T;<span class="comment">// 约束 T 的类型必须为 Gender 的子类型</span></span><br><span class="line"><span class="comment">// Person 的泛型必须为 Gender</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">example</span>: <span class="title class_">Person</span>&lt;<span class="string">&#x27;male&#x27;</span>&gt; = <span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"><span class="comment">// ExampleType 的 T 如果存在于 Gender 就返回 T，否则返回 nerver</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ExampleType</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="title class_">Gender</span> ? T : <span class="built_in">never</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ExampleType2</span> = <span class="title class_">ExampleType</span>&lt;<span class="string">&#x27;male&#x27;</span>&gt;<span class="comment">// type ExampleType2 = &quot;male&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ExampleType3</span> = <span class="title class_">ExampleType</span>&lt;<span class="literal">null</span>&gt;<span class="comment">// type ExampleType2 = nerver</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ExampleType4</span> = <span class="title class_">ExampleType</span>&lt;<span class="built_in">boolean</span>&gt;<span class="comment">// type ExampleType2 = nerver</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ExampleType5</span> = <span class="title class_">ExampleType</span>&lt;<span class="string">&#x27;female&#x27;</span> | <span class="string">&#x27;male&#x27;</span> | <span class="built_in">boolean</span> | <span class="literal">null</span>&gt;<span class="comment">// type ExampleType2 = &quot;male&quot; | &#x27;female&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">HasLength</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// arg 必须包含 length</span></span><br><span class="line"><span class="keyword">function</span> example2&lt;T <span class="keyword">extends</span> <span class="title class_">HasLength</span>&gt; (<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含关系，T 包含 U 为 true</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Example</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> A &#123; <span class="attr">a</span>: <span class="built_in">string</span>; &#125;</span><br><span class="line"><span class="keyword">interface</span> B &#123; <span class="attr">a</span>: <span class="built_in">string</span>; <span class="attr">b</span>: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Example</span>&lt;A, B&gt;;<span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Example</span>&lt;A, A&gt;;<span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">Example</span>&lt;B, A&gt;;<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 被检查的类型不为泛型，仅条件判断</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="string">&#x27;a&#x27;</span> <span class="keyword">extends</span> <span class="string">&#x27;a&#x27;</span> ? <span class="string">&#x27;yes&#x27;</span> : <span class="string">&#x27;no&#x27;</span>; <span class="comment">// &#x27;yes&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T5</span> = <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> <span class="keyword">extends</span> <span class="string">&#x27;a&#x27;</span> ? <span class="string">&#x27;yes&#x27;</span> : <span class="string">&#x27;no&#x27;</span>; <span class="comment">// &#x27;no&#x27;</span></span><br><span class="line"><span class="comment">// 被检查的类型为泛型，为分布式条件类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Example2</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="string">&#x27;a&#x27;</span> ? <span class="string">&#x27;yes&#x27;</span> : <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T6</span> = <span class="title class_">Example2</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt; <span class="comment">// type T6 = &#x27;yes&#x27; | &#x27;no&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><p>遍历类型</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = &#123; [P <span class="keyword">in</span> <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> ｜ <span class="string">&#x27;c&#x27;</span>]: <span class="built_in">string</span> &#125;<span class="comment">// type T1 = &#123; a: string; b: string; c: string; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>可以用来获取变量的类型</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;jay&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = <span class="keyword">typeof</span> person;<span class="comment">// type Person = &#123; name: string, age: number &#125;</span></span><br></pre></td></tr></table></figure><h3 id="as-const"><a href="#as-const" class="headerlink" title="as const"></a>as const</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const animal = [&#x27;dog&#x27;, &#x27;cat&#x27;, &#x27;pig&#x27;, &#x27;bird&#x27;] 是一个变量数组， const animal: string[]，此时还可以修改数组。</span></span><br><span class="line"><span class="comment">// 当加了 as const 后就变成一个只读常量数组（元组），此时 animal 不能修改</span></span><br><span class="line"><span class="keyword">const</span> animal = [<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;pig&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>] <span class="keyword">as</span> <span class="keyword">const</span>;<span class="comment">// const animal: readonly [&quot;dog&quot;, &quot;cat&quot;, &quot;pig&quot;, &quot;bird&quot;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AnimalType</span> = <span class="keyword">typeof</span> animal[<span class="built_in">number</span>];<span class="comment">// type AnimalType = &quot;dog&quot; | &quot;cat&quot; | &quot;pig&quot; | &quot;bird&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有 as const</span></span><br><span class="line"><span class="keyword">const</span> productType = [<span class="string">&#x27;food&#x27;</span>, <span class="string">&#x27;commodity&#x27;</span>, <span class="string">&#x27;clothe&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(productType.<span class="title function_">includes</span>(<span class="string">&#x27;&#x27;</span>))<span class="comment">// 此处不会有提示和报错</span></span><br><span class="line"><span class="comment">// 添加 as const</span></span><br><span class="line"><span class="keyword">const</span> productType = [<span class="string">&#x27;food&#x27;</span>, <span class="string">&#x27;commodity&#x27;</span>, <span class="string">&#x27;clothe&#x27;</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(productType.<span class="title function_">includes</span>(<span class="string">&#x27;&#x27;</span>))<span class="comment">// error: Argument of type &#x27;&quot;&quot;&#x27; is not assignable to parameter of type &#x27;&quot;food&quot; | &quot;commodity&quot; | &quot;clothe&quot;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="在-window-上添加变量声明"><a href="#在-window-上添加变量声明" class="headerlink" title="在 window 上添加变量声明"></a>在 window 上添加变量声明</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">    <span class="attr">example</span>: srting;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 声明模块</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;vue3&quot;</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Underscore</title>
      <link href="/2019/04/08/Underscore/"/>
      <url>/2019/04/08/Underscore/</url>
      
        <content type="html"><![CDATA[<h1 id="Underscore-基本用法"><a href="#Underscore-基本用法" class="headerlink" title="Underscore 基本用法"></a>Underscore 基本用法</h1><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><h3 id="map-对集合每一项进行一些操作，返回新数组"><a href="#map-对集合每一项进行一些操作，返回新数组" class="headerlink" title="map() 对集合每一项进行一些操作，返回新数组"></a>map() 对集合每一项进行一些操作，返回新数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">map</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="function"><span class="params">i</span> =&gt;</span> i+<span class="number">1</span>)    <span class="comment">//   [2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h3 id="each-遍历集合类似map"><a href="#each-遍历集合类似map" class="headerlink" title="each() 遍历集合类似map"></a>each() 遍历集合类似map</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">each</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="function"><span class="params">i</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i+<span class="number">1</span>))  <span class="comment">// 2 3 4 5 6</span></span><br></pre></td></tr></table></figure><h3 id="reduce-对集合进行操作且累计并返回结果，第三个参数为操作初始值"><a href="#reduce-对集合进行操作且累计并返回结果，第三个参数为操作初始值" class="headerlink" title="reduce() 对集合进行操作且累计并返回结果，第三个参数为操作初始值"></a>reduce() 对集合进行操作且累计并返回结果，第三个参数为操作初始值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">reduce</span>([<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>], <span class="function">(<span class="params">memo, num</span>) =&gt;</span> memo + num, <span class="number">0</span>)   <span class="comment">// 6</span></span><br><span class="line">_.<span class="title function_">reduce</span>([<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>], <span class="function">(<span class="params">memo, num</span>) =&gt;</span> memo + num, <span class="number">10</span>)   <span class="comment">// 16</span></span><br><span class="line">_.<span class="title function_">reduce</span>([<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>], <span class="function">(<span class="params">memo, num</span>) =&gt;</span> memo * num, <span class="number">1</span>)   <span class="comment">// 6</span></span><br><span class="line">_.<span class="title function_">reduce</span>([<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>], <span class="function">(<span class="params">memo, num</span>) =&gt;</span> memo * num, <span class="number">10</span>)  <span class="comment">// 60</span></span><br></pre></td></tr></table></figure><h3 id="shuffle-打乱集合顺序"><a href="#shuffle-打乱集合顺序" class="headerlink" title="shuffle() 打乱集合顺序"></a>shuffle() 打乱集合顺序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">_.<span class="title function_">shuffle</span>(arr)  <span class="comment">// [3, 4, 2, 1, 5]</span></span><br></pre></td></tr></table></figure><h3 id="sample-从集合中随机选择一个或指定数目的项"><a href="#sample-从集合中随机选择一个或指定数目的项" class="headerlink" title="sample() 从集合中随机选择一个或指定数目的项"></a>sample() 从集合中随机选择一个或指定数目的项</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">_.<span class="title function_">sample</span>(arr) <span class="comment">// 2</span></span><br><span class="line">_.<span class="title function_">sample</span>(arr, <span class="number">2</span>) <span class="comment">// [2, 5]</span></span><br></pre></td></tr></table></figure><h3 id="every-集合的每一个项都符合条件返回true，否则返回false"><a href="#every-集合的每一个项都符合条件返回true，否则返回false" class="headerlink" title="every() 集合的每一个项都符合条件返回true，否则返回false"></a>every() 集合的每一个项都符合条件返回true，否则返回false</h3><h3 id="some-集合的某一个项符合条件返回true，否则返回false"><a href="#some-集合的某一个项符合条件返回true，否则返回false" class="headerlink" title="some() 集合的某一个项符合条件返回true，否则返回false"></a>some() 集合的某一个项符合条件返回true，否则返回false</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">every</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> ,<span class="number">0</span>], <span class="function"><span class="params">item</span> =&gt;</span> item === <span class="number">0</span> )  <span class="comment">// true</span></span><br><span class="line">_.<span class="title function_">every</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> ,<span class="number">0</span>], <span class="function"><span class="params">item</span> =&gt;</span> item === <span class="number">0</span> ) <span class="comment">// false</span></span><br><span class="line">_.<span class="title function_">some</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> ,<span class="number">0</span>], <span class="function"><span class="params">item</span> =&gt;</span> item === <span class="number">0</span> )  <span class="comment">// true</span></span><br><span class="line">_.<span class="title function_">some</span>([<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span> ,<span class="number">0</span>], <span class="function"><span class="params">item</span> =&gt;</span> item === <span class="number">0</span> )  <span class="comment">// true</span></span><br><span class="line">_.<span class="title function_">some</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> ,<span class="number">1</span>], <span class="function"><span class="params">item</span> =&gt;</span> item === <span class="number">0</span> ) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="find-查找集合中符合条件的第一项"><a href="#find-查找集合中符合条件的第一项" class="headerlink" title="find() 查找集合中符合条件的第一项"></a>find() 查找集合中符合条件的第一项</h3><h3 id="filter-返回所有符合条件的元素"><a href="#filter-返回所有符合条件的元素" class="headerlink" title="filter() 返回所有符合条件的元素"></a>filter() 返回所有符合条件的元素</h3><h3 id="reject-与-filter-相反"><a href="#reject-与-filter-相反" class="headerlink" title="reject() 与 filter() 相反"></a>reject() 与 filter() 相反</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jay&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Kang&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Christine&#x27;</span>, <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line">_.<span class="title function_">find</span>(p, <span class="function"><span class="params">item</span>=&gt;</span> item.<span class="property">gender</span>===<span class="string">&#x27;male&#x27;</span> )</span><br><span class="line"><span class="comment">// &#123; name: &#x27;Jay&#x27;, age: 18, gender: &#x27;male&#x27; &#125;</span></span><br><span class="line">_.<span class="title function_">filter</span>(p, <span class="function"><span class="params">item</span>=&gt;</span> item.<span class="property">gender</span> === <span class="string">&#x27;male&#x27;</span> )</span><br><span class="line"><span class="comment">// &#123; name: &#x27;Jay&#x27;, age: 18, gender: &#x27;male&#x27;&#125;&#123;name: &#x27;Kang&#x27;, age: 14, gender: &#x27;male&#x27; &#125;</span></span><br><span class="line">_.<span class="title function_">reject</span>(p, <span class="function"><span class="params">item</span>=&gt;</span> item.<span class="property">gender</span>===<span class="string">&#x27;male&#x27;</span> )</span><br><span class="line"><span class="comment">// &#123; name: &#x27;Christine&#x27;, age: 6, gender: &#x27;female&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="where-返回包含条件的项"><a href="#where-返回包含条件的项" class="headerlink" title="where() 返回包含条件的项"></a>where() 返回包含条件的项</h3><h3 id="findWhere-同-where，只返回第一个项"><a href="#findWhere-同-where，只返回第一个项" class="headerlink" title="findWhere() 同 where，只返回第一个项"></a>findWhere() 同 where，只返回第一个项</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jay&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Kang&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Christine&#x27;</span>, <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line">_.<span class="title function_">where</span>(p, &#123;<span class="attr">name</span>:<span class="string">&#x27;Jay&#x27;</span>&#125;)</span><br><span class="line"><span class="comment">// &#123; name: &#x27;Jay&#x27;, age: 18, gender: &#x27;male&#x27; &#125;</span></span><br><span class="line">_.<span class="title function_">where</span>(p, &#123;<span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;)</span><br><span class="line"><span class="comment">// &#123; name: &#x27;Jay&#x27;, age: 18, gender: &#x27;male&#x27;&#125;&#123;name: &#x27;Kang&#x27;, age: 14, gender: &#x27;male&#x27; &#125;</span></span><br><span class="line">_.<span class="title function_">findWhere</span>(p, &#123;<span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;)</span><br><span class="line"><span class="comment">// &#123; name: &#x27;Jay&#x27;, age: 18, gender: &#x27;male&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="contains-包含指定的值，返回-true"><a href="#contains-包含指定的值，返回-true" class="headerlink" title="contains() 包含指定的值，返回 true"></a>contains() 包含指定的值，返回 true</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">_.<span class="title function_">contains</span>(arr, <span class="number">2</span>)  <span class="comment">// true</span></span><br><span class="line">_.<span class="title function_">contains</span>(arr, <span class="number">4</span>)  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="pluck-返回指定-key-的-value"><a href="#pluck-返回指定-key-的-value" class="headerlink" title="pluck() 返回指定 key 的 value"></a>pluck() 返回指定 key 的 value</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jay&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Kang&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Christine&#x27;</span>, <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line">_.<span class="title function_">pluck</span>(p, <span class="string">&#x27;name&#x27;</span> ) <span class="comment">// [ &#x27;Jay&#x27;, &#x27;Kang&#x27;, &#x27;Christine&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="max-返回最大值"><a href="#max-返回最大值" class="headerlink" title="max() 返回最大值"></a>max() 返回最大值</h3><h3 id="min-返回最小值"><a href="#min-返回最小值" class="headerlink" title="min() 返回最小值"></a>min() 返回最小值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jay&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Kang&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Christine&#x27;</span>, <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line">_.<span class="title function_">max</span>(p, <span class="function"><span class="params">item</span>=&gt;</span> item.<span class="property">age</span> )  <span class="comment">// &#123; name: &#x27;Jay&#x27;, age: 18, gender: &#x27;male&#x27; &#125;</span></span><br><span class="line">_.<span class="title function_">min</span>(p, <span class="function"><span class="params">item</span>=&gt;</span> item.<span class="property">age</span> )  <span class="comment">// &#123; name: &#x27;Christine&#x27;, age: 6, gender: &#x27;female&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="groupBy-按-key-把一个集合分成多个集合"><a href="#groupBy-按-key-把一个集合分成多个集合" class="headerlink" title="groupBy() 按 key 把一个集合分成多个集合"></a>groupBy() 按 key 把一个集合分成多个集合</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jay&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Kang&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Christine&#x27;</span>, <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line">_.<span class="title function_">groupBy</span>(p, <span class="function"><span class="params">item</span>=&gt;</span> item.<span class="property">gender</span> )   </span><br><span class="line"><span class="comment">// &#123; female: [&#123; name: &#x27;Christine&#x27;, age: 6, gender: &#x27;female&#x27; &#125;],</span></span><br><span class="line"><span class="comment">//   male: [&#123; name: &#x27;Jay&#x27;, age: 18, gender: &#x27;male&#x27; &#125;, &#123; name: &#x27;Kang&#x27;, age: 14, gender: &#x27;male&#x27;&#125;] &#125;</span></span><br></pre></td></tr></table></figure><h3 id="indexBy-返回以指定-key的-value-分类的对象"><a href="#indexBy-返回以指定-key的-value-分类的对象" class="headerlink" title="indexBy() 返回以指定 key的 value 分类的对象"></a>indexBy() 返回以指定 key的 value 分类的对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jay&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Kang&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Christine&#x27;</span>, <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line">_.<span class="title function_">groupBy</span>(p, <span class="string">&#x27;gender&#x27;</span> ) </span><br><span class="line"><span class="comment">// &#123; female: [&#123; name: &#x27;Christine&#x27;, age: 6, gender: &#x27;female&#x27; &#125;],</span></span><br><span class="line"><span class="comment">//   male: [&#123; name: &#x27;Jay&#x27;, age: 18, gender: &#x27;male&#x27; &#125;, &#123; name: &#x27;Kang&#x27;, age: 14, gender: &#x27;male&#x27;&#125;] &#125;</span></span><br></pre></td></tr></table></figure><h3 id="countBy-返回依据条件分类的每一类的数目"><a href="#countBy-返回依据条件分类的每一类的数目" class="headerlink" title="countBy() 返回依据条件分类的每一类的数目"></a>countBy() 返回依据条件分类的每一类的数目</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jay&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Kang&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Christine&#x27;</span>, <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line">_.<span class="title function_">countBy</span>(p, <span class="function"><span class="params">item</span>=&gt;</span> item.<span class="property">age</span> &gt; <span class="number">10</span> ? <span class="string">&#x27;小学僧&#x27;</span> : <span class="string">&#x27;中学僧&#x27;</span> ) <span class="comment">// &#123; &#x27;小学僧&#x27;: 2, &#x27;中学僧&#x27;: 1 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="size-返回集合长度"><a href="#size-返回集合长度" class="headerlink" title="size() 返回集合长度"></a>size() 返回集合长度</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">size</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="partition-返回数组包含两个数组，第一个符合条件，第二个不符合条件"><a href="#partition-返回数组包含两个数组，第一个符合条件，第二个不符合条件" class="headerlink" title="partition() 返回数组包含两个数组，第一个符合条件，第二个不符合条件"></a>partition() 返回数组包含两个数组，第一个符合条件，第二个不符合条件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">partition</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="function"><span class="params">i</span> =&gt;</span> i &gt; <span class="number">2</span>) <span class="comment">// [ [3, 4, 5], [1, 2] ]</span></span><br></pre></td></tr></table></figure><h2 id="数组-Arrays"><a href="#数组-Arrays" class="headerlink" title="数组(Arrays)"></a>数组(Arrays)</h2><ul><li><p>first() 返回数组的第一个元素</p></li><li><p>initial() 返回除最后一个(或多个)以外的元素</p></li><li><p>last() 返回数组的最后一个元素</p></li><li><p>rest() 返回除第一个(或多个)以外的元素</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">first</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])  <span class="comment">// 1</span></span><br><span class="line">_.<span class="title function_">first</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">2</span>)  <span class="comment">// [1, 2]</span></span><br><span class="line">_.<span class="title function_">initial</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])  <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">_.<span class="title function_">last</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])  <span class="comment">// [5]</span></span><br><span class="line">_.<span class="title function_">rest</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])  <span class="comment">// [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p>compact() 返回不包含 false 值的数组</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">compact</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="literal">false</span>, <span class="string">&#x27;&#x27;</span>, <span class="literal">null</span>, <span class="literal">undefined</span>])  <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure></li><li><p>flatten() 将多层嵌套的数组转化成减少至一层,传递第二个参数为 true 就只减少一层</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">flatten</span>([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]])  <span class="comment">// [1, 2, 3]</span></span><br><span class="line">_.<span class="title function_">flatten</span>([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]], <span class="literal">true</span>)  <span class="comment">// [1, 2, [3]]</span></span><br></pre></td></tr></table></figure></li><li><p>without() 返回一个不包含指定值的数组</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">without</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>], <span class="number">3</span>, <span class="number">4</span>)  <span class="comment">// [0, 1, 2]</span></span><br></pre></td></tr></table></figure></li><li><p>union() 返回传入数组的并集</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">union</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>])  <span class="comment">// [1, 2, 3, 4, 5, 7, 6]</span></span><br></pre></td></tr></table></figure></li><li><p>intersection() 返回传入数组的交集</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">intersection</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>])  <span class="comment">// [3, 6]</span></span><br></pre></td></tr></table></figure></li><li><p>difference() 接受两个数组，返回第一个数组中不包含第二个数组的值的数组、</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">difference</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">4</span>])  <span class="comment">// [1, 2, 6]</span></span><br></pre></td></tr></table></figure></li><li><p>uniq() 返回一个去重后的新数组</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">uniq</span>([<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>])  <span class="comment">// [6, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p>zip() 将接收数组的值按对应的下标合并</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">zip</span>([<span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>],[<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>])  <span class="comment">// [[&#x27;k&#x27;, 3], [&#x27;j&#x27;, 1], [&#x27;hi&#x27;, 2]]</span></span><br></pre></td></tr></table></figure></li><li><p>object() 合并数组为对象，如 key 重复就返回最后一个值</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">object</span>([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>],[<span class="string">&#x27;jay&#x27;</span>, <span class="number">18</span>])  <span class="comment">// &#123;name: &quot;jay&quot;, age: 18&#125;</span></span><br><span class="line">_.<span class="title function_">object</span>([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;age&#x27;</span>],[<span class="string">&#x27;jay&#x27;</span>, <span class="number">18</span>, <span class="number">14</span>])  <span class="comment">// &#123;name: &quot;jay&quot;, age: 14&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>indexOf() 返回指定值在数组中的下标</p></li><li><p>lastIndexOf() 返回指定值在数组中从后开始的下标</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">indexOf</span>([<span class="number">1</span>, <span class="string">&#x27;hi&#x27;</span>, <span class="string">&#x27;jay&#x27;</span>], jay)  <span class="comment">// 2</span></span><br><span class="line">_.<span class="title function_">indexOf</span>([<span class="number">1</span>, <span class="string">&#x27;hi&#x27;</span>, <span class="string">&#x27;jay&#x27;</span>], jay)  <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li><li><p>range() 接收一个开始数字和一个结束数字，生成一个数字数组</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.<span class="title function_">range</span>(<span class="number">5</span>)  <span class="comment">// [0, 1, 2, 3, 4]</span></span><br><span class="line">_.<span class="title function_">range</span>(<span class="number">0</span>, -<span class="number">10</span>, <span class="number">3</span>)  <span class="comment">// [0, -3, -6, -9]</span></span><br><span class="line">_.<span class="title function_">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>)  <span class="comment">// [0, 3, 6, 9]</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lodash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongoDB</title>
      <link href="/2019/04/05/MongoDB/"/>
      <url>/2019/04/05/MongoDB/</url>
      
        <content type="html"><![CDATA[<h1 id="mongoDB"><a href="#mongoDB" class="headerlink" title="mongoDB"></a>mongoDB</h1><h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><ul><li><p>创建、切换<br>  <code>use 数据库名</code><br>  切换数据库，如不存在就创建一个新的数据库。</p>  <!-- ```sh    use test    ``` --></li><li><p>删除<br>  <code>db.dropDatabase()</code><br>  删除数据库</p></li><li><p>查看<br>  <code>show dbs</code><br>  查看当前的数据库</p></li></ul><h2 id="操作集合"><a href="#操作集合" class="headerlink" title="操作集合"></a>操作集合</h2><ul><li>查看集合<br>  <code>show tables</code><br>  查看当前数据库中的集合</li><li>创建集合<br>  <code>db.集合名.insert()</code><br>  向集合里插入文档，如集合不存在创建一个集合</li><li>删除集合<br>  <code>db.集合名.drop()</code><br>  删除当前数据库中的集合</li></ul><h2 id="操作文档"><a href="#操作文档" class="headerlink" title="操作文档"></a>操作文档</h2><ul><li><p>查看集合里的文档<br>  <code>db.集合名.find()</code><br>  查看集合中的全部文档</p></li><li><p>查看第一个文档<br>  <code>db.集合名.find</code></p></li><li><p>查看某个文档<br>  <code>db.集合名.find(&#123;查询条件&#125;)</code><br>  查询符合条件的文档<br>  <code>db.集合名.find(&#123;content: /jay/&#125;)</code><br>  查询 content 包含 ‘jay’ 的文档<br>  <code>db.集合名.find(&#123;content: /^jay/&#125;)</code><br>  查询 content 以 ‘jay’ 开头的文档<br>  <code>db.集合名.find(&#123;content: /jay$/&#125;)</code><br>  查询 content 以 ‘jay’ 结尾的文档</p></li><li><p>插入文档<br>  <code>db.集合名.insert(doc)</code></p></li><li><p>更新文档(覆盖)<br>  <code>db.集合名.update(&#123;查询条件&#125;, &#123;更新内容&#125;)</code><br>  更新符合条件的文档</p></li><li><p>更新文档(添加)<br>  使用操作符 <code>$set</code><br>  <code>db.集合名.update(&#123;查询条件&#125;, &#123;操作符: &#123;key: value&#125;&#125;)</code><br>  修改某个 key 的 value，如不存在就添加<br>  <code>db.集合名.update(&#123;查询条件&#125;, &#123;$unset: &#123;key: value&#125;&#125;)</code><br>  删除某个 key 和 value</p></li></ul><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><table><thead><tr><th>条件操作符</th><th>意义</th></tr></thead><tbody><tr><td>$gt(greater than)</td><td>大于</td></tr><tr><td>$gte(gt equal)</td><td>大于等于</td></tr><tr><td>$lt(less than)</td><td>小于</td></tr><tr><td>$lte(lt equal)</td><td>小于等于</td></tr><tr><td>$eq(equal)</td><td>等于</td></tr><tr><td>$ne(not eq)</td><td>不等于</td></tr><tr><td>$in</td><td>包含</td></tr><tr><td>$nin</td><td>不包含</td></tr></tbody></table><table><thead><tr><th>逻辑操作符</th><th>意义</th></tr></thead><tbody><tr><td>$exists</td><td>存在</td></tr><tr><td>$not</td><td>不存在</td></tr><tr><td>$or</td><td>或者</td></tr><tr><td>$and</td><td>和</td></tr><tr><td>$mod</td><td>求模</td></tr><tr><td>$where</td><td>位置</td></tr></tbody></table><table><thead><tr><th>数组操作符</th><th>意义</th></tr></thead><tbody><tr><td>$size</td><td>匹配数组长度大小</td></tr><tr><td>$all</td><td>匹配数组字段中包含指定  Value 的文档</td></tr></tbody></table><h2 id="常见查询"><a href="#常见查询" class="headerlink" title="常见查询"></a>常见查询</h2><p>查询 content 包含 ‘jay’ 的文档<br><code>db.集合名.find(&#123;content: /jay/&#125;)</code><br>查询 content 以 ‘jay’ 开头的文档<br><code>db.集合名.find(&#123;content: /^jay/&#125;)</code><br>查询 content 以 ‘jay’ 结尾的文档<br><code>db.集合名.find(&#123;content: /jay$/&#125;)</code><br>查询 content 存在 info 属性的文档<br><code>db.集合名.find(&#123;&#39;content.info&#39;: &#123;exists: true&#125;&#125;)</code><br>查询 content 包含 jay 或者 kang 的文档<br><code>db.集合名.find(&#123;content: &#123;$in: [&#39;jay&#39;, &#39;kang&#39;]&#125;&#125;)</code><br>查询 content 不包含 jay 或者 kang 的文档<br><code>db.集合名.find(&#123;content: &#123;$nin: [&#39;jay&#39;, &#39;kang&#39;]&#125;&#125;)</code><br>查询符合条件文档中的 name 和 age 字段<br><code>db.集合名.find(&#123;&#125;, &#123;name: true, age: 1&#125;)</code><br>查询符合条件文档返回中不包含 name 和 age 字段<br><code>db.集合名.find(&#123;&#125;, &#123;name: false, age: 0&#125;)</code><br>查询 age 大于 18 的文档<br><code>db.集合名.find(&#123;age: &#123;$gt: 18&#125;&#125;)</code><br><code>db.集合名.find(&#123;$where:&#39;this.age &gt; 18&#39;&#125;)</code><br><code>db.集合名.find(&#123;&#39;this.age &gt; 18&#39;&#125;)</code><br>查询 age 大于等于 18 且小于等于 30 的文档<br><code>db.集合名.find(&#123;age: &#123;$gte: 18, $lte: 30&#125;&#125;)</code><br>查询 name 不为 ‘jay’ 的文档<br><code>db.集合名.find(&#123;name: &#123;$ne: &#39;jay&#39;&#125;&#125;)</code><br>查询 date 大于 2019 年 1 月 1 日，小于 2019 年 12 月 31 日的文档<br><code>db.集合名.find(&#123;date: &#123;$gt: new Date(2019,0,1), $lt: new Date(2019,11,31)&#125;&#125;)</code><br>查询文档数量<br><code>db.集合名.find().count()</code><br>查询 age 按降序排列的文档<br><code>db.集合名.find().sort(&#123;age: -1&#125;)</code><br>查询前 5 条文档<br><code>db.集合名.find().limit(5)</code><br>查询 5 条之后的文档<br><code>db.集合名.find().skip(5)</code><br>查询第 10 条到第 20 条文档<br><code>db.集合名.find().limit(20).skip(10)</code></p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件通信</title>
      <link href="/2019/03/01/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/03/01/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-组件通信"><a href="#Vue-组件通信" class="headerlink" title="Vue 组件通信"></a>Vue 组件通信</h1><h2 id="prop-amp-emit"><a href="#prop-amp-emit" class="headerlink" title="prop &amp; $emit"></a>prop &amp; $emit</h2><p>使用 <code>:number=&quot;number&quot;</code> 为组件传递一个数据<br>使用 <code>@add=&quot;addNumber&quot;</code> 监听自定义事件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; msg &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:number</span>=<span class="string">&quot;number&quot;</span> @<span class="attr">add</span>=<span class="string">&quot;addNumber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>props</code> 接收传递的数据<br>使用 <code>$emit</code> 触发自定义事件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;Child&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 在 button 中监听 click 事件</span></span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; number &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;onClick&quot;&gt;</span></span><br><span class="line"><span class="string">        add</span></span><br><span class="line"><span class="string">      &lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="comment">// 接收数据 number</span></span><br><span class="line">      <span class="attr">number</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      onClick () &#123;</span><br><span class="line">        <span class="comment">// 触发自定义事件 add</span></span><br><span class="line">        <span class="comment">// 第一个参数为事件名，第二个参数接受传递的参数</span></span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;我是自定义事件&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">Child</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">number</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;我是父组件&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 自定义事件触发时调用</span></span><br><span class="line">    addNumber (msg) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">number</span>++</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">msg</span> = msg</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(msg) <span class="comment">// 我是自定义事件</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a><a href="https://cn.vuejs.org/v2/guide/components-edge-cases.html#%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5">依赖注入</a></h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Child</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在父组件中通过 <code>provide</code> 将数据传递出去<br>在子组件通过 <code>inject</code> 接收 <code>provide</code> 传出来的数据</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;Child&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p&gt;我是&#123;&#123; name &#125;&#125;， 我&#123;&#123; age &#125;&#125;岁了&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="comment">// 接收数据</span></span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">Child</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jay&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 传递数据</span></span><br><span class="line">  provide () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="eventBus"><a href="#eventBus" class="headerlink" title="eventBus"></a>eventBus</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个 <code>Vue</code> 新实例 <code>eventBus</code>， 在 <code>eventBus</code> 上通过自定义事件和监听事件传递数据。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 eventBus</span></span><br><span class="line"><span class="keyword">let</span> eventBus = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// B 组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;Child&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p v-show=&quot;isShow&quot;&gt;我是 &#123;&#123; msg &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isShow</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;message&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="comment">// 监听自定义事件 toggle</span></span><br><span class="line">    eventBus.$on(<span class="string">&#x27;toggle&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(msg) <span class="comment">// event bus</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isShow</span> = !<span class="variable language_">this</span>.<span class="property">isShow</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">msg</span> = msg</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// A 组件</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">Child</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    onClick () &#123;</span><br><span class="line">      <span class="comment">// 触发自定义事件 toggle 传递数据</span></span><br><span class="line">      eventBus.$emit(<span class="string">&#x27;toggle&#x27;</span>, <span class="string">&#x27;event bus&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="sync"><a href="#sync" class="headerlink" title=".sync"></a>.sync</h2><p>在组件上使用 <code>v-bind:selected=&quot;selected&quot;</code> 为子组件传递数据<br><code>v-on:update:selected=&quot;selected = $event&quot;</code> 监听事件并更新数据</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>parent &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:selected</span>=<span class="string">&quot;selected&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:update:selected</span>=<span class="string">&quot;selected = $event&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>.sync</code> 是上边代码的缩写</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>parent &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- .sync 缩写 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- .sync 只能绑定属性名，不能使用表达式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:selected.sync</span>=<span class="string">&quot;selected&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件通过 <code>props</code> 接收父组件的数据<br>子组件使用 <code>this.$emit(&#39;update:selected&#39;, newValue)</code> 触发父组件 <code>update:selected</code> 事件，更改父组件的数据</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;Child&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;onClickA&quot;&gt;A&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;onClickB&quot;&gt;B&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;h3&gt;child &#123;&#123; selected &#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="comment">// 接收数据</span></span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">selected</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    onClickA () &#123;</span><br><span class="line">      <span class="comment">// 触发事件，传递参数</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;update:selected&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    onClickB () &#123;</span><br><span class="line">      <span class="comment">// 触发事件，传递参数</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;update:selected&#x27;</span>, <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">Child</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">selected</span>: <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VuePress</title>
      <link href="/2018/12/17/VuePress/"/>
      <url>/2018/12/17/VuePress/</url>
      
        <content type="html"><![CDATA[<h1 id="VuePress"><a href="#VuePress" class="headerlink" title="VuePress"></a>VuePress</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在现有项目中</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 VuePress 作为一个本地依赖安装</span></span><br><span class="line">yarn add -D vuepress <span class="comment"># 或者：npm install -D vuepress</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个 docs 文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> docs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个 markdown 文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;# Hello VuePress!&#x27;</span> &gt; docs/README.md</span><br></pre></td></tr></table></figure><p>添加 package.json 配置</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;docs:dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vuepress dev docs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;docs:build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vuepress build docs&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>命令行运行以下命令开启 dev server</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn docs:dev <span class="comment"># 或者：npm run docs:dev</span></span><br></pre></td></tr></table></figure><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><ul><li>在 <code>docs</code> 中创建相应的文件目录并在其中创建 <code>README.md</code> 文件，如：<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├─ docs</span><br><span class="line">│  ├─ get-start</span><br><span class="line">│  │  └─ README.md</span><br><span class="line">│  └─ install</span><br><span class="line">│     └─ README.md</span><br><span class="line">└─ package.json</span><br></pre></td></tr></table></figure></li><li>在新创建的 <code>README.md</code> 文件中添加对应内容，如：</li></ul><p><code>get-start/README.md</code></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="section">title: 快速上手</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 快速上手</span></span><br></pre></td></tr></table></figure><p><code>install/README.md</code></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="section">title: 安装</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 安装</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>在 <code>docs</code> 目录中创建 <code>.vuepress</code> 目录，并在 <code>.vuepress</code> 目录中创建 <code>config.js</code> 文件</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├─ docs</span><br><span class="line">│  ├─ README.md</span><br><span class="line">│  ├─ .vuepress</span><br><span class="line">│  │   └─ config.js</span><br><span class="line">│  ├─ get-start</span><br><span class="line">│  │  └─ README.md</span><br><span class="line">│  └─ install</span><br><span class="line">│     └─ README.md</span><br><span class="line">└─ package.json</span><br></pre></td></tr></table></figure><p>之后在 <code>.vuepress/config.js</code> 中添加以下配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;VuePress&#x27;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&#x27;这是一个使用 VuePress 创建的文档&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>配置 nav<br>想要添加 nav，需要在 <code>.vuepress/config.js</code> 中配置 <code>themeConfig.nav</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .vuepress/config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">themeConfig</span>: &#123;</span><br><span class="line">    <span class="attr">nav</span>: [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Home&#x27;</span>, <span class="attr">link</span>: <span class="string">&#x27;/&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;开始&#x27;</span>, <span class="attr">link</span>: <span class="string">&#x27;/get-started/&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置 sidebar<br>想要添加 sidebar，需要在 <code>.vuepress/config.js</code> 中配置 <code>themeConfig.sidebar</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .vuepress/config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">themeConfig</span>: &#123;</span><br><span class="line">    <span class="attr">sidebar</span>: [</span><br><span class="line">      <span class="string">&#x27;/get-start/&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;/install&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>sidebar 的分组</li></ul><p>新建 <code>components/button.md</code> 并添加以下内容</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: button</span><br><span class="line"><span class="section">sidebarDepth: 2 // 设置嵌套深度</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="section"># button</span></span><br></pre></td></tr></table></figure><p>修改配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .vuepress/config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">themeConfig</span>: &#123;</span><br><span class="line">    <span class="attr">sidebar</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;入门&#x27;</span>,</span><br><span class="line">            <span class="attr">collapsable</span>: <span class="literal">false</span>, <span class="comment">// 设置默认展开</span></span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">              <span class="string">&#x27;/get-started/&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;/install/&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;组件&#x27;</span>,</span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">              <span class="string">&#x27;/components/button&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>到这里基本配置就完成了<br><img src="/demo.png"></p>]]></content>
      
      
      <categories>
          
          <category> VuePress </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VuePress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 JavaScript 中 this 对象</title>
      <link href="/2018/09/09/%E5%85%B3%E4%BA%8EJavaScript%E4%B8%AD%E7%9A%84this/"/>
      <url>/2018/09/09/%E5%85%B3%E4%BA%8EJavaScript%E4%B8%AD%E7%9A%84this/</url>
      
        <content type="html"><![CDATA[<h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><p>this是在运行时调用的，它的值取决于函数的调用位置。</p><h2 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h2><h3 id="独立函数中的-this"><a href="#独立函数中的-this" class="headerlink" title="独立函数中的 this"></a>独立函数中的 this</h3><p>在全局函数中，this 指向全局对象 window。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span> === <span class="variable language_">window</span> <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">n</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">example</span>() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>严格模式下，this 的值为 undefined。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example</span> () &#123;</span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span> === <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">n</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">example</span>() <span class="comment">// TypeError: this is undefined</span></span><br></pre></td></tr></table></figure><p>但只在严格模式下调用函数不会影响 this 的值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span> === <span class="variable language_">window</span> <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">n</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">  <span class="title function_">example</span>() <span class="comment">// 1</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>匿名函数没有绑定任何对象，因此其 this 通常指向 window（作为独立函数执行）。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">example</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">n</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">example</span>()() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="作为对象的方法中的-this"><a href="#作为对象的方法中的-this" class="headerlink" title="作为对象的方法中的 this"></a>作为对象的方法中的 this</h3><p>调用对象的方法时，方法里的 this 指向调用这个方法的对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">example</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">example</span>() <span class="comment">// obj</span></span><br></pre></td></tr></table></figure><p>对象属性引用链中只有上一层或者最后一层在调用位置中起作用。方法中的 this 只指向当前一层的对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">obj2</span>: &#123;</span><br><span class="line">    <span class="attr">n</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">example</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">n</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">obj2</span>.<span class="title function_">example</span>() <span class="comment">// 2 this 指向 obj.obj2</span></span><br><span class="line"><span class="comment">// 谁调用函数，函数中的 this 就指向谁。</span></span><br><span class="line"><span class="comment">// obj.example() this 是 obj</span></span><br><span class="line"><span class="comment">// obj.obj2.example() this 是 obj.obj2</span></span><br><span class="line"><span class="comment">// obj.obj2.obj3.example() this 是 obj.obj2.obj3</span></span><br></pre></td></tr></table></figure><p>绑定对象丢失</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">example</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">n</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = obj.<span class="property">example</span></span><br><span class="line"><span class="title function_">obj2</span>() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>obj2 引用的是 example 函数本身，obj2() 的调用等同于独立函数调用</p><p>参数传递就是一种隐式赋值，因此在函数传值也会出现上例的状况。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">example</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">n</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example2</span> (fn) &#123;</span><br><span class="line">  <span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">example2</span>(obj.<span class="property">example</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>js 的原生方法也不例外</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">example</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">n</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(obj.<span class="property">example</span>, <span class="number">0</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="构造函数调用中的-this"><a href="#构造函数调用中的-this" class="headerlink" title="构造函数调用中的 this"></a>构造函数调用中的 this</h3><p>构造函数中的 this 指向新创建的实例对象。<br>在使用 new 运算符来调用构造函数时，会执行一下操作：</p><ol><li>创建一个新对象。</li><li>将这个新对象的原型指向构造函数的 Prototype。</li><li>将这个新对象赋值给函数的 this。</li><li>执行构造函数并返回这个新对象（在函数没有返回其他对象的情况下）。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (name, age) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tom = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;tom&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tom.<span class="property">name</span>, tom.<span class="property">age</span>) <span class="comment">// tom 18</span></span><br></pre></td></tr></table></figure><h3 id="绑定-this"><a href="#绑定-this" class="headerlink" title="绑定 this"></a>绑定 this</h3><p>使用 call()、apply() 和 bind() 方法可以指定函数内 this 的指向</p><ul><li><p>call() 方法的第一个参数是一个对象，在调用函数时将其绑定到 this。其他参数为函数调用时接收的参数。<br>在非严格模式下第一个参数传入 null 或者 undefined 都会被全局对象代替，其他原始值会变为相应的包装对象。<br><code>fun.call(thisArg, arg1, arg2, ...)</code>  </p></li><li><p>apply() 方法和 call() 类似，区别在于 apply 的第二个参数是一个数组。<br><code>func.apply(thisArg, [argsArray])</code></p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example</span> () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">n</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">example.<span class="title function_">call</span>(<span class="literal">null</span>) <span class="comment">// 1</span></span><br><span class="line">example.<span class="title function_">call</span>(obj) <span class="comment">// 2</span></span><br><span class="line">example.<span class="title function_">call</span>(obj2) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>bind() 方法返回一个新函数。新函数为原函数的拷贝，this 为方法的第一个参数。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example</span> () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">n</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> example2 = example.<span class="title function_">bind</span>(obj)</span><br><span class="line"><span class="title function_">example2</span>() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数中的-this"><a href="#箭头函数中的-this" class="headerlink" title="箭头函数中的 this"></a>箭头函数中的 this</h3><p>箭头函数的 this 是当前的词法作用域决定的<br>箭头函数中的 this 为外层函数的 this（箭头函数定义时所在作用域的 this）。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 箭头函数定义时的作用域(箭头函数外层作用域)</span></span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">3</span></span><br><span class="line">    example = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 箭头函数的作用域</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">n</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">example</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">f</span>() <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>箭头函数中的 this 无法被修改</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">3</span></span><br><span class="line">    example = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">n</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> example.<span class="title function_">call</span>(&#123; <span class="attr">n</span>: <span class="number">4</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">f</span>() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful API</title>
      <link href="/2018/08/19/RESTful-API/"/>
      <url>/2018/08/19/RESTful-API/</url>
      
        <content type="html"><![CDATA[<h1 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h1><h2 id="什么是-RESTful-API"><a href="#什么是-RESTful-API" class="headerlink" title="什么是 RESTful API"></a>什么是 RESTful API</h2><p>REST 全称为 Representational State Transfer(表现层状态转换)。REST 基于 HTTP 的设计风格，是一种万维网软件架构风格，目的是便于不同软件&#x2F;程序在网络中互相传递信息。<br>符合 REST 设计风格的 Web API 称为 RESTful API。RESTful API 是目前比较成熟的一套互联网应用程序的API设计理论。可以为不同的客户端提供统一的接口。</p><h2 id="RESTful-API-设计规范"><a href="#RESTful-API-设计规范" class="headerlink" title="RESTful API 设计规范"></a>RESTful API 设计规范</h2><h3 id="API版本"><a href="#API版本" class="headerlink" title="API版本"></a>API版本</h3><p>可以将 API 部署在专用的子域名下，或者放入主域名的 URL 中<br><code>https://api.example.com</code> 或 <code>https://example.com/api</code><br>将版本信息放入 HTTP header 头中，或 URL 中<br><code>https://api.example.com/v1</code><br>API 版本需向后兼容,使用新版本的 API 的同时,要保证旧版本的 API 可以正常使用</p><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>RESTful 的每个 URL 代表一种资源（resource），所有的动作都是对指定资源进行操作。URL 中不能有动词，只能有名词并且使用复数而且所用的名词往往与数据库的表格名对应，只能用小写。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/example.<span class="property">com</span>/resources/</span><br></pre></td></tr></table></figure><h3 id="HTTP-方法用动词"><a href="#HTTP-方法用动词" class="headerlink" title="HTTP 方法用动词"></a>HTTP 方法用动词</h3><p>使用不同的 <a href="http://kjay.me/2018/03/02/HTTP/">HTTP</a> 方法表示对资源进行不同的操作。</p><p>常用的 HTTP 方法有以下五种：</p><ul><li><code>GET</code>:    获取资源</li><li><code>POST</code>:   添加资源</li><li><code>DELETE</code>: 删除资源</li><li><code>PUT</code>:    修改资源（整体替换）</li><li><code>PATCH</code>:  修改资源（部分修改）</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">GET</span> /notebooks  <span class="comment">// 获取所有笔记本（对一组资源的操作）</span></span><br><span class="line"><span class="variable constant_">GET</span> /notebooks/:<span class="variable constant_">ID</span>  <span class="comment">// 获取某个笔记本信息（对单个资源的操作）</span></span><br><span class="line"><span class="variable constant_">POST</span> /notebooks <span class="comment">// 创建一个笔记本</span></span><br><span class="line"><span class="variable constant_">DELETE</span> /notebooks/:<span class="variable constant_">ID</span> <span class="comment">//删除某个笔记本</span></span><br><span class="line"><span class="variable constant_">PUT</span> /notebooks/:<span class="variable constant_">ID</span>  <span class="comment">// 更新某个笔记本（更新全部笔记本信息）</span></span><br><span class="line"><span class="variable constant_">PATCH</span> /notebooks/:<span class="variable constant_">ID</span>  <span class="comment">// 更新某个笔记本（更新部分笔记本信息）</span></span><br></pre></td></tr></table></figure><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><p>请求的响应应返回相应的 <a href="http://kjay.me/2018/03/02/HTTP/">HTTP</a> 状态码。</p><ul><li><strong><code>200 OK</code></strong> 表示客户端发来的请求在服务器端被正常处理了。</li><li><strong><code>204 No Content</code></strong> 该状态码代表服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分。</li><li><strong><code>206 Partial Content</code></strong> 该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求。</li><li><strong><code>301 Moved Permanently</code></strong> 永久性重定向。该状态码表示请求的资源已被分配了新的 URI，以后应使用资源现在所指的 URI。</li><li><strong><code>302 Found</code></strong> 临时性重定向。该状态码表示请求的资源已被分配了新的 URI，希望用户能使用新的 URI 访问。</li><li><strong><code>303 See Other</code></strong> 该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 光谷定向获取请求的资源。</li><li><strong><code>400 Bad Request</code></strong> 请求出现语法错误。</li><li><strong><code>404 Not Found</code></strong> 服务器上无法找到请求的资源。</li><li><strong><code>500 Internal Server Error</code></strong> 服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。</li><li><strong><code>503 Service Unavailable</code></strong> 服务器暂时处于超负荷或正在进行停机维护，现在无法处理请求。</li></ul><h3 id="过滤参数"><a href="#过滤参数" class="headerlink" title="过滤参数"></a>过滤参数</h3><p>如果记录数量很多，服务器不可能都将它们返回给用户。API 应该 提供参数，过滤返回结果。下面是一些常见的参数。</p><ul><li>?limit&#x3D;10：指定返回记录的数量</li><li>?offset&#x3D;10：指定返回记录的开始位置。</li><li>?page&#x3D;2&amp;per_page&#x3D;100：指定第几页，以及每页的记录数。</li><li>?sortby&#x3D;name&amp;order&#x3D;asc：指定返回结果按照哪个属性排序，以及排序顺序。</li><li>?animal_type_id&#x3D;1：指定筛选条件</li></ul><p>参数的设计允许存在冗余，即允许 API 路径和 URL 参数偶尔有重复。比如，GET &#x2F;zoo&#x2F;ID&#x2F;animals 与 GET &#x2F;animals?zoo_id&#x3D;ID 的含义是相同的。</p><h3 id="返回信息"><a href="#返回信息" class="headerlink" title="返回信息"></a>返回信息</h3><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p><ul><li>GET &#x2F;notebooks：返回资源对象的列表（数组）</li><li>GET &#x2F;notebooks&#x2F;notes：返回单个资源对象</li><li>POST &#x2F;notebooks：返回新生成的资源对象</li><li>PUT &#x2F;notebooks&#x2F;notes：返回完整的资源对象</li><li>PATCH &#x2F;notebooks&#x2F;notes：返回完整的资源对象</li><li>DELETE &#x2F;notebooks&#x2F;notes：返回一个空文档</li></ul><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>如果出现错误应返回明确的错误信息</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  <span class="attr">error</span>: <span class="string">&#x27;权限不足&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2018/03/31/webpack/"/>
      <url>/2018/03/31/webpack/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单配置</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>); <span class="comment">// 通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>); <span class="comment">// 用于访问内置插件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./path/to/my/entry/file.js&#x27;</span>,  <span class="comment">// 输入：项目主文件（入口文件）</span></span><br><span class="line">  <span class="attr">output</span>: &#123; <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),  <span class="comment">//想要生成(emit)到哪里</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span>  <span class="comment">// webpack bundle 的名称</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123; <span class="comment">// 配置加载资源</span></span><br><span class="line">    <span class="attr">rules</span>: [  <span class="comment">// 规则</span></span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">&#x27;raw-loader&#x27;</span> &#125; <span class="comment">// webpack 编译器碰到「在 require()/import 语句中被解析为 &#x27;.txt&#x27; 的路径」时，在对它打包之前，先使用 raw-loader 转换一下。</span></span><br><span class="line">      <span class="comment">// test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。</span></span><br><span class="line">      <span class="comment">// use 属性，表示进行转换时，应该使用哪个 loader。</span></span><br><span class="line">    ],</span><br><span class="line">  <span class="attr">plugins</span>: [   <span class="comment">// webpack插件配置</span></span><br><span class="line">    <span class="comment">// new webpack.optimize.UglifyJsPlugin(),  // 现在也不需要使用这个plugin了，只需要使用optimization.minimize为true就行，production mode下面自动为true</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;<span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = config;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="入口-entry"><a href="#入口-entry" class="headerlink" title="入口(entry)"></a>入口(entry)</h4><p>可以通过在 webpack 配置中配置 <code>entry</code> 属性，来指定一个入口起点（或多个入口起点）。</p><h5 id="单个入口（简写）语法"><a href="#单个入口（简写）语法" class="headerlink" title="单个入口（简写）语法"></a>单个入口（简写）语法</h5><p>用法：<code>entry: string|Array&lt;string&gt;</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./path/to/my/entry/file.js&#x27;</span> <span class="comment">// 简写</span></span><br><span class="line">  <span class="comment">// entry: &#123;</span></span><br><span class="line">  <span class="comment">//   main: &#x27;./path/to/my/entry/file.js&#x27;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h5><p>用法：<code>entry: &#123;[entryChunkName: string]: string|Array&lt;string&gt;&#125;</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">app</span>: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">    <span class="attr">vendors</span>: <span class="string">&#x27;./src/vendors.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = config;</span><br></pre></td></tr></table></figure><h4 id="输出-output"><a href="#输出-output" class="headerlink" title="输出(output)"></a>输出(output)</h4><p>output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件。注意，即使可以存在多个入口起点，但只指定一个输出配置。<br>在 webpack 中配置 <code>output</code> 属性的最低要求是，将它的值设置为一个对象，包括以下两点：</p><ul><li>filename 用于输出文件的文件名。</li><li>目标输出目录 path 的绝对路径。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home/proj/public/assets&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = config;</span><br><span class="line"><span class="comment">// 此配置将一个单独的 bundle.js 文件输出到 /home/proj/public/assets 目录中。</span></span><br></pre></td></tr></table></figure><p>如果配置创建了多个单独的 “chunk”，则应该使用占位符(substitutions)来确保每个文件具有唯一的名称。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">app</span>: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">    <span class="attr">search</span>: <span class="string">&#x27;./src/search.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: __dirname + <span class="string">&#x27;/dist&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入到硬盘：./dist/app.js, ./dist/search.js</span></span><br></pre></td></tr></table></figure><h4 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h4><p>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。<br>在你的应用程序中，有三种使用 loader 的方式：</p><ul><li><strong>配置（推荐）：在 webpack.config.js 文件中指定 loader。</strong></li></ul><p><code>module.rules</code> 允许你在 webpack 配置中指定多个 loader。 这是展示 loader 的一种简明方式，并且有助于使代码变得简洁。同时让你对各个 loader 有个全局概览：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">&#x27;style-loader&#x27;</span> &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">modules</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>内联：在每个 import 语句中显式指定 loader。</li></ul><p>可以在 import 语句或任何等效于 “import” 的方式中指定 loader。使用 ! 将资源中的 loader 分开。分开的每个部分都相对于当前目录解析。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Styles</span> <span class="keyword">from</span> <span class="string">&#x27;style-loader!css-loader?modules!./styles.css&#x27;</span>;</span><br></pre></td></tr></table></figure><p>通过前置所有规则及使用 !，可以对应覆盖到配置中的任意 loader。<br>选项可以传递查询参数，例如 ?key&#x3D;value&amp;foo&#x3D;bar，或者一个 JSON 对象，例如 ?{“key”:”value”,”foo”:”bar”}。</p><ul><li>CLI：在 shell 命令中指定它们。</li></ul><p>你也可以通过 CLI 使用 loader：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">webpack --<span class="variable language_">module</span>-bind jade-loader --<span class="variable language_">module</span>-bind <span class="string">&#x27;css=style-loader!css-loader&#x27;</span></span><br></pre></td></tr></table></figure><p>这会对 .jade 文件使用 jade-loader，对 .css 文件使用 style-loader 和 css-loader。</p><h4 id="插件-plugins"><a href="#插件-plugins" class="headerlink" title="插件(plugins)"></a>插件(plugins)</h4><p>想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。<br>webpack.config.js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>); <span class="comment">//通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>); <span class="comment">//访问内置的插件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./path/to/my/entry/file.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// new webpack.optimize.UglifyJsPlugin(),  // 现在也不需要使用这个plugin了，只需要使用optimization.minimize为true就行，production mode下面自动为true</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;<span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = config;</span><br></pre></td></tr></table></figure><p><a href="https://doc.webpack-china.org/configuration/">配置</a><br><a href="https://webpack.js.org/configuration/">Configuration</a></p><h4 id="mode-x2F-–mode参数"><a href="#mode-x2F-–mode参数" class="headerlink" title="mode&#x2F;–mode参数"></a>mode&#x2F;–mode参数</h4><p>4.X 新增了mode&#x2F;–mode参数来表示是开发还是生产，mode有两个可选值：development和production，production不支持监听，production侧重于打包后的文件大小，development侧重于构建的速度。<br><code>webpack --mode development</code></p><p>也可以在配置文件中配置：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h4><p>HtmlWebpackPlugin 会默认生成 index.html 文件<br>首先安装插件，并且调整 webpack.config.js 文件：<br><code>npm install --save-dev html-webpack-plugin</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+ <span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">+   <span class="attr">plugins</span>: [</span><br><span class="line">+     <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">+       <span class="attr">title</span>: <span class="string">&#x27;Output Management&#x27;</span></span><br><span class="line">+     &#125;)</span><br><span class="line">+   ]</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h4 id="清理-x2F-dist-文件夹"><a href="#清理-x2F-dist-文件夹" class="headerlink" title="清理 &#x2F;dist 文件夹"></a>清理 &#x2F;dist 文件夹</h4><p>clean-webpack-plugin 是一个比较普及的管理插件，让我们安装和配置下。<br><code>npm install clean-webpack-plugin --save-dev</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+ <span class="keyword">const</span> <span class="title class_">CleanWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">+     <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>([<span class="string">&#x27;dist&#x27;</span>]), <span class="comment">// 在每次构建前清理 /dist 文件夹</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Output Management&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h4 id="source-map"><a href="#source-map" class="headerlink" title="source map"></a>source map</h4><p>为了更容易地追踪错误和警告，JavaScript 提供了 source map 功能，将编译后的代码映射回原始源代码。<br>source map 有很多<a href="https://doc.webpack-china.org/configuration/devtool">不同的选项</a>可用，请务必仔细阅读它们，以便可以根据需要进行配置。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"> <span class="attr">devtool</span>: <span class="string">&#x27;inline-source-map&#x27;</span>,</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h4 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h4><p><code>webpack-dev-server</code> 为你提供了一个简单的 web 服务器，并且能够实时重新加载(live reloading)。让我们设置以下：<br><code>npm install --save-dev webpack-dev-server</code><br>修改配置文件，告诉开发服务器(dev server)，在哪里查找文件：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">+   <span class="attr">devServer</span>: &#123;</span><br><span class="line">+     <span class="attr">port</span>: <span class="number">8000</span>,</span><br><span class="line">+     <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span></span><br><span class="line">+   &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>以上配置告知 <code>webpack-dev-server</code>，在 <code>localhost:8000</code>(默认8080) 下建立服务，将 dist 目录下的文件，作为可访问文件。</p><p>让我们添加一个 script 脚本，可以直接运行开发服务器(dev server)：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">+     <span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack-dev-server --open&quot;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>webpack-dev-server 带有许多可配置的选项。转到<a href="https://doc.webpack-china.org/configuration/dev-server">相关文档</a>以了解更多。</p><h4 id="模块热替换-Hot-Module-Replacement"><a href="#模块热替换-Hot-Module-Replacement" class="headerlink" title="模块热替换(Hot Module Replacement)"></a>模块热替换(Hot Module Replacement)</h4><p>模块热替换(Hot Module Replacement 或 HMR)是 webpack 提供的最有用的功能之一。它允许在运行时更新各种模块，而无需进行完全刷新。</p><p>启用此功能实际上相当简单。而我们要做的，就是更新 <code>webpack-dev-server</code> 的配置，和使用 webpack 内置的 HMR 插件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+ <span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"> <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">      <span class="attr">port</span>: <span class="number">8000</span>,</span><br><span class="line">      <span class="attr">overlay</span>: &#123;  <span class="comment">// webpack编译出现错误，则显示到网页上</span></span><br><span class="line">        <span class="attr">errors</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">+     <span class="attr">hot</span>: <span class="literal">true</span> <span class="comment">// 不刷新热加载数据</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Hot Module Replacement&#x27;</span></span><br><span class="line">      &#125;),</span><br><span class="line">+     <span class="keyword">new</span> webpack.<span class="title class_">NamedModulesPlugin</span>(),</span><br><span class="line">+     <span class="keyword">new</span> webpack.<span class="title class_">HotModuleReplacementPlugin</span>()</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>注意，我们还添加了 <code>NamedModulesPlugin</code>，以便更容易查看要修补(patch)的依赖</p><h4 id="生产环境构建"><a href="#生产环境构建" class="headerlink" title="生产环境构建"></a>生产环境构建</h4><p>开发环境(development)和生产环境(production)的构建目标差异很大。在开发环境中，我们需要具有强大的、具有实时重新加载(live reloading)或热模块替换(hot module replacement)能力的 source map 和 localhost server。而在生产环境中，我们的目标则转向于关注更小的 bundle，更轻量的 source map，以及更优化的资源，以改善加载时间。由于要遵循逻辑分离，我们通常建议为每个环境编写<strong>彼此独立的 webpack 配置</strong>。<br>虽然，以上我们将生产环境和开发环境做了略微区分，但是，请注意，我们还是会遵循不重复原则(Don’t repeat yourself - DRY)，保留一个“通用”配置。为了将这些配置合并在一起，我们将使用一个名为 <code>webpack-merge</code> 的工具。通过“通用”配置，我们不必在环境特定(environment-specific)的配置中重复代码。</p><p>我们先从安装 webpack-merge 开始，并将之前指南中已经成型的那些代码再次进行分离：<br><code>npm install --save-dev webpack-merge</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// project</span></span><br><span class="line">  webpack-demo</span><br><span class="line">  |- package.<span class="property">json</span></span><br><span class="line">- |- webpack.<span class="property">config</span>.<span class="property">js</span></span><br><span class="line">+ |- webpack.<span class="property">common</span>.<span class="property">js</span></span><br><span class="line">+ |- webpack.<span class="property">dev</span>.<span class="property">js</span></span><br><span class="line">+ |- webpack.<span class="property">prod</span>.<span class="property">js</span></span><br><span class="line">  |- /dist</span><br><span class="line">  |- /src</span><br><span class="line">    |- index.<span class="property">js</span></span><br><span class="line">    |- math.<span class="property">js</span></span><br><span class="line">  |- /node_modules</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.common.js</span></span><br><span class="line">+ <span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">+ <span class="keyword">const</span> <span class="title class_">CleanWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line">+ <span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line">+</span><br><span class="line">+ <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">+   <span class="attr">entry</span>: &#123;</span><br><span class="line">+     <span class="attr">app</span>: <span class="string">&#x27;./src/index.js&#x27;</span></span><br><span class="line">+   &#125;,</span><br><span class="line">+   <span class="attr">plugins</span>: [</span><br><span class="line">+     <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>([<span class="string">&#x27;dist&#x27;</span>]),</span><br><span class="line">+     <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">+       <span class="attr">title</span>: <span class="string">&#x27;Production&#x27;</span></span><br><span class="line">+     &#125;)</span><br><span class="line">+   ],</span><br><span class="line">+   <span class="attr">output</span>: &#123;</span><br><span class="line">+     <span class="attr">filename</span>: <span class="string">&#x27;[name].bundle.js&#x27;</span>,</span><br><span class="line">+     <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">+   &#125;</span><br><span class="line">+ &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.dev.js</span></span><br><span class="line">+ <span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line">+ <span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.js&#x27;</span>);</span><br><span class="line">+</span><br><span class="line">+ <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(common, &#123;</span><br><span class="line">+   <span class="attr">devtool</span>: <span class="string">&#x27;inline-source-map&#x27;</span>,</span><br><span class="line">+   <span class="attr">devServer</span>: &#123;</span><br><span class="line">+     <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span></span><br><span class="line">+   &#125;</span><br><span class="line">+ &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line">+ <span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="comment">// + const UglifyJSPlugin = require(&#x27;uglifyjs-webpack-plugin&#x27;);  // 4.X 现在也不需要使用这个plugin了，只需要使用optimization.minimize为true就行，production mode下面自动为true</span></span><br><span class="line">+ <span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.js&#x27;</span>);</span><br><span class="line">+</span><br><span class="line">+ <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(common, &#123;</span><br><span class="line">+   <span class="attr">plugins</span>: [</span><br><span class="line"><span class="comment">// +     new UglifyJSPlugin()  // 4.X 现在也不需要使用这个plugin了，只需要使用optimization.minimize为true就行，production mode下面自动为true</span></span><br><span class="line">+   ]</span><br><span class="line">+ &#125;);</span><br></pre></td></tr></table></figure><p>现在，在 webpack.common.js 中，我们设置了 entry 和 output 配置，并且在其中引入这两个环境公用的全部插件。<br>在 webpack.dev.js 中，我们为此环境添加了推荐的 <code>devtool</code>（强大的 source map）和简单的 devServer 配置。<br>最后，在 webpack.prod.js 中，我们引入了之前在 tree shaking 指南中介绍过的 <del>UglifyJSPlugin</del>。4.X 现在也不需要使用这个plugin了，只需要使用optimization.minimize为true就行，production mode下面自动为true.从webpack 4开始，这也可以通过”mode”配置选项轻松切换，设置为”production”。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">+ <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在，我们把 scripts 重新指向到新配置。我们将 npm start 定义为开发环境脚本，并在其中使用 webpack-dev-server，将 npm run build 定义为生产环境脚本：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">-     <span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack-dev-server --open&quot;</span>,</span><br><span class="line">+     <span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack-dev-server --open --config webpack.dev.js&quot;</span>,</span><br><span class="line">-     <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">+     <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --config webpack.prod.js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="指定环境"><a href="#指定环境" class="headerlink" title="指定环境"></a>指定环境</h5><p>许多 library 将通过与 process.env.NODE_ENV 环境变量关联，以决定 library 中应该引用哪些内容。例如，当不处于生产环境中时，某些 library 为了使调试变得容易，可能会添加额外的日志记录(log)和测试(test)。其实，当使用 process.env.NODE_ENV &#x3D;&#x3D;&#x3D; ‘production’ 时，一些 library 可能针对具体用户的环境进行代码优化，从而删除或添加一些重要代码。我们可以使用 webpack 内置的 <a href="https://doc.webpack-china.org/plugins/define-plugin">DefinePlugin</a> 为所有的依赖定义这个变量：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(common, &#123;</span><br><span class="line">+     <span class="keyword">new</span> webpack.<span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">+       <span class="string">&#x27;process.env.NODE_ENV&#x27;</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="string">&#x27;production&#x27;</span>)</span><br><span class="line">+     &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>技术上讲，NODE_ENV 是一个由 Node.js 暴露给执行脚本的系统环境变量。通常用于决定在开发环境与生产环境(dev-vs-prod)下，服务器工具、构建脚本和客户端 library 的行为。然而，与预期不同的是，无法在构建脚本 webpack.config.js 中，将 process.env.NODE_ENV 设置为 “production”，请查看 #2537。因此，例如 process.env.NODE_ENV &#x3D;&#x3D;&#x3D; ‘production’ ? ‘[name].[hash].bundle.js’ : ‘[name].bundle.js’ 这样的条件语句，在 webpack 配置文件中，无法按照预期运行。</p><h4 id="ExtractTextWebpackPlugin"><a href="#ExtractTextWebpackPlugin" class="headerlink" title="ExtractTextWebpackPlugin"></a><a href="https://doc.webpack-china.org/plugins/extract-text-webpack-plugin">ExtractTextWebpackPlugin</a></h4><p>4.X 版本支持插件 <a href="https://github.com/webpack-contrib/mini-css-extract-plugin">mini-css-extract-plugin</a><br>安装：<code>npm install --save-dev extract-text-webpack-plugin</code><br>用法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ExtractTextPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;extract-text-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="title class_">ExtractTextPlugin</span>.<span class="title function_">extract</span>(&#123;</span><br><span class="line">          <span class="attr">fallback</span>: <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">          <span class="attr">use</span>: <span class="string">&quot;css-loader&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ExtractTextPlugin</span>(<span class="string">&quot;styles.css&quot;</span>),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它会将所有的入口 chunk(entry chunks)中引用的 *.css，移动到独立分离的 CSS 文件。因此，你的样式将不再内嵌到 JS bundle 中，而是会放到一个单独的 CSS 文件（即 styles.css）当中。 如果你的样式文件大小较大，这会做更快提前加载，因为 CSS bundle 会跟 JS bundle 并行加载。</p><h4 id="代码分离"><a href="#代码分离" class="headerlink" title="代码分离"></a>代码分离</h4><p>有三种常用的代码分离方法：</p><ul><li>入口起点：使用 entry 配置手动地分离代码。</li><li>防止重复：使用 CommonsChunkPlugin 去重和分离 chunk。</li><li>动态导入：通过模块的内联函数调用来分离代码。</li></ul><h5 id="防止重复-prevent-duplication"><a href="#防止重复-prevent-duplication" class="headerlink" title="防止重复(prevent duplication)"></a>防止重复(prevent duplication)</h5><p>webpack 4删除了<a href="https://gist.github.com/sokra/1522d586b8e5c0f5072d7565c2bee693">CommonsChunkPlugin</a>,以支持两个新选项（<code>optimization.splitChunks</code>和<code>optimization.runtimeChunk</code>）。<br>默认配置只会对异步请求的模块进行提取拆分，如果要对entry进行拆分，需要设置<code>optimization.splitChunks.chunks = &#39;all&#39;</code>。<br><code>optimization.runtimeChunk</code>，设置为<code>true</code>就会自动拆分runtime文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认配置</span></span><br><span class="line"><span class="attr">splitChunks</span>: &#123;</span><br><span class="line"><span class="attr">chunks</span>: <span class="string">&quot;async&quot;</span>,                      <span class="comment">// 可选&quot;initial&quot;，&quot;async&quot;和&quot;all&quot;</span></span><br><span class="line">  <span class="attr">minSize</span>: <span class="number">30000</span>,                     <span class="comment">// 最小尺寸，默认0,</span></span><br><span class="line">  <span class="attr">minChunks</span>: <span class="number">1</span>,                       <span class="comment">// 最小 chunk ，默认1</span></span><br><span class="line">  <span class="attr">maxAsyncRequests</span>: <span class="number">5</span>,                <span class="comment">// 最大异步请求数，默认5</span></span><br><span class="line">  <span class="attr">maxInitialRequests</span>: <span class="number">3</span>,              <span class="comment">// 最大初始化请求数，默认3</span></span><br><span class="line">  <span class="attr">name</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">    <span class="attr">default</span>: &#123;</span><br><span class="line">      <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">priority</span>: -<span class="number">20</span></span><br><span class="line">      <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">vendors</span>: &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>, <span class="comment">// 正则规则验证，如果符合就提取 chunk</span></span><br><span class="line">      <span class="attr">priority</span>: -<span class="number">10</span>                   <span class="comment">// 缓存组优先级</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>CommonsChunkPlugin 插件可以将公共的依赖模块提取到已有的入口 chunk 中，或者提取到一个新生成的 chunk</del>。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">+     <span class="keyword">new</span> webpack.<span class="property">optimize</span>.<span class="title class_">CommonsChunkPlugin</span>(&#123;</span><br><span class="line">+       <span class="attr">name</span>: <span class="string">&#x27;common&#x27;</span> <span class="comment">// 指定公共 bundle 的名称。</span></span><br><span class="line">+     &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vs code 快捷键</title>
      <link href="/2018/03/28/vs-code-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2018/03/28/vs-code-%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<ol><li>注释：</li></ol><ul><li>a) 单行注释：[ctrl+k,ctrl+c] 或 ctrl+&#x2F;</li><li>b) 取消单行注释：[ctrl+k,ctrl+u] (按下ctrl不放，再按k + u)</li><li>c) 多行注释：[alt+shift+A]</li><li>d) 多行注释：&#x2F;**</li></ul><ol start="2"><li>移动行：alt+up&#x2F;down</li><li>显示&#x2F;隐藏左侧目录栏 ctrl + b</li><li>复制当前行：shift + alt +up&#x2F;down</li><li>删除当前行：shift + ctrl + k</li><li>控制台终端显示与隐藏：ctrl + ~</li><li>查找文件&#x2F;安装vs code 插件地址：ctrl + p</li><li>代码格式化：shift + alt +f</li><li>新建一个窗口 : ctrl + shift + n</li><li>行增加缩进: ctrl + [</li><li>行减少缩进: ctrl + ]</li><li>裁剪尾随空格(去掉一行的末尾那些没用的空格) : ctrl + shift + x</li><li>字体放大&#x2F;缩小: ctrl + ( + 或 - )</li><li>拆分编辑器 : ctrl + 1&#x2F;2&#x2F;3</li><li>切换窗口 : ctrl + shift + left&#x2F;right</li><li>关闭编辑器窗口 : ctrl + w</li><li>关闭所有窗口 : ctrl + k + w</li><li>切换全屏 : F11</li><li>自动换行 : alt + z</li><li>显示git : ctrl + shift + g</li><li>全局查找文件：ctrl + shift + f</li><li>显示相关插件的命令(如：git log)：ctrl + shift + p</li><li>选中文字：shift + left &#x2F; right &#x2F; up &#x2F; down</li><li>折叠代码： ctrl + k + 0-9 (0是完全折叠)</li><li>展开代码： ctrl + k + j (完全展开代码)</li><li>删除行 ： ctrl + shift + k</li><li>快速切换主题：ctrl + k &#x2F; ctrl + t</li><li>快速回到顶部 ： ctrl + home</li><li>快速回到底部 : ctrl + end</li><li>格式化选定代码 ：ctrl + k &#x2F; ctrl +f</li></ol>]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP</title>
      <link href="/2018/03/02/HTTP/"/>
      <url>/2018/03/02/HTTP/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="TCP-x2F-IP"><a href="#TCP-x2F-IP" class="headerlink" title="TCP&#x2F;IP"></a>TCP&#x2F;IP</h2><p>通常使用的网络（包括互联网）是在 TCP&#x2F;IP 协议族的基础上运作的。而 HTTP 属于它内部的一个子集。<br>TCP&#x2F;IP 协议族里重要的一点就是分层。TCP&#x2F;IP 协议族按层分别为四层：<strong>应用层、传输层、网络层和数据链路层</strong>。</p><ul><li>应用层决定了向用户提供应用服务时通信的活动。HTTP 协议处于该层。</li><li>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。</li><li>网络层用来处理在网路上流动的数据包。该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方。</li><li>数据链路层用来处理连接网络的硬件部分。<br><img src="/%E9%80%9A%E4%BF%A1%E4%BC%A0%E8%BE%93%E6%B5%81.png"><br>利用 TCP&#x2F;IP 协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收端则从链路层往上走。<br><img src="/%E9%80%9A%E4%BF%A1%E4%BC%A0%E8%BE%93%E6%B5%812.jpg"><br>发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息。反之，接收端在层与层传输数据时，每经过一层时会把对应的首部消去。<br>这种把数据信息包装起来的做法称为封装（encapsulate)。</li></ul><h3 id="IP-协议"><a href="#IP-协议" class="headerlink" title="IP 协议"></a>IP 协议</h3><p>按层次分，IP（Internet Protocol）网际协议位于网络层。<br>IP 协议的作用是把各种数据包传送给对方。而要保证确实传送到对方那里，则需要满足各类条件。其中两个重要的条件是 IP 地址和 MAC 地址（Media Access Control Address）。<br>IP 地址指明了节点被分配到的地址，MAC 地址是指网卡所属的固定地址。IP 地址可以和 MAC 地址进行配对。IP 地址可变换，但 MAC 地址基本上不会更改。<br>IP 间的通信依赖 MAC 地址。在网络上，通信的双方在同一局域网（LAN）内的情况是很少的，通常是经过多台计算机和网络设备中转才能连接到对方。而在进行中转时，会利用下一站中转设备的 MAC 地址来搜索下一个中转目标。这时，会采用 ARP 协议（Address Resolution Protocol）。ARP 是一种用以解析地址的协议，根据通信方的 IP 地址就可以反查出对应的 MAC 地址。</p><h3 id="TCP-协议"><a href="#TCP-协议" class="headerlink" title="TCP 协议"></a>TCP 协议</h3><p>按层次分，TCP 位于传输层，提供可靠的字节流服务。<br>所谓的字节流服务（Byte Stream Service）是指，为了方便传输，将大块数据分割成以报文段（segment）为单位的数据包进行管理。TCP 协议为了更容易传送大数据才把数据分割，而且 TCP 协议能够确认数据最终是否送达到对方。<br>为了准确无误地将数据送达目标处，TCP 协议采用了<strong>三次握手（three-way handshaking）</strong>策略。握手过程中使用了 TCP 的标志（flag） —— SYN（synchronize） 和 ACK（acknowledgement）。<br>发送端首先发送一个带 SYN 标志的数据包给对方。接收端收到后，回传一个带有 SYN&#x2F;ACK 标志的数据包以示传达确认信息。最后，发送端再回传一个带 ACK 标志的数据包，代表“握手”结束。<br>若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发送相同的数据包。<br><img src="/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="三次握手"></p><h3 id="DNS-服务"><a href="#DNS-服务" class="headerlink" title="DNS 服务"></a>DNS 服务</h3><p>DNS（Domain Name System）服务是和 HTTP 协议一样位于应用层的协议。它提供域名到 IP 地址之间的解析服务。<br>计算机既可以被赋予 IP 地址，也可以被赋予主机名和域名。比如 <code>www.hackr.jp</code>。<br>用户通常使用主机名或域名来访问对方的计算机，而不是直接通过 IP 地址访问。因为与 IP 地址的一组纯数字相比，用字母配合数字的表示形式来指定计算机名更符合人类的记忆习惯。<br>但要让计算机去理解名称，相对而言就变得困难了。因为计算机更擅长处理一长串数字。<br>DNS 协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。<br><img src="/DNS.png" alt="DNS"></p><h3 id="各种协议与-HTTP-协议的关系"><a href="#各种协议与-HTTP-协议的关系" class="headerlink" title="各种协议与 HTTP 协议的关系"></a>各种协议与 HTTP 协议的关系</h3><p>![各种协议与 HTTP 协议的关系](各种协议与 HTTP 协议的关系.png)</p><h3 id="URI-和-URL"><a href="#URI-和-URL" class="headerlink" title="URI 和 URL"></a>URI 和 URL</h3><p>与 URI（统一资源标识符）相比，我们更熟悉 URL（Uniform Resource Locator，统一资源定位符）。URL 正是使用 Web 浏览器等访问 Web 页面时需要输入的网页地址。比如 <code>http://hackr.jp/</code> 就是 URL。<br><strong>Uniform</strong>规定统一的格式可方便处理多种不同类型的资源，而不用根据上下文环境来识别资源指定的访问方式。另外，加入新增的协议方案（如 http: 或 ftp:）也更容易。<br><strong>Resource</strong>资源的定义是“可标识的任何东西”。不仅是文档文件、图像或服务（例如当天的天气预报）等能够区别于其他类型的，全都可作为资源。另外，资源不仅可以是单一的，也可以是多数的集合体。<br><strong>Identifier</strong>表示可标识的对象。也称为标识符。<br>URI 就是由某个协议方案表示的资源的定位标识符。协议方案是指访问资源所使用的协议类型名称。<br>URI 用字符串标识某一互联网资源，而 URL 表示资源的地点（互联网上所处的位置）。URL 是 URI 的子集。<br>URI 由两个主要的子集构成：</p><ul><li>URL：通过描述资源的位置来描述资源</li><li>URN：通过名字来识别资源，和位置无关</li></ul><h3 id="URI-格式"><a href="#URI-格式" class="headerlink" title="URI 格式"></a>URI 格式</h3><p>表示指定的 URI，要使用涵盖全部必要信息的绝对 URI、绝对 URL 以及相对 URL。相对 URL，是指从浏览器中基本 URI 处指定的 URL，形如<code>/image/logo.gif</code>。<br>绝对 URI 的格式：![绝对 URI 的格式](绝对 URI 的格式.png)<br>使用 <code>http:</code> 或 <code>https:</code> 等协议方案名获取访问资源时要指定协议类型。不区分字母大小写，最后附一个冒号（<code>:</code>）。<br>相对 URL<br>相对 URL 是 URL 一部分，从路径开始，前面木人使用当前文档的设置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">./image/logo.<span class="property">png</span></span><br><span class="line">../script/a.<span class="property">js</span></span><br><span class="line">/css/main.<span class="property">css</span></span><br></pre></td></tr></table></figure><p><strong>登录信息（认证）</strong><br>指定用户名和密码作为从服务器端获取资源时必要的登录信息（身份认证）。此项是可选项。<br><strong>服务器地址</strong><br>使用绝对 URI 必须指定待访问的服务器地址。地址可以是类似<code>hackr.jp</code>这种 DNS 可解析的名称，或是<code>192.168.1.1</code>这类 IPv4 地址 名，还可以是<code>[0:0:0:0:0:0:0:1]</code>这样用方括号括起来的 IPv6 地址名。<br><strong>服务器端口号</strong><br>指定服务器连接的网络端口号。此项也是可选项，若用户省略则自动使用默认端口号。<br><strong>带层次的文件路径</strong><br>指定服务器上的文件路径来定位特指的资源。这与 UNIX 系统的文件目录结构相似。<br><strong>查询字符串</strong><br>针对已指定的文件路径内的资源，可以使用查询字符串传入任意参数。此项可选。<br><strong>片段标识符</strong><br>使用片段标识符通常可标记出已获取资源中的子资源（文档内的某个位置）。但在 RFC 中并没有明确规定其使用方法。该项也为可选项。</p><hr><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>HTTP 用于客户端和服务器之间的通信。<br>两台计算机之间使用 HTTP 协议通信时，在一条线路上必定有一端是客户端，另一端是服务器端。<br>HTTP 协议规定，请求从客户端出发，最后服务器端响应该请求并返回。</p><h3 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h3><p>请求报文是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求行</span></span><br><span class="line"><span class="comment">//方法  URI      协议版本</span></span><br><span class="line"><span class="variable constant_">GET</span> /form/entry <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="comment">// 请求首部字段</span></span><br><span class="line"><span class="title class_">Host</span>: www.<span class="property">baidu</span>.<span class="property">com</span></span><br><span class="line"><span class="title class_">Connection</span>: keep-alive</span><br><span class="line"><span class="title class_">Cache</span>-<span class="title class_">Control</span>: max-age=<span class="number">0</span></span><br><span class="line"><span class="comment">// 内容实体</span></span><br><span class="line">name=ueno&amp;age=<span class="number">37</span></span><br></pre></td></tr></table></figure><p>响应报文由协议版本、状态码、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 状态行</span></span><br><span class="line"><span class="comment">//协议版本 状态码 状态码的原因短语</span></span><br><span class="line"><span class="variable constant_">HTTP</span>/<span class="number">1.1</span> <span class="number">200</span> <span class="variable constant_">OK</span></span><br><span class="line"><span class="comment">// 响应首部字段</span></span><br><span class="line"><span class="title class_">Date</span>: <span class="title class_">Thu</span>, <span class="number">08</span> <span class="title class_">Mar</span> <span class="number">2018</span> <span class="number">07</span>:<span class="number">33</span>:<span class="number">56</span> <span class="variable constant_">GMT</span></span><br><span class="line"><span class="title class_">Connection</span>: <span class="title class_">Keep</span>-<span class="title class_">Alive</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Encoding</span>: gzip</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: text/html; charset=utf-<span class="number">8</span></span><br><span class="line"><span class="comment">// 主体</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">···</span><br></pre></td></tr></table></figure><p>当客户端请求访问资源而发送请求时，URI 需要将作为请求报文中的请求 URI 包含在内。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// URI为完整的请求URI</span></span><br><span class="line"><span class="variable constant_">GET</span> <span class="attr">http</span>:<span class="comment">//baidu.com/index.htm HTTP/1.1</span></span><br><span class="line"><span class="comment">// 在首部字段Host中写明网络域名或IP地址</span></span><br><span class="line"><span class="variable constant_">GET</span> /index.<span class="property">htm</span> <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: baidu.<span class="property">com</span></span><br></pre></td></tr></table></figure><p>如果不是访问特定资源而是对服务器本身发起请求，可以用一个<code>*</code>来代替请求 URI</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">OPTIONS</span> * <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br></pre></td></tr></table></figure><h4 id="首部字段"><a href="#首部字段" class="headerlink" title="首部字段"></a>首部字段</h4><p><strong>通用首部</strong>：客户端和服务器都可以实用的就是通用首部</p><table><thead><tr><th align="center">首部</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Connection</td><td align="center">客户端和服务器是否保持连接</td></tr><tr><td align="center">Date</td><td align="center">日期，报文创建时间</td></tr><tr><td align="center">Update</td><td align="center">给出了发送端可能想要升级使用新版本或协议</td></tr><tr><td align="center">Via</td><td align="center">显示了报文经过的中间节点（代理、网关）</td></tr><tr><td align="center">Trailer</td><td align="center">如果报文采用分块传输编码方式，可以利用这个首部列出位于报文 trailer 部分的首部集合</td></tr><tr><td align="center">Trailer-Encoding</td><td align="center">告诉接收端对报文采用什么编码格式</td></tr><tr><td align="center">Cache-Control</td><td align="center">随报文传送缓存指示</td></tr><tr><td align="center">Pragma</td><td align="center">早期的随报文传送指示方式</td></tr></tbody></table><p><strong>请求首部</strong></p><table><thead><tr><th align="center">首部</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Client-IP</td><td align="center">客户端 IP</td></tr><tr><td align="center">From</td><td align="center">客户端邮件地址</td></tr><tr><td align="center">Host</td><td align="center">接收请求的服务器的主机名和端口号</td></tr><tr><td align="center">Referer</td><td align="center">提供了包含当前请求 URI 的文档的 URL，告诉服务器自己来源</td></tr><tr><td align="center">User—Agent</td><td align="center">发起请求的客户端应用程序</td></tr><tr><td align="center">Accept</td><td align="center">告诉服务器能够发送那些媒体类型</td></tr><tr><td align="center">Accept-Charset</td><td align="center">告诉服务器能够发送那些字符集</td></tr><tr><td align="center">Accept-Encoding</td><td align="center">告诉服务器能够发送那些编码</td></tr><tr><td align="center">Accept-Language</td><td align="center">告诉服务器能够发送那些语言</td></tr><tr><td align="center">Expect</td><td align="center">允许客户端列出请求所要求的服务器行为</td></tr><tr><td align="center">If-Match</td><td align="center">如果 ETag 和文档当前 ETag 匹配，就获取文档</td></tr><tr><td align="center">If-Modified-Since</td><td align="center">除非在某个指定日期之后修改过，否则限制这个请求</td></tr><tr><td align="center">If-None-Match</td><td align="center">如果 ETag 和当前文档 ETag 不符合，获取资源</td></tr><tr><td align="center">If-Range</td><td align="center">允许对文档否个范围内的条件请求</td></tr><tr><td align="center">If-Unmodified-Since</td><td align="center">在某个指定日期之后没有修改过，否则现在请求</td></tr><tr><td align="center">Cookie</td><td align="center">客户端字符串</td></tr></tbody></table><p><strong>响应首部</strong></p><table><thead><tr><th align="center">首部</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Age</td><td align="center">响应持续时间</td></tr><tr><td align="center">Server</td><td align="center">服务器应用软件名称和版本</td></tr><tr><td align="center">Allow</td><td align="center">列出了可用的请求方法</td></tr><tr><td align="center">Location</td><td align="center">告诉客户端实在在哪里，用于定向</td></tr><tr><td align="center">Content-Base</td><td align="center">解析主体中相对 URL 的基础 URL</td></tr><tr><td align="center">Content-Encoding</td><td align="center">主体编码格式</td></tr><tr><td align="center">Content-Language</td><td align="center">解析主体时适用的语言</td></tr><tr><td align="center">Content-Length</td><td align="center">主体的长度或尺寸</td></tr><tr><td align="center">Content-Location</td><td align="center">资源实际位置</td></tr><tr><td align="center">Content-MD5</td><td align="center">主体的 MD5 校验和</td></tr><tr><td align="center">Content-Range</td><td align="center">在整个资源中此实体部分的字节范围</td></tr><tr><td align="center">Content-Type</td><td align="center">主体的 MIME</td></tr><tr><td align="center">ETag</td><td align="center">主体的实体标记</td></tr><tr><td align="center">Expires</td><td align="center">过期时间</td></tr><tr><td align="center">Last-Modified</td><td align="center">实体最后一次修改时间</td></tr></tbody></table><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><code>GET</code>：获取资源<br>GET 是最常用的方法，通常用于请求服务器发送某个资源。指定的资源经服务器端解析后返回响应内容。使用 GET 的请求应该只用于获取数据。该方法是幂等（调用一次与连续调用多次是等价的）的，参数以明文传递。</li><li><code>POST</code>：传输实体主体<br>POST 用于想服务器发送数据，通常用来支持 HTML 的表单（input、select、textarea），表单中的数据会被发送到服务器</li><li><code>PUT</code>：传输文件<br>和 GET 从服务器获取资源相反，PUT 用于想服务器写入资源。PUT 的语义就是让服务器用请求的主体部分创建一个请求 URL 命名的文档，如果存在就替换（对资源进行整体覆盖）。该方法是幂等的。</li><li><code>HEAD</code>：获得报文首部<br>HEAD 方法和 GET 方法一样，只是不返回报文主体部分。用于确认 URI 的有效性及资源更新的日期时间等。该方法是幂等的。</li><li><code>DELETE</code>：删除文件<br>DELETE 方法按请求 URI 删除指定的资源，是与 PUT 相反的方法。该方法是幂等的。</li><li><code>OPTIONS</code>：询问支持的方法<br>OPTIONS 方法用于请求 web 服务器告知其支持的各种功能</li><li><code>TRACE</code>：追踪路径<br>TRACE 方法是让 web 服务器端将之前的请求通信返回给客户端的方法。<br>客户端发送一个请求的时候，这个请求可能会穿过防火墙、代理、网关和一些其它应用程序，没个中间节点都可能修改 HTTP 请求，TRACE 方法允许客户端在最终请求发往服务器的时候，看看它变成了什么样子<br>TRACE 请求会在目的服务器端发送一个“闭环”诊断，行程最后一站服务器会弹回一条 TRACE 响应，并在响应主题中携带它收到的原始请求报文</li><li><code>CONNECT</code>：要求用隧道协议连接代理<br>CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。</li><li><code>PATCH</code>：用于对资源进行部分修改<br>该方法与POST请求类似是非幂等的。</li></ul><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>状态码的职责是当客户端向服务器发送请求时，描述返回的请求结果。借助状态码，用户可以指定服务器端是正常处理了请求，还是出现了错误。<br>状态码如 <code>200 OK</code> ，以 3 位数字和原因短语组成。</p><table><thead><tr><th align="center">状态码</th><th align="center">类别</th><th align="center">原因短语</th></tr></thead><tbody><tr><td align="center">1xx</td><td align="center">Informational(信息性状态码)</td><td align="center">接收的请求正在处理</td></tr><tr><td align="center">2xx</td><td align="center">Success(成功状态码)</td><td align="center">请求正常处理完毕</td></tr><tr><td align="center">3xx</td><td align="center">Redirection(重定向状态码)</td><td align="center">需要进行附加操作以完成请求</td></tr><tr><td align="center">4xx</td><td align="center">Client Error(客户端状态码)</td><td align="center">服务器无法处理请求</td></tr><tr><td align="center">5xx</td><td align="center">Server Error(服务器状态码)</td><td align="center">服务器处理请求出错</td></tr></tbody></table><h4 id="1XX"><a href="#1XX" class="headerlink" title="1XX"></a>1XX</h4><ul><li>100 Continue<br>初始的请求已经接受，客户应当继续发送请求的其余部分。（HTTP 1.1 新）</li><li>101 Switching Protocols<br>服务器将遵从客户的请求转换到另外一种协议（HTTP 1.1 新）</li></ul><h4 id="2XX-成功"><a href="#2XX-成功" class="headerlink" title="2XX 成功"></a>2XX 成功</h4><p>响应的结果表明请求被正确的处理了。</p><ul><li><strong><code>200 OK</code></strong><br>表示客户端发来的请求在服务器端被正常处理了。<br>在响应报文内，随状态码一起返回的信息会因方法的不同而发送改变。</li><li>201 Created<br>服务器已经创建了文档，Location 头给出了它的 URL。</li><li>202 Accepted<br>已经接受请求，但处理尚未完成。</li><li>203 Non-Authoritative Information<br>文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝（HTTP 1.1 新）。</li><li><strong><code>204 No Content</code></strong><br>该状态码代表服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分。另外，也不允许返回任何实体的主体。没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而 Servlet 可以确定用户文档足够新，这个状态代码是很有用的。</li><li>205 Reset Content<br>没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容（HTTP 1.1 新）。</li><li><strong><code>206 Partial Content</code></strong><br>该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。客户发送了一个带有 Range 头的 GET 请求，服务器完成了它（HTTP 1.1 新）。</li></ul><h4 id="3XX-重定向"><a href="#3XX-重定向" class="headerlink" title="3XX 重定向"></a>3XX 重定向</h4><p>浏览器需要执行某些特殊的处理以正确处理请求。</p><ul><li>300 Multiple Choices<br>客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在 Location 应答头指明。</li><li><strong><code>301 Moved Permanently</code></strong><br>永久性重定向。该状态码表示请求的资源已被分配了新的 URI，以后应使用资源现在所指的 URI。客户请求的文档在其他地方，新的 URL 在 Location 头中给出，浏览器应该自动地访问新的 URL。</li><li><strong><code>302 Found</code></strong><br>临时性重定向。该状态码表示请求的资源已被分配了新的 URI，希望用户能使用新的 URI 访问。类似于 301，但新的 URL 应该被视为临时性的替代，而不是永久性的。注意，在 HTTP1.0 中对应的状态信息是“Moved Temporatily”。出现该状态代码时，浏览器能够自动访问新的 URL，因此它是一个很有用的状态代码。注意这个状态代码有时候可以和 301 替换使用。例如，如果浏览器错误地请求<code>http://host/~user</code>（缺少了后面的斜杠），有的服务器 返回 301，有的则返回 302。严格地说，我们只能假定只有当原来的请求是 GET 时浏览器才会自动重定向。请参见 307。</li><li><strong><code>303 See Other</code></strong><br>该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 光谷定向获取请求的资源。类似于 301&#x2F;302，不同之处在于，如果原来的请求是 POST，Location 头指定的重定向目标文档应该通过 GET 提取（HTTP 1.1 新）。</li><li><strong><code>304 Not Modified</code></strong><br>该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但因发生请求未满足条件的情况后，直接返回 304 Not Modified。304 状态码返回时，不包含任何响应的主体部分。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供 If-Modified-Since 头表示客户只想比指定日期更新的文档）。服务器告 诉客户，原来缓冲的文档还可以继续使用。</li><li>305 Use Proxy<br>客户请求的文档应该通过 Location 头所指明的代理服务器提取（HTTP 1.1 新）。</li><li><strong><code>307 Temporary Redirect</code></strong><br>和 302 （Found）相同。许多浏览器会错误地响应 302 应答进行重定向，即使原来的请求是 POST，即使它实际上只能在 POST 请求的应答是 303 时才能重定 向。由于这个原因，HTTP 1.1 新增了 307，以便更加清除地区分几个状态代码：当出现 303 应答时，浏览器可以跟随重定向的 GET 和 POST 请求；如果是 307 应答，则浏览器只 能跟随对 GET 请求的重定向。（HTTP 1.1 新）</li></ul><h4 id="4XX-客户端错误"><a href="#4XX-客户端错误" class="headerlink" title="4XX 客户端错误"></a>4XX 客户端错误</h4><p>4XX 响应结果表明客户端是发生错误的原因所在。</p><ul><li><strong><code>400 Bad Request</code></strong><br>请求出现语法错误。</li><li><strong><code>401 Unauthorized</code></strong><br>发送的请求需要有通过 HTTP 认证（BASIC 认证、DIGEST 认证）的认证信息。客户试图未经授权访问受密码保护的页面。应答中会包含一个 WWW-Authenticate 头，浏览器据此显示用户名字&#x2F;密码对话框，然后在填 写合适的 Authorization 头后再次发出请求。</li><li><strong><code>403 Forbidden</code></strong><br>请求资源的访问被服务器拒绝了。资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。</li><li><strong><code>404 Not Found</code></strong><br>服务器上无法找到请求的资源。</li><li>405 Method Not Allowed<br>请求方法（GET、POST、HEAD、DELETE、PUT、TRACE 等）对指定的资源不适用。（HTTP 1.1 新）</li><li>406 Not Acceptable<br>指定的资源已经找到，但它的 MIME 类型和客户在 Accept 头中所指定的不兼容（HTTP 1.1 新）。</li><li>407 Proxy Authentication Required<br>类似于 401，表示客户必须先经过代理服务器的授权。（HTTP 1.1 新）</li><li>408 Request Timeout<br>在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。（HTTP 1.1 新）</li><li>409 Conflict<br>通常和 PUT 请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。（HTTP 1.1 新）</li><li>410 Gone<br>所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和 404 的不同在于，返回 407 表示文档永久地离开了指定的位置，而 404 表示由于未知的原因文档不可用。（HTTP 1.1 新）</li><li>411 Length Required<br>服务器不能处理请求，除非客户发送一个 Content-Length 头。（HTTP 1.1 新）</li><li>412 Precondition Failed<br>请求头中指定的一些前提条件失败（HTTP 1.1 新）。</li><li>413 Request Entity Too Large<br>目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个 Retry-After 头（HTTP 1.1 新）。</li><li>414 Request URI Too Long<br>URI 太长（HTTP 1.1 新）。</li><li>416 Requested Range Not Satisfiable<br>服务器不能满足客户在请求中指定的 Range 头。（HTTP 1.1 新）</li></ul><h4 id="5XX-服务器错误"><a href="#5XX-服务器错误" class="headerlink" title="5XX 服务器错误"></a>5XX 服务器错误</h4><p>5XX 的响应结果表明服务器本身发生错误。</p><ul><li><strong><code>500 Internal Server Error</code></strong><br>服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。</li><li>501 Not Implemented<br>服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的 PUT 请求。</li><li>502 Bad Gateway<br>服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。</li><li><strong><code>503 Service Unavailable</code></strong><br>服务器暂时处于超负荷或正在进行停机维护，现在无法处理请求。例如，Servlet 可能在数据库连接池已满的情况下返回 503。服务器返回 503 时可以提供一个 Retry-After 头。</li><li>504 Gateway Timeout<br>由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。（HTTP 1.1 新）</li><li>505 HTTP Version Not Supported<br>服务器不支持请求中所指明的 HTTP 版本。（HTTP 1.1 新）<br><img src="/%E7%8A%B6%E6%80%81%E7%A0%81.png"> <a href="https://raw.githubusercontent.com/for-GET/http-decision-diagram/master/httpdd.png">状态码</a></li></ul><hr><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTP 存在以下问题，通信内容在所有的通信线路上都有可能遭到窥视。</p><ul><li><p>通信使用铭文（不加密），内容可能会被窃听。</p></li><li><p>不验证通信放的身份，因此有可能遭遇伪装（不确认通信方，不论是谁发送过来的请求都会返回响应）。</p></li><li><p>无法证明报文的完整性，所以又可能已遭篡改</p><!-- HTTP 协议的实现本身非常简单，不论是谁发送过来的请求都会返回响应，因此不确认通信方，会存在以下各种隐患。- 无法确认请求发送至目标的web服务器是否是按真实意图返回响应的那台服务器。有可能是已伪装的 web 服务器。- 无法确认响应返回到的客户端是否是按照真实意图接收响应的那个客户端。有可能是已伪装的客户端。- 无法确认正在通信的对方是否具备访问权限。因为某些 web 服务器上保存着重要的信息，只想发给特定用户通信的权限。- 无法判定请求是来自何方、出自谁手。- 即使是无意义的请求也会照单全收。无法阻止海量请求下的 DoS 攻击（Denial of Service，拒绝服务攻击） --></li></ul><p>为解决这些问题需要在 HTTP 上再加入加密处理和认证等机制。我们把添加了加密及认证机制的 HTTP 称之为 HTTPS（HTTP Secure）。<br> HTTPS 并非是应用层的一种新协议。只是 HTTP 通信接口部分用 SSL（Secure Socket Layer）和 TLS（Transport Layer Security）协议代替而已。<br>通常，HTTP 直接和 TCP 通信。当使用 SSL 时，则演变成先和 SSL 通信，再由 SSL 和 TCP 通信了。<br> SSL 是独立于 HTTP 的协议，所以不只是 HTTP 协议，其他运行在应用层的协议均可配合 SSL 协议使用。</p>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变形与动画</title>
      <link href="/2018/02/19/%E5%8F%98%E5%BD%A2%E4%B8%8E%E5%8A%A8%E7%94%BB/"/>
      <url>/2018/02/19/%E5%8F%98%E5%BD%A2%E4%B8%8E%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="transform"><a href="#transform" class="headerlink" title="transform()"></a>transform()</h3><p><code>transform</code> 属性允许你修改CSS视觉格式模型的坐标空间。使用它，元素可以被转换（translate）、旋转（rotate）、缩放（scale）、倾斜（skew）。只对 block 级元素生效</p><h4 id="rotate"><a href="#rotate" class="headerlink" title="rotate()"></a>rotate()</h4><p>旋转rotate()函数通过指定的角度参数使元素相对原点进行旋转。它主要在二维空间内进行操作，设置一个角度值，用来指定旋转的幅度。如果这个值为<strong>正值</strong>，元素相对原点中心<strong>顺时针旋转</strong>；如果这个值为<strong>负值</strong>，元素相对原点中心<strong>逆时针旋转</strong>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// HTML</span><br><span class="line">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">// CSS</span><br><span class="line">.wrapper &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  border: 1px dotted red;</span><br><span class="line">  margin: 100px auto;</span><br><span class="line">&#125;</span><br><span class="line">.wrapper div &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background: orange;</span><br><span class="line">  -webkit-transform: rotate(45deg);</span><br><span class="line">  transform: rotate(45deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/1.png"></p><hr><h4 id="skew"><a href="#skew" class="headerlink" title="skew()"></a>skew()</h4><p>skew()函数能够让元素倾斜显示。它可以将一个对象以其中心位置围绕着X轴和Y轴按照一定的角度倾斜。这与rotate()函数的旋转不同，rotate()函数只是旋转，而不会改变元素的形状。skew()函数不会旋转，而只会改变元素的形状。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">transform:  skew(ax[, ay])       /* one or two &lt;angle&gt;s, e.g.  skew(30deg,-10deg) */</span><br><span class="line">// 元素在X轴和Y轴方向以指定的角度倾斜。如果ay未提供，在Y轴上没有倾斜。</span><br><span class="line">transform:  skewX(angle)         /* an &lt;angle&gt;, e.g.  skewX(-30deg) */</span><br><span class="line">// 绕X轴以指定的角度倾斜</span><br><span class="line">transform:  skewY(angle)         /* an &lt;angle&gt;, e.g.  skewY(4deg) */</span><br><span class="line">// 绕Y轴以指定的角度倾斜</span><br></pre></td></tr></table></figure><hr><h4 id="scale"><a href="#scale" class="headerlink" title="scale()"></a>scale()</h4><p>缩放 scale()函数 让元素根据中心原点对对象进行缩放。<br>缩放 scale 具有三种情况：</p><ol><li><code>scale(X,Y)</code>使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div:hover &#123;</span><br><span class="line">  -webkit-transform: scale(1.5,0.5);</span><br><span class="line">  -moz-transform:scale(1.5,0.5)</span><br><span class="line">  transform: scale(1.5,0.5);</span><br><span class="line">&#125;</span><br><span class="line">// Y是一个可选参数，如果没有设置Y值，则表示X，Y两个方向的缩放倍数是一样的。</span><br></pre></td></tr></table></figure></li><li><code>scaleX(x)</code>元素仅水平方向缩放（X轴缩放）</li><li><code>scaleY(y)</code>元素仅垂直方向缩放（Y轴缩放）</li></ol><hr><h4 id="translate"><a href="#translate" class="headerlink" title="translate()"></a>translate()</h4><p>translate()函数可以将元素向指定的方向移动，类似于position中的relative。或以简单的理解为，使用translate()函数，可以把元素从原来的位置移动，而不影响在X、Y轴上的任何Web组件。<br>translate我们分为三种情况：</p><ol><li>translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）例:<code>translate(100px,20px)</code><br><img src="/2.png"></li><li>translateX(x)仅水平方向移动（X轴移动）</li><li>translateY(Y)仅垂直方向移动（Y轴移动）</li></ol><hr><h4 id="matrix"><a href="#matrix" class="headerlink" title="matrix()"></a>matrix()</h4><p>matrix() 是一个含六个值的(a,b,c,d,e,f)变换矩阵，用来指定一个2D变换，相当于直接应用一个[a b c d e f]变换矩阵。<br>a为元素的水平伸缩量，1为原始大小；<br>b为纵向扭曲，0为不变；<br>c为横向扭曲，0不变；<br>d为垂直伸缩量，1为原始大小；<br>e为水平偏移量，0是初始位置；<br>f为垂直偏移量，0是初始位置<br><code>matrix(scaleX(),skewX(),skewY(),scaleY(),translateX(),translateY());</code></p><hr><h4 id="transform-origin"><a href="#transform-origin" class="headerlink" title="transform-origin"></a>transform-origin</h4><p>任何一个元素都有一个中心点，默认情况之下，其中心点是居于元素X轴和Y轴的50%处。如下图所示：<img src="/3.png"><br>在没有重置transform-origin改变元素原点位置的情况下，CSS变形进行的旋转、位移、缩放，扭曲等操作都是以元素自己中心位置进行变形。但很多时候，我们可以通过transform-origin来对元素进行原点位置改变，使元素原点不在元素的中心位置，以达到需要的原点位置。<br>transform-origin取值和元素设置背景中的background-position取值类似，如下表所示：<img src="/4.png"></p><hr><h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3><p>在CSS中创建简单的过渡效果可以从以下几个步骤来实现：<br>第一，在默认样式中声明元素的初始状态样式；<br>第二，声明过渡元素最终状态样式，比如悬浮状态；<br>第三，在默认样式中通过添加过渡函数，添加一些不同的样式。</p><p>CSS3的过度transition属性是一个复合属性，主要包括以下几个子属性：</p><ol><li><code>transition-property</code>:指定过渡动画的CSS属性名称，而这个过渡属性只有具备一个中点值的属性（需要产生动画的属性）才能具备过渡效果</li><li><code>transition-duration</code>:指定完成设置一个属性过渡到另一个属性所需的时间，也就是从旧属性过渡到新属性花费的时间长度过渡所需的时间</li><li><code>transition-timing-function</code>:指定过渡函数,主要用来指定浏览器的过渡速度，以及过渡期间的操作进展情况，其中要包括以下几种函数：<br><img src="/5.png"></li><li><code>transition-delay</code>:指定一个动画开始执行的时间，也就是说当改变元素属性值后多长时间开始执行。</li></ol><p>有时我们想改变两个或者多个css属性的transition效果时，只要把几个transition的声明串在一起，用逗号（“，”）隔开，然后各自可以有各自不同的延续时间和其时间的速率变换方式。但需要值得注意的一点：第一个时间的值为 transition-duration，第二个为transition-delay。例如：<br><code>a&#123; transition: background 0.8s ease-in 0.3,color 0.6s ease-out 0.3;&#125;</code><br><code>transition: property duration timing-function delay;</code></p><h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><p><code>animation</code>的子属性有:</p><h4 id="animation-delay"><a href="#animation-delay" class="headerlink" title="animation-delay"></a><code>animation-delay</code></h4><p>设置延时，即从元素加载完成之后到动画序列开始执行的这段时间。</p><h4 id="animation-direction"><a href="#animation-direction" class="headerlink" title="animation-direction"></a><code>animation-direction</code></h4><p>设置动画在每次运行完后是反向运行还是重新回到开始位置重复运行。<br>值：<br><code>normal</code>每个循环内动画向前循环，换言之，每个动画循环结束，动画重置到起点重新开始，这是默认属性。<br><code>alternate</code>动画交替反向运行，反向运行时，动画按步后退，同时，带时间功能的函数也反向，比如，ease-in 在反向时成为ease-out。计数取决于开始时是奇数迭代还是偶数迭代<br><code>reverse</code>反向运行动画，每周期结束动画由尾到头运行。<br><code>alternate-reverse</code>反向交替， 反向开始交替<br>动画第一次运行时是反向的，然后下一次是正向，后面依次循环。决定奇数次或偶数次的计数从1开始。</p><h4 id="animation-duration"><a href="#animation-duration" class="headerlink" title="animation-duration"></a><code>animation-duration</code></h4><p>设置动画一个周期的时长,也就是完成从0%到100%一次动画所需时间。</p><h4 id="animation-iteration-count"><a href="#animation-iteration-count" class="headerlink" title="animation-iteration-count"></a><code>animation-iteration-count</code></h4><p>设置动画重复次数， 可以指定infinite无限次重复动画。其值通常为整数，但也可以使用带有小数的数字，其默认值为1，这意味着动画将从开始到结束只播放一次。</p><h4 id="animation-name"><a href="#animation-name" class="headerlink" title="animation-name"></a><code>animation-name</code></h4><p>指定由@keyframes描述的关键帧名称。</p><h4 id="animation-play-state"><a href="#animation-play-state" class="headerlink" title="animation-play-state"></a><code>animation-play-state</code></h4><p>允许暂停和恢复动画。值:<code>running</code>当前动画正在运行。<code>paused</code>当前动画以被停止。</p><h4 id="animation-timing-function"><a href="#animation-timing-function" class="headerlink" title="animation-timing-function"></a><code>animation-timing-function</code></h4><p>设置动画速度， 即通过建立加速度曲线，设置动画在关键帧之间是如何变化。它和transition中transition-timing-function一样，具有以下几种变换方式：<code>ease,ease-in,ease-in-out,ease-out,linear和cubic-bezier</code>。</p><h4 id="animation-fill-mode"><a href="#animation-fill-mode" class="headerlink" title="animation-fill-mode"></a><code>animation-fill-mode</code></h4><p>指定动画执行前后如何为目标元素应用样式。值：<br><code>none</code>动画执行前后不改变任何样式<br><code>forwards</code>目标保持动画最后一帧的样式，最后一帧是哪个取决于     <code>animation-direction和 animation-iteration-count</code> <code>backwards</code>动画采用相应第一帧的样式，保持 <code>animation-delay</code><br><code>both</code>动画将会执行 <code>forwards 和 backwards</code> 执行的动作。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- @keyframes duration | timing-function | delay |</span><br><span class="line">   iteration-count | direction | fill-mode | play-state | name --&gt;</span><br><span class="line">  animation: 3s ease-in 1s 2 reverse both paused slidein;</span><br><span class="line"></span><br><span class="line">&lt;!-- @keyframes duration | timing-function | delay | name --&gt;</span><br><span class="line">  animation: 3s linear 1s slidein;</span><br><span class="line"></span><br><span class="line">&lt;!-- @keyframes duration | name --&gt;</span><br><span class="line">  animation: 3s slidein;</span><br></pre></td></tr></table></figure><h4 id="keyframes"><a href="#keyframes" class="headerlink" title="@keyframes"></a>@keyframes</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@keyframes &lt;identifier&gt; &#123;</span><br><span class="line">  [ [ from | to | &lt;百分比&gt; ] [, from | to | &lt;百分比&gt; ]* block ]*</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- </span><br><span class="line">Values</span><br><span class="line">&lt;identifier&gt; 帧列表的名称。 名称必须符合 CSS 语法中对标识符的定义。</span><br><span class="line">from 等效于 0%.</span><br><span class="line">to 等效于 100%. </span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p><code>@keyframes</code>让开发者通过指定动画中特定时间点必须展现的关键帧样式（或者说停留点）来控制CSS动画的中间环节。这让开发者能够控制动画中的更多细节而不是全部让浏览器自动处理。<br>要使用关键帧, 先创建一个带名称的<code>@keyframes</code>规则，以便后续使用 <code>animation-name</code>这个属性来调用指定的<code>@keyframes</code>. 每个<code>@keyframes</code> 规则包含多个关键帧，也就是一段样式块语句，每个关键帧有一个百分比值作为名称，代表在动画进行中，在哪个阶段触发这个帧所包含的样式。<br>关键帧的编写顺序没有要求，最后只会根据百分比按由小到大的顺序触发。<br>为了让一个关键帧列表有效，它必须<strong>至少包含了对0%（或from）和100%（或to）</strong>即动画的开头帧和结束帧的定义。 如果都没有进行定义，那么整个<code>@keyframes</code> 是无效的，不能使用。<br><code>@keyframes</code> 不能在内联样式中使用</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Media Queries</title>
      <link href="/2018/02/18/Media-Queries/"/>
      <url>/2018/02/18/Media-Queries/</url>
      
        <content type="html"><![CDATA[<h2 id="Media-Queries"><a href="#Media-Queries" class="headerlink" title="Media Queries"></a>Media Queries</h2><h3 id="Media-Queries使用方法"><a href="#Media-Queries使用方法" class="headerlink" title="Media Queries使用方法"></a>Media Queries使用方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@media 媒体类型and （媒体特性）&#123;你的样式&#125;</span><br></pre></td></tr></table></figure><p>注意：使用Media Queries必须要使用“@media”开头，然后指定媒体类型（也可以称为设备类型），随后是指定媒体特性（也可以称之为设备特性）。 媒体特性的书写方式和样式的书写方式非常相似，主要分为两个部分，第一个部分指的是媒体特性，第二部分为媒体特性所指定的值，而且这两个部分之间使用冒号分隔。例如：<code>(max-width: 480px)</code></p><h4 id="媒体特性"><a href="#媒体特性" class="headerlink" title="媒体特性"></a>媒体特性</h4><ol><li><p>最大宽度“max-width”(max-width 表示最大即小于等于)是媒体特性中最常用的一个特性，其意思是指媒体类型小于或等于指定的宽度时，样式生效。如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 当屏幕小于或等于480px时,页面中的广告区块（.ads）都将被隐藏。</span><br><span class="line">@media screen and (max-width:480px)&#123;</span><br><span class="line"> .ads &#123;</span><br><span class="line">   display:none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最小宽度“min-width”(min-width 表示最小即大于等于)与“max-width”相反，指的是媒体类型大于或等于指定宽度时，样式生效。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 当屏幕大于或等于900px时，容器“.wrapper”的宽度为980px。</span><br><span class="line">@media screen and (min-width:900px)&#123;</span><br><span class="line">  .wrapper&#123;width: 980px;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多个媒体特性使用关键词”and”将多个媒体特性结合在一起。也就是说，一个Media Query中可以包含0到多个表达式，表达式又可以包含0到多个关键字，以及一种媒体类型。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 当屏幕在600px~900px之间时，body的背景色渲染为“#f5f5f5”</span><br><span class="line">@media screen and (min-width:600px) and (max-width:900px)&#123;</span><br><span class="line">  body &#123;background-color:#f5f5f5;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在智能设备上，例如iPhone、iPad等，还可以根据屏幕设备的尺寸来设置相应的样式（或者调用相应的样式文件）。同样的，对于屏幕设备同样可以使用“min&#x2F;max”对应参数，如“min-device-width”或者“max-device-width”。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// “iphone.css”样式适用于最大设备宽度为480px</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (max-device-width:480px)&quot; href=&quot;iphone.css&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用关键词“not”是用来排除某种制定的媒体类型，也就是用来排除符合表达式的设备。换句话说，not关键词表示对后面的表达式执行取反操作，如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 样式代码将被使用在除打印设备和设备宽度小于1200px下所有设备中。</span><br><span class="line">@media not print and (max-width: 1200px)&#123;样式代码&#125;</span><br></pre></td></tr></table></figure></li><li><p>only用来指定某种特定的媒体类型，可以用来排除不支持媒体查询的浏览器。其实only很多时候是用来对那些不支持Media Query但却支持Media Type的设备隐藏样式表的。其主要有：支持媒体特性的设备，正常调用样式，此时就当only不存在；表示不支持媒体特性但又支持媒体类型的设备，这样就会不读样式，因为其先会读取only而不是screen；另外不支持Media Queries的浏览器，不论是否支持only，样式都不会被采用。如:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;linkrel=&quot;stylesheet&quot; media=&quot;only screen and (max-device-width:240px)&quot; href=&quot;android240.css&quot; /&gt;</span><br></pre></td></tr></table></figure><p>在Media Query中如果没有明确指定Media Type，那么其默认为all，如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;linkrel=&quot;stylesheet&quot; media=&quot;(min-width:701px) and (max-width:900px)&quot; href=&quot;mediu.css&quot; /&gt;</span><br></pre></td></tr></table></figure><p>另外在样式中，还可以使用多条语句来将同一个样式应用于不同的媒体类型和媒体特性中，指定方式如下所示。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// style.css样式被用在宽度小于或等于480px的手持设备上，或者被用于屏幕宽度大于或等于960px的设备上。</span><br><span class="line">&lt;linkrel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot; media=&quot;handheld and (max-width:480px), screen and (min-width:960px)&quot; /&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
