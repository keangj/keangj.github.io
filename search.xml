<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/14/hello-world/"/>
      <url>/2021/07/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2019/07/26/TypeScript/"/>
      <url>/2019/07/26/TypeScript/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><p>TypeScript 是 JavaScript 的超集</p><h2 id="TypeScript-支持的类型"><a href="#TypeScript-支持的类型" class="headerlink" title="TypeScript 支持的类型"></a>TypeScript 支持的类型</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> undefine: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">const</span> e: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">const</span> bool: <span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">number</span>: <span class="built_in">number</span> = <span class="number">123</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span>: <span class="built_in">string</span> = <span class="string">&#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">const</span> big: bigint = <span class="number">123n</span></span><br><span class="line"><span class="keyword">const</span> symbol: symbol = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> obj: <span class="built_in">object</span> = &#123;&#125;</span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">const</span> arr: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> arr2: <span class="built_in">Array</span>&lt;<span class="built_in">number</span> | <span class="built_in">string</span>&gt; = [<span class="number">1</span>, <span class="string">&#x27;&#x27;</span>]<span class="comment">// 泛型</span></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="keyword">const</span> fn: <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b</span><br><span class="line"><span class="keyword">const</span> fn2 = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> a + b</span><br><span class="line"><span class="keyword">type</span> Fn = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="keyword">const</span> fn3:Fn = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b</span><br><span class="line"><span class="keyword">interface</span> Fn2 &#123;</span><br><span class="line">  (a: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">attr</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fn4 =  <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line">fn4.attr = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// any 可以是任何值</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">any</span>: <span class="built_in">any</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="built_in">any</span> = <span class="literal">null</span></span><br><span class="line"><span class="built_in">any</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">any</span> = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// 未知</span></span><br><span class="line"><span class="keyword">let</span> a: unknown </span><br><span class="line"><span class="keyword">type</span> T = &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;</span><br><span class="line">a.name<span class="comment">// 类型“unknown”上不存在属性“name”。ts(2339)</span></span><br><span class="line">(a <span class="keyword">as</span> T).name</span><br><span class="line"></span><br><span class="line"><span class="comment">// never, 不能将任何值赋给 never</span></span><br><span class="line"><span class="keyword">let</span> a: <span class="built_in">never</span> = <span class="number">1</span><span class="comment">// error</span></span><br><span class="line"><span class="keyword">let</span> a: <span class="built_in">never</span> = <span class="string">&#x27;&#x27;</span><span class="comment">// error</span></span><br><span class="line"><span class="keyword">let</span> a: <span class="built_in">never</span> = []<span class="comment">// error</span></span><br><span class="line"><span class="keyword">let</span> a: <span class="built_in">never</span> = &#123;&#125;<span class="comment">// error</span></span><br><span class="line"><span class="keyword">type</span> T = <span class="built_in">number</span> &amp; <span class="built_in">string</span><span class="comment">// 没有任何值属于 number 和 string 类型，所以 type T = never</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元组</span></span><br><span class="line"><span class="keyword">let</span> arr: [<span class="built_in">number</span>, <span class="built_in">string</span>, <span class="built_in">boolean</span>] = [<span class="number">1</span>, <span class="string">&#x27;&#x27;</span>, <span class="literal">true</span>]<span class="comment">// 固定长度数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// class 可以当作类型使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> a: T = <span class="keyword">new</span> T()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h2><ul><li>交叉类型</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> x &#123;</span><br><span class="line"><span class="attr">a</span>: <span class="built_in">string</span>;</span><br><span class="line">b: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> y &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">  c: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> z: x &amp; y = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;hi&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">233</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>联合类型</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> x &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">string</span>;</span><br><span class="line">  b: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> y &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">  c: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> z1: x | y = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;hi&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">666</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> z2: x | y = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="number">233</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类型别名 typegraphql<br>为类型起一个新的名字</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> str = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">const</span> name:str = <span class="string">&#x27;jay&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>字面量类型</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> gender = <span class="string">&#x27;male&#x27;</span> | <span class="string">&#x27;female&#x27;</span>;</span><br><span class="line"><span class="keyword">interface</span> human &#123;</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> | <span class="string">&#x27;female&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>this 类型</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定 this 的类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span> (<span class="params"><span class="built_in">this</span>: number, name: string</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`hi, <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">sayHi(<span class="string">&#x27;jay&#x27;</span>) <span class="comment">// error</span></span><br><span class="line">sayHi.call(<span class="number">666</span>, <span class="string">&#x27;jay&#x27;</span>)  <span class="comment">// TS 不会检查 call 的类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span> (<span class="params"><span class="built_in">this</span>: number | <span class="keyword">void</span>, name: string</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`hi, <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">sayHi(<span class="string">&#x27;jay&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>索引类型</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObject</span> (<span class="params">options: CreateObjectOptions</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> CreateObjectOptions &#123;</span><br><span class="line">  [K: <span class="built_in">string</span>]: <span class="built_in">any</span>; <span class="comment">// 对 key 和 value 进行类型判断</span></span><br><span class="line">&#125;</span><br><span class="line">createObject(&#123;</span><br><span class="line">  <span class="attr">obj</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jay&#x27;</span>,</span><br><span class="line">  <span class="attr">xxx</span>: <span class="number">123</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pluck</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params"><span class="built_in">object</span>: T, keys: <span class="built_in">Array</span>&lt;K&gt;</span>): <span class="title">T</span>[<span class="title">k</span>][] </span>&#123;</span><br><span class="line">  <span class="comment">// T 等于  &#123;name: String, age: Number&#125;</span></span><br><span class="line">  <span class="comment">// keyof T 等于  &#x27;name&#x27; | &#x27;age&#x27;</span></span><br><span class="line">  <span class="comment">// K extends keyof T 等于  &#x27;name&#x27; | &#x27;age&#x27;</span></span><br><span class="line">  <span class="comment">// extends keyof 表示有其中之一的 key，in keyof 表示全部的 key 都要有</span></span><br><span class="line">  <span class="keyword">return</span> keys.map(<span class="function"><span class="params">key</span> =&gt;</span> <span class="built_in">object</span>[key])</span><br><span class="line">&#125;</span><br><span class="line">pluck(&#123; <span class="attr">name</span>: <span class="string">&#x27;jay&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;, [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>])</span><br></pre></td></tr></table></figure><ul><li>readonly</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1: Person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jay&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">p1.age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> p2: Readonly&lt;Person&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jay&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">p2.age = <span class="number">22</span> <span class="comment">// error</span></span><br></pre></td></tr></table></figure><ul><li>partial</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Pserson2 = Partial&lt;Person&gt;;</span><br><span class="line"><span class="comment">// Person2 为 Person3 的简写</span></span><br><span class="line"><span class="keyword">interface</span> Person3 &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>可识别类型</p><p>1.有一个共有的字段<br>2.共有字段是可穷举的</p></li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Props = &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="literal">false</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125; | &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="literal">true</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> example: Props = &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jay&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> example2: Props = &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jay&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">params: Props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (params.status === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(params.name);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(params.age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>泛型</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Add&lt;T&gt; = <span class="function">(<span class="params">a: T, b: T</span>) =&gt;</span> T</span><br><span class="line"><span class="keyword">const</span> add: Add&lt;<span class="built_in">number</span>&gt; = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b<span class="comment">// 在使用时才确定泛型的类型</span></span><br></pre></td></tr></table></figure><ul><li>重载</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: <span class="built_in">number</span>, b:<span class="built_in">number</span></span>): <span class="title">number</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: <span class="built_in">string</span>, b:<span class="built_in">string</span></span>): <span class="title">string</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: <span class="built_in">any</span>, b:<span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;&#125;</span></span></span><br><span class="line"><span class="function"><span class="function">/</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="title">add</span>(<span class="params"><span class="number">1</span>, <span class="number">2</span></span>)</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="title">add</span>(<span class="params"><span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span></span>)</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="title">add</span>(<span class="params"><span class="string">&#x27;hello&#x27;</span>, <span class="number">1</span></span>)// <span class="title">error</span></span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Underscore</title>
      <link href="/2019/04/08/Underscore/"/>
      <url>/2019/04/08/Underscore/</url>
      
        <content type="html"><![CDATA[<h1 id="Underscore-基本用法"><a href="#Underscore-基本用法" class="headerlink" title="Underscore 基本用法"></a>Underscore 基本用法</h1><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><h3 id="map-对集合每一项进行一些操作，返回新数组"><a href="#map-对集合每一项进行一些操作，返回新数组" class="headerlink" title="map() 对集合每一项进行一些操作，返回新数组"></a>map() 对集合每一项进行一些操作，返回新数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.map([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="function"><span class="params">i</span> =&gt;</span> i+<span class="number">1</span>)    <span class="comment">//   [2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h3 id="each-遍历集合类似map"><a href="#each-遍历集合类似map" class="headerlink" title="each() 遍历集合类似map"></a>each() 遍历集合类似map</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.each([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="function"><span class="params">i</span> =&gt;</span> <span class="built_in">console</span>.log(i+<span class="number">1</span>))  <span class="comment">// 2 3 4 5 6</span></span><br></pre></td></tr></table></figure><h3 id="reduce-对集合进行操作且累计并返回结果，第三个参数为操作初始值"><a href="#reduce-对集合进行操作且累计并返回结果，第三个参数为操作初始值" class="headerlink" title="reduce() 对集合进行操作且累计并返回结果，第三个参数为操作初始值"></a>reduce() 对集合进行操作且累计并返回结果，第三个参数为操作初始值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.reduce([<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>], <span class="function">(<span class="params">memo, num</span>) =&gt;</span> memo + num, <span class="number">0</span>)   <span class="comment">// 6</span></span><br><span class="line">_.reduce([<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>], <span class="function">(<span class="params">memo, num</span>) =&gt;</span> memo + num, <span class="number">10</span>)   <span class="comment">// 16</span></span><br><span class="line">_.reduce([<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>], <span class="function">(<span class="params">memo, num</span>) =&gt;</span> memo * num, <span class="number">1</span>)   <span class="comment">// 6</span></span><br><span class="line">_.reduce([<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>], <span class="function">(<span class="params">memo, num</span>) =&gt;</span> memo * num, <span class="number">10</span>)  <span class="comment">// 60</span></span><br></pre></td></tr></table></figure><h3 id="shuffle-打乱集合顺序"><a href="#shuffle-打乱集合顺序" class="headerlink" title="shuffle() 打乱集合顺序"></a>shuffle() 打乱集合顺序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">_.shuffle(arr)  <span class="comment">// [3, 4, 2, 1, 5]</span></span><br></pre></td></tr></table></figure><h3 id="sample-从集合中随机选择一个或指定数目的项"><a href="#sample-从集合中随机选择一个或指定数目的项" class="headerlink" title="sample() 从集合中随机选择一个或指定数目的项"></a>sample() 从集合中随机选择一个或指定数目的项</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">_.sample(arr) <span class="comment">// 2</span></span><br><span class="line">_.sample(arr, <span class="number">2</span>) <span class="comment">// [2, 5]</span></span><br></pre></td></tr></table></figure><h3 id="every-集合的每一个项都符合条件返回true，否则返回false"><a href="#every-集合的每一个项都符合条件返回true，否则返回false" class="headerlink" title="every() 集合的每一个项都符合条件返回true，否则返回false"></a>every() 集合的每一个项都符合条件返回true，否则返回false</h3><h3 id="some-集合的某一个项符合条件返回true，否则返回false"><a href="#some-集合的某一个项符合条件返回true，否则返回false" class="headerlink" title="some() 集合的某一个项符合条件返回true，否则返回false"></a>some() 集合的某一个项符合条件返回true，否则返回false</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.every([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> ,<span class="number">0</span>], <span class="function"><span class="params">item</span> =&gt;</span> item === <span class="number">0</span> )  <span class="comment">// true</span></span><br><span class="line">_.every([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> ,<span class="number">0</span>], <span class="function"><span class="params">item</span> =&gt;</span> item === <span class="number">0</span> ) <span class="comment">// false</span></span><br><span class="line">_.some([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> ,<span class="number">0</span>], <span class="function"><span class="params">item</span> =&gt;</span> item === <span class="number">0</span> )  <span class="comment">// true</span></span><br><span class="line">_.some([<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span> ,<span class="number">0</span>], <span class="function"><span class="params">item</span> =&gt;</span> item === <span class="number">0</span> )  <span class="comment">// true</span></span><br><span class="line">_.some([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> ,<span class="number">1</span>], <span class="function"><span class="params">item</span> =&gt;</span> item === <span class="number">0</span> ) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="find-查找集合中符合条件的第一项"><a href="#find-查找集合中符合条件的第一项" class="headerlink" title="find() 查找集合中符合条件的第一项"></a>find() 查找集合中符合条件的第一项</h3><h3 id="filter-返回所有符合条件的元素"><a href="#filter-返回所有符合条件的元素" class="headerlink" title="filter() 返回所有符合条件的元素"></a>filter() 返回所有符合条件的元素</h3><h3 id="reject-与-filter-相反"><a href="#reject-与-filter-相反" class="headerlink" title="reject() 与 filter() 相反"></a>reject() 与 filter() 相反</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jay&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Kang&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Christine&#x27;</span>, <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line">_.find(p, <span class="function"><span class="params">item</span>=&gt;</span> item.gender===<span class="string">&#x27;male&#x27;</span> )</span><br><span class="line"><span class="comment">// &#123; name: &#x27;Jay&#x27;, age: 18, gender: &#x27;male&#x27; &#125;</span></span><br><span class="line">_.filter(p, <span class="function"><span class="params">item</span>=&gt;</span> item.gender === <span class="string">&#x27;male&#x27;</span> )</span><br><span class="line"><span class="comment">// &#123; name: &#x27;Jay&#x27;, age: 18, gender: &#x27;male&#x27;&#125;&#123;name: &#x27;Kang&#x27;, age: 14, gender: &#x27;male&#x27; &#125;</span></span><br><span class="line">_.reject(p, <span class="function"><span class="params">item</span>=&gt;</span> item.gender===<span class="string">&#x27;male&#x27;</span> )</span><br><span class="line"><span class="comment">// &#123; name: &#x27;Christine&#x27;, age: 6, gender: &#x27;female&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="where-返回包含条件的项"><a href="#where-返回包含条件的项" class="headerlink" title="where() 返回包含条件的项"></a>where() 返回包含条件的项</h3><h3 id="findWhere-同-where，只返回第一个项"><a href="#findWhere-同-where，只返回第一个项" class="headerlink" title="findWhere() 同 where，只返回第一个项"></a>findWhere() 同 where，只返回第一个项</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jay&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Kang&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Christine&#x27;</span>, <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line">_.where(p, &#123;<span class="attr">name</span>:<span class="string">&#x27;Jay&#x27;</span>&#125;)</span><br><span class="line"><span class="comment">// &#123; name: &#x27;Jay&#x27;, age: 18, gender: &#x27;male&#x27; &#125;</span></span><br><span class="line">_.where(p, &#123;<span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;)</span><br><span class="line"><span class="comment">// &#123; name: &#x27;Jay&#x27;, age: 18, gender: &#x27;male&#x27;&#125;&#123;name: &#x27;Kang&#x27;, age: 14, gender: &#x27;male&#x27; &#125;</span></span><br><span class="line">_.findWhere(p, &#123;<span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;)</span><br><span class="line"><span class="comment">// &#123; name: &#x27;Jay&#x27;, age: 18, gender: &#x27;male&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="contains-包含指定的值，返回-true"><a href="#contains-包含指定的值，返回-true" class="headerlink" title="contains() 包含指定的值，返回 true"></a>contains() 包含指定的值，返回 true</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">_.contains(arr, <span class="number">2</span>)  <span class="comment">// true</span></span><br><span class="line">_.contains(arr, <span class="number">4</span>)  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="pluck-返回指定-key-的-value"><a href="#pluck-返回指定-key-的-value" class="headerlink" title="pluck() 返回指定 key 的 value"></a>pluck() 返回指定 key 的 value</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jay&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Kang&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Christine&#x27;</span>, <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line">_.pluck(p, <span class="string">&#x27;name&#x27;</span> ) <span class="comment">// [ &#x27;Jay&#x27;, &#x27;Kang&#x27;, &#x27;Christine&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="max-返回最大值"><a href="#max-返回最大值" class="headerlink" title="max() 返回最大值"></a>max() 返回最大值</h3><h3 id="min-返回最小值"><a href="#min-返回最小值" class="headerlink" title="min() 返回最小值"></a>min() 返回最小值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jay&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Kang&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Christine&#x27;</span>, <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line">_.max(p, <span class="function"><span class="params">item</span>=&gt;</span> item.age )  <span class="comment">// &#123; name: &#x27;Jay&#x27;, age: 18, gender: &#x27;male&#x27; &#125;</span></span><br><span class="line">_.min(p, <span class="function"><span class="params">item</span>=&gt;</span> item.age )  <span class="comment">// &#123; name: &#x27;Christine&#x27;, age: 6, gender: &#x27;female&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="groupBy-按-key-把一个集合分成多个集合"><a href="#groupBy-按-key-把一个集合分成多个集合" class="headerlink" title="groupBy() 按 key 把一个集合分成多个集合"></a>groupBy() 按 key 把一个集合分成多个集合</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jay&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Kang&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Christine&#x27;</span>, <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line">_.groupBy(p, <span class="function"><span class="params">item</span>=&gt;</span> item.gender )   </span><br><span class="line"><span class="comment">// &#123; female: [&#123; name: &#x27;Christine&#x27;, age: 6, gender: &#x27;female&#x27; &#125;],</span></span><br><span class="line"><span class="comment">//   male: [&#123; name: &#x27;Jay&#x27;, age: 18, gender: &#x27;male&#x27; &#125;, &#123; name: &#x27;Kang&#x27;, age: 14, gender: &#x27;male&#x27;&#125;] &#125;</span></span><br></pre></td></tr></table></figure><h3 id="indexBy-返回以指定-key的-value-分类的对象"><a href="#indexBy-返回以指定-key的-value-分类的对象" class="headerlink" title="indexBy() 返回以指定 key的 value 分类的对象"></a>indexBy() 返回以指定 key的 value 分类的对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jay&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Kang&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Christine&#x27;</span>, <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line">_.groupBy(p, <span class="string">&#x27;gender&#x27;</span> ) </span><br><span class="line"><span class="comment">// &#123; female: [&#123; name: &#x27;Christine&#x27;, age: 6, gender: &#x27;female&#x27; &#125;],</span></span><br><span class="line"><span class="comment">//   male: [&#123; name: &#x27;Jay&#x27;, age: 18, gender: &#x27;male&#x27; &#125;, &#123; name: &#x27;Kang&#x27;, age: 14, gender: &#x27;male&#x27;&#125;] &#125;</span></span><br></pre></td></tr></table></figure><h3 id="countBy-返回依据条件分类的每一类的数目"><a href="#countBy-返回依据条件分类的每一类的数目" class="headerlink" title="countBy() 返回依据条件分类的每一类的数目"></a>countBy() 返回依据条件分类的每一类的数目</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Jay&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Kang&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Christine&#x27;</span>, <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line">_.countBy(p, <span class="function"><span class="params">item</span>=&gt;</span> item.age &gt; <span class="number">10</span> ? <span class="string">&#x27;小学僧&#x27;</span> : <span class="string">&#x27;中学僧&#x27;</span> ) <span class="comment">// &#123; &#x27;小学僧&#x27;: 2, &#x27;中学僧&#x27;: 1 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="size-返回集合长度"><a href="#size-返回集合长度" class="headerlink" title="size() 返回集合长度"></a>size() 返回集合长度</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.size([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="partition-返回数组包含两个数组，第一个符合条件，第二个不符合条件"><a href="#partition-返回数组包含两个数组，第一个符合条件，第二个不符合条件" class="headerlink" title="partition() 返回数组包含两个数组，第一个符合条件，第二个不符合条件"></a>partition() 返回数组包含两个数组，第一个符合条件，第二个不符合条件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.partition([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="function"><span class="params">i</span> =&gt;</span> i &gt; <span class="number">2</span>) <span class="comment">// [ [3, 4, 5], [1, 2] ]</span></span><br></pre></td></tr></table></figure><h2 id="数组-Arrays"><a href="#数组-Arrays" class="headerlink" title="数组(Arrays)"></a>数组(Arrays)</h2><ul><li><p>first() 返回数组的第一个元素</p></li><li><p>initial() 返回除最后一个(或多个)以外的元素</p></li><li><p>last() 返回数组的最后一个元素</p></li><li><p>rest() 返回除第一个(或多个)以外的元素</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.first([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])  <span class="comment">// 1</span></span><br><span class="line">_.first([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">2</span>)  <span class="comment">// [1, 2]</span></span><br><span class="line">_.initial([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])  <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">_.last([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])  <span class="comment">// [5]</span></span><br><span class="line">_.rest([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])  <span class="comment">// [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p>compact() 返回不包含 false 值的数组</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.compact([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="literal">false</span>, <span class="string">&#x27;&#x27;</span>, <span class="literal">null</span>, <span class="literal">undefined</span>])  <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure></li><li><p>flatten() 将多层嵌套的数组转化成减少至一层,传递第二个参数为 true 就只减少一层</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.flatten([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]])  <span class="comment">// [1, 2, 3]</span></span><br><span class="line">_.flatten([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]], <span class="literal">true</span>)  <span class="comment">// [1, 2, [3]]</span></span><br></pre></td></tr></table></figure></li><li><p>without() 返回一个不包含指定值的数组</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.without([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>], <span class="number">3</span>, <span class="number">4</span>)  <span class="comment">// [0, 1, 2]</span></span><br></pre></td></tr></table></figure></li><li><p>union() 返回传入数组的并集</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.union([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>])  <span class="comment">// [1, 2, 3, 4, 5, 7, 6]</span></span><br></pre></td></tr></table></figure></li><li><p>intersection() 返回传入数组的交集</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.intersection([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>])  <span class="comment">// [3, 6]</span></span><br></pre></td></tr></table></figure></li><li><p>difference() 接受两个数组，返回第一个数组中不包含第二个数组的值的数组、</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.difference([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">4</span>])  <span class="comment">// [1, 2, 6]</span></span><br></pre></td></tr></table></figure></li><li><p>uniq() 返回一个去重后的新数组</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.uniq([<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>])  <span class="comment">// [6, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p>zip() 将接收数组的值按对应的下标合并</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.zip([<span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>],[<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>])  <span class="comment">// [[&#x27;k&#x27;, 3], [&#x27;j&#x27;, 1], [&#x27;hi&#x27;, 2]]</span></span><br></pre></td></tr></table></figure></li><li><p>object() 合并数组为对象，如 key 重复就返回最后一个值</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.object([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>],[<span class="string">&#x27;jay&#x27;</span>, <span class="number">18</span>])  <span class="comment">// &#123;name: &quot;jay&quot;, age: 18&#125;</span></span><br><span class="line">_.object([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;age&#x27;</span>],[<span class="string">&#x27;jay&#x27;</span>, <span class="number">18</span>, <span class="number">14</span>])  <span class="comment">// &#123;name: &quot;jay&quot;, age: 14&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>indexOf() 返回指定值在数组中的下标</p></li><li><p>lastIndexOf() 返回指定值在数组中从后开始的下标</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.indexOf([<span class="number">1</span>, <span class="string">&#x27;hi&#x27;</span>, <span class="string">&#x27;jay&#x27;</span>], jay)  <span class="comment">// 2</span></span><br><span class="line">_.indexOf([<span class="number">1</span>, <span class="string">&#x27;hi&#x27;</span>, <span class="string">&#x27;jay&#x27;</span>], jay)  <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li><li><p>range() 接收一个开始数字和一个结束数字，生成一个数字数组</p>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_.range(<span class="number">5</span>)  <span class="comment">// [0, 1, 2, 3, 4]</span></span><br><span class="line">_.range(<span class="number">0</span>, -<span class="number">10</span>, <span class="number">3</span>)  <span class="comment">// [0, -3, -6, -9]</span></span><br><span class="line">_.range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>)  <span class="comment">// [0, 3, 6, 9]</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB</title>
      <link href="/2019/04/05/MongoDB/"/>
      <url>/2019/04/05/MongoDB/</url>
      
        <content type="html"><![CDATA[<h1 id="mongoDB"><a href="#mongoDB" class="headerlink" title="mongoDB"></a>mongoDB</h1><h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><ul><li><p>创建、切换<br>  <code>use 数据库名</code><br>  切换数据库，如不存在就创建一个新的数据库。</p>  <!-- ```sh    use test  ``` --></li><li><p>删除<br>  <code>db.dropDatabase()</code><br>  删除数据库</p></li><li><p>查看<br>  <code>show dbs</code><br>  查看当前的数据库</p></li></ul><h2 id="操作集合"><a href="#操作集合" class="headerlink" title="操作集合"></a>操作集合</h2><ul><li>查看集合<br>  <code>show tables</code><br>  查看当前数据库中的集合</li><li>创建集合<br>  <code>db.集合名.insert()</code><br>  向集合里插入文档，如集合不存在创建一个集合</li><li>删除集合<br>  <code>db.集合名.drop()</code><br>  删除当前数据库中的集合</li></ul><h2 id="操作文档"><a href="#操作文档" class="headerlink" title="操作文档"></a>操作文档</h2><ul><li><p>查看集合里的文档<br>  <code>db.集合名.find()</code><br>  查看集合中的全部文档</p></li><li><p>查看第一个文档<br>  <code>db.集合名.find</code></p></li><li><p>查看某个文档<br>  <code>db.集合名.find(&#123;查询条件&#125;)</code><br>  查询符合条件的文档<br>  <code>db.集合名.find(&#123;content: /jay/&#125;)</code><br>  查询 content 包含 ‘jay’ 的文档<br>  <code>db.集合名.find(&#123;content: /^jay/&#125;)</code><br>  查询 content 以 ‘jay’ 开头的文档<br>  <code>db.集合名.find(&#123;content: /jay$/&#125;)</code><br>  查询 content 以 ‘jay’ 结尾的文档</p></li><li><p>插入文档<br>  <code>db.集合名.insert(doc)</code></p></li><li><p>更新文档(覆盖)<br>  <code>db.集合名.update(&#123;查询条件&#125;, &#123;更新内容&#125;)</code><br>  更新符合条件的文档</p></li><li><p>更新文档(添加)<br>  使用操作符 <code>$set</code><br>  <code>db.集合名.update(&#123;查询条件&#125;, &#123;操作符: &#123;key: value&#125;&#125;)</code><br>  修改某个 key 的 value，如不存在就添加<br>  <code>db.集合名.update(&#123;查询条件&#125;, &#123;$unset: &#123;key: value&#125;&#125;)</code><br>  删除某个 key 和 value</p></li></ul><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><table><thead><tr><th>条件操作符</th><th>意义</th></tr></thead><tbody><tr><td>$gt(greater than)</td><td>大于</td></tr><tr><td>$gte(gt equal)</td><td>大于等于</td></tr><tr><td>$lt(less than)</td><td>小于</td></tr><tr><td>$lte(lt equal)</td><td>小于等于</td></tr><tr><td>$eq(equal)</td><td>等于</td></tr><tr><td>$ne(not eq)</td><td>不等于</td></tr><tr><td>$in</td><td>包含</td></tr><tr><td>$nin</td><td>不包含</td></tr></tbody></table><table><thead><tr><th>逻辑操作符</th><th>意义</th></tr></thead><tbody><tr><td>$exists</td><td>存在</td></tr><tr><td>$not</td><td>不存在</td></tr><tr><td>$or</td><td>或者</td></tr><tr><td>$and</td><td>和</td></tr><tr><td>$mod</td><td>求模</td></tr><tr><td>$where</td><td>位置</td></tr></tbody></table><table><thead><tr><th>数组操作符</th><th>意义</th></tr></thead><tbody><tr><td>$size</td><td>匹配数组长度大小</td></tr><tr><td>$all</td><td>匹配数组字段中包含指定  Value 的文档</td></tr></tbody></table><h2 id="常见查询"><a href="#常见查询" class="headerlink" title="常见查询"></a>常见查询</h2><p>查询 content 包含 ‘jay’ 的文档<br><code>db.集合名.find(&#123;content: /jay/&#125;)</code><br>查询 content 以 ‘jay’ 开头的文档<br><code>db.集合名.find(&#123;content: /^jay/&#125;)</code><br>查询 content 以 ‘jay’ 结尾的文档<br><code>db.集合名.find(&#123;content: /jay$/&#125;)</code><br>查询 content 存在 info 属性的文档<br><code>db.集合名.find(&#123;&#39;content.info&#39;: &#123;exists: true&#125;&#125;)</code><br>查询 content 包含 jay 或者 kang 的文档<br><code>db.集合名.find(&#123;content: &#123;$in: [&#39;jay&#39;, &#39;kang&#39;]&#125;&#125;)</code><br>查询 content 不包含 jay 或者 kang 的文档<br><code>db.集合名.find(&#123;content: &#123;$nin: [&#39;jay&#39;, &#39;kang&#39;]&#125;&#125;)</code><br>查询符合条件文档中的 name 和 age 字段<br><code>db.集合名.find(&#123;&#125;, &#123;name: true, age: 1&#125;)</code><br>查询符合条件文档返回中不包含 name 和 age 字段<br><code>db.集合名.find(&#123;&#125;, &#123;name: false, age: 0&#125;)</code><br>查询 age 大于 18 的文档<br><code>db.集合名.find(&#123;age: &#123;$gt: 18&#125;&#125;)</code><br><code>db.集合名.find(&#123;$where:&#39;this.age &gt; 18&#39;&#125;)</code><br><code>db.集合名.find(&#123;&#39;this.age &gt; 18&#39;&#125;)</code><br>查询 age 大于等于 18 且小于等于 30 的文档<br><code>db.集合名.find(&#123;age: &#123;$gte: 18, $lte: 30&#125;&#125;)</code><br>查询 name 不为 ‘jay’ 的文档<br><code>db.集合名.find(&#123;name: &#123;$ne: &#39;jay&#39;&#125;&#125;)</code><br>查询 date 大于 2019 年 1 月 1 日，小于 2019 年 12 月 31 日的文档<br><code>db.集合名.find(&#123;date: &#123;$gt: new Date(2019,0,1), $lt: new Date(2019,11,31)&#125;&#125;)</code><br>查询文档数量<br><code>db.集合名.find().count()</code><br>查询 age 按降序排列的文档<br><code>db.集合名.find().sort(&#123;age: -1&#125;)</code><br>查询前 5 条文档<br><code>db.集合名.find().limit(5)</code><br>查询 5 条之后的文档<br><code>db.集合名.find().skip(5)</code><br>查询第 10 条到第 20 条文档<br><code>db.集合名.find().limit(20).skip(10)</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件通信</title>
      <link href="/2019/03/01/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/03/01/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-组件通信"><a href="#Vue-组件通信" class="headerlink" title="Vue 组件通信"></a>Vue 组件通信</h1><h2 id="prop-amp-emit"><a href="#prop-amp-emit" class="headerlink" title="prop &amp; $emit"></a>prop &amp; $emit</h2><p>使用 <code>:number=&quot;number&quot;</code> 为组件传递一个数据<br>使用 <code>@add=&quot;addNumber&quot;</code> 监听自定义事件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; msg &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:number</span>=<span class="string">&quot;number&quot;</span> @<span class="attr">add</span>=<span class="string">&quot;addNumber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>props</code> 接收传递的数据<br>使用 <code>$emit</code> 触发自定义事件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;Child&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 在 button 中监听 click 事件</span></span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; number &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;onClick&quot;&gt;</span></span><br><span class="line"><span class="string">        add</span></span><br><span class="line"><span class="string">      &lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="comment">// 接收数据 number</span></span><br><span class="line">      <span class="attr">number</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      onClick () &#123;</span><br><span class="line">        <span class="comment">// 触发自定义事件 add</span></span><br><span class="line">        <span class="comment">// 第一个参数为事件名，第二个参数接受传递的参数</span></span><br><span class="line">        <span class="built_in">this</span>.$emit(<span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;我是自定义事件&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    Child</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">number</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;我是父组件&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 自定义事件触发时调用</span></span><br><span class="line">    addNumber (msg) &#123;</span><br><span class="line">      <span class="built_in">this</span>.number++</span><br><span class="line">      <span class="built_in">this</span>.msg = msg</span><br><span class="line">      <span class="built_in">console</span>.log(msg) <span class="comment">// 我是自定义事件</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a><a href="https://cn.vuejs.org/v2/guide/components-edge-cases.html#%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5">依赖注入</a></h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Child</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在父组件中通过 <code>provide</code> 将数据传递出去<br>在子组件通过 <code>inject</code> 接收 <code>provide</code> 传出来的数据</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;Child&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p&gt;我是&#123;&#123; name &#125;&#125;， 我&#123;&#123; age &#125;&#125;岁了&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="comment">// 接收数据</span></span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    Child</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jay&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 传递数据</span></span><br><span class="line">  provide () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="built_in">this</span>.name,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="eventBus"><a href="#eventBus" class="headerlink" title="eventBus"></a>eventBus</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个 <code>Vue</code> 新实例 <code>eventBus</code>， 在 <code>eventBus</code> 上通过自定义事件和监听事件传递数据。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 eventBus</span></span><br><span class="line"><span class="keyword">let</span> eventBus = <span class="keyword">new</span> Vue()</span><br><span class="line"></span><br><span class="line"><span class="comment">// B 组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;Child&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p v-show=&quot;isShow&quot;&gt;我是 &#123;&#123; msg &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isShow</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;message&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="comment">// 监听自定义事件 toggle</span></span><br><span class="line">    eventBus.$on(<span class="string">&#x27;toggle&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(msg) <span class="comment">// event bus</span></span><br><span class="line">      <span class="built_in">this</span>.isShow = !<span class="built_in">this</span>.isShow</span><br><span class="line">      <span class="built_in">this</span>.msg = msg</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// A 组件</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    Child</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    onClick () &#123;</span><br><span class="line">      <span class="comment">// 触发自定义事件 toggle 传递数据</span></span><br><span class="line">      eventBus.$emit(<span class="string">&#x27;toggle&#x27;</span>, <span class="string">&#x27;event bus&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="sync"><a href="#sync" class="headerlink" title=".sync"></a>.sync</h2><p>在组件上使用 <code>v-bind:selected=&quot;selected&quot;</code> 为子组件传递数据<br><code>v-on:update:selected=&quot;selected = $event&quot;</code> 监听事件并更新数据</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>parent &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:selected</span>=<span class="string">&quot;selected&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:update:selected</span>=<span class="string">&quot;selected = $event&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>.sync</code> 是上边代码的缩写</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>parent &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- .sync 缩写 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- .sync 只能绑定属性名，不能使用表达式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:selected.sync</span>=<span class="string">&quot;selected&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件通过 <code>props</code> 接收父组件的数据<br>子组件使用 <code>this.$emit(&#39;update:selected&#39;, newValue)</code> 触发父组件 <code>update:selected</code> 事件，更改父组件的数据</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;Child&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;onClickA&quot;&gt;A&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;onClickB&quot;&gt;B&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;h3&gt;child &#123;&#123; selected &#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="comment">// 接收数据</span></span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">selected</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    onClickA () &#123;</span><br><span class="line">      <span class="comment">// 触发事件，传递参数</span></span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;update:selected&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    onClickB () &#123;</span><br><span class="line">      <span class="comment">// 触发事件，传递参数</span></span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;update:selected&#x27;</span>, <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    Child</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">selected</span>: <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VuePress</title>
      <link href="/2018/12/17/VuePress/"/>
      <url>/2018/12/17/VuePress/</url>
      
        <content type="html"><![CDATA[<h1 id="VuePress"><a href="#VuePress" class="headerlink" title="VuePress"></a>VuePress</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在现有项目中</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 VuePress 作为一个本地依赖安装</span></span><br><span class="line">yarn add -D vuepress <span class="comment"># 或者：npm install -D vuepress</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个 docs 文件夹</span></span><br><span class="line">mkdir docs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个 markdown 文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;# Hello VuePress!&#x27;</span> &gt; docs/README.md</span><br></pre></td></tr></table></figure><p>添加 package.json 配置</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;docs:dev&quot;</span>: <span class="string">&quot;vuepress dev docs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;docs:build&quot;</span>: <span class="string">&quot;vuepress build docs&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令行运行以下命令开启 dev server</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn docs:dev <span class="comment"># 或者：npm run docs:dev</span></span><br></pre></td></tr></table></figure><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><ul><li>在 <code>docs</code> 中创建相应的文件目录并在其中创建 <code>README.md</code> 文件，如：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├─ docs</span><br><span class="line">│  ├─ get-start</span><br><span class="line">│  │  └─ README.md</span><br><span class="line">│  └─ install</span><br><span class="line">│     └─ README.md</span><br><span class="line">└─ package.json</span><br></pre></td></tr></table></figure></li><li>在新创建的 <code>README.md</code> 文件中添加对应内容，如：</li></ul><p><code>get-start/README.md</code></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="section">title: 快速上手</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 快速上手</span></span><br></pre></td></tr></table></figure><p><code>install/README.md</code></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="section">title: 安装</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 安装</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>在 <code>docs</code> 目录中创建 <code>.vuepress</code> 目录，并在 <code>.vuepress</code> 目录中创建 <code>config.js</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├─ docs</span><br><span class="line">│  ├─ README.md</span><br><span class="line">│  ├─ .vuepress</span><br><span class="line">│  │   └─ config.js</span><br><span class="line">│  ├─ get-start</span><br><span class="line">│  │  └─ README.md</span><br><span class="line">│  └─ install</span><br><span class="line">│     └─ README.md</span><br><span class="line">└─ package.json</span><br></pre></td></tr></table></figure><p>之后在 <code>.vuepress/config.js</code> 中添加以下配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;VuePress&#x27;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&#x27;这是一个使用 VuePress 创建的文档&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>配置 nav<br>想要添加 nav，需要在 <code>.vuepress/config.js</code> 中配置 <code>themeConfig.nav</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .vuepress/config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">themeConfig</span>: &#123;</span><br><span class="line">    <span class="attr">nav</span>: [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Home&#x27;</span>, <span class="attr">link</span>: <span class="string">&#x27;/&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;开始&#x27;</span>, <span class="attr">link</span>: <span class="string">&#x27;/get-started/&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置 sidebar<br>想要添加 sidebar，需要在 <code>.vuepress/config.js</code> 中配置 <code>themeConfig.sidebar</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .vuepress/config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">themeConfig</span>: &#123;</span><br><span class="line">    <span class="attr">sidebar</span>: [</span><br><span class="line">      <span class="string">&#x27;/get-start/&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;/install&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>sidebar 的分组</li></ul><p>新建 <code>components/button.md</code> 并添加以下内容</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: button</span><br><span class="line"><span class="section">sidebarDepth: 2 // 设置嵌套深度</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="section"># button</span></span><br></pre></td></tr></table></figure><p>修改配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .vuepress/config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">themeConfig</span>: &#123;</span><br><span class="line">    <span class="attr">sidebar</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;入门&#x27;</span>,</span><br><span class="line">            <span class="attr">collapsable</span>: <span class="literal">false</span>, <span class="comment">// 设置默认展开</span></span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">              <span class="string">&#x27;/get-started/&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;/install/&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;组件&#x27;</span>,</span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">              <span class="string">&#x27;/components/button&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里基本配置就完成了<br><img src="demo.png"></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于 JavaScript 中 this 对象</title>
      <link href="/2018/09/09/%E5%85%B3%E4%BA%8EJavaScript%E4%B8%AD%E7%9A%84this/"/>
      <url>/2018/09/09/%E5%85%B3%E4%BA%8EJavaScript%E4%B8%AD%E7%9A%84this/</url>
      
        <content type="html"><![CDATA[<h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><p>this是在运行时调用的，它的值取决于函数的调用位置。</p><h2 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h2><h3 id="独立函数中的-this"><a href="#独立函数中的-this" class="headerlink" title="独立函数中的 this"></a>独立函数中的 this</h3><p>在全局函数中，this 指向全局对象 window。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span> === <span class="built_in">window</span> <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">example() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>严格模式下，this 的值为 undefined。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  &#x27;use strict&#x27;</span></span><br><span class="line">  <span class="built_in">this</span> === <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">example() <span class="comment">// TypeError: this is undefined</span></span><br></pre></td></tr></table></figure><p>但只在严格模式下调用函数不会影响 this 的值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span> === <span class="built_in">window</span> <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  &#x27;use strict&#x27;</span></span><br><span class="line">  example() <span class="comment">// 1</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>匿名函数没有绑定任何对象，因此其 this 通常指向 window（作为独立函数执行）。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">example</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.n</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.example()() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="作为对象的方法中的-this"><a href="#作为对象的方法中的-this" class="headerlink" title="作为对象的方法中的 this"></a>作为对象的方法中的 this</h3><p>调用对象的方法时，方法里的 this 指向调用这个方法的对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">example</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.example() <span class="comment">// obj</span></span><br></pre></td></tr></table></figure><p>对象属性引用链中只有上一层或者最后一层在调用位置中起作用。方法中的 this 只指向当前一层的对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">obj2</span>: &#123;</span><br><span class="line">    <span class="attr">n</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">example</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.n)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.obj2.example() <span class="comment">// 2 this 指向 obj.obj2</span></span><br><span class="line"><span class="comment">// 谁调用函数，函数中的 this 就指向谁。</span></span><br><span class="line"><span class="comment">// obj.example() this 是 obj</span></span><br><span class="line"><span class="comment">// obj.obj2.example() this 是 obj.obj2</span></span><br><span class="line"><span class="comment">// obj.obj2.obj3.example() this 是 obj.obj2.obj3</span></span><br></pre></td></tr></table></figure><p>绑定对象丢失</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">example</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.n)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = obj.example</span><br><span class="line">obj2() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>obj2 引用的是 example 函数本身，obj2() 的调用等同于独立函数调用</p><p>参数传递就是一种隐式赋值，因此在函数传值也会出现上例的状况。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">example</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.n)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example2</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  fn()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">example2(obj.example) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>js 的原生方法也不例外</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">example</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.n)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(obj.example, <span class="number">0</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="构造函数调用中的-this"><a href="#构造函数调用中的-this" class="headerlink" title="构造函数调用中的 this"></a>构造函数调用中的 this</h3><p>构造函数中的 this 指向新创建的实例对象。<br>在使用 new 运算符来调用构造函数时，会执行一下操作：</p><ol><li>创建一个新对象。</li><li>将这个新对象的原型指向构造函数的 Prototype。</li><li>将这个新对象赋值给函数的 this。</li><li>执行构造函数并返回这个新对象（在函数没有返回其他对象的情况下）。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tom = <span class="keyword">new</span> Person(<span class="string">&#x27;tom&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(tom.name, tom.age) <span class="comment">// tom 18</span></span><br></pre></td></tr></table></figure><h3 id="绑定-this"><a href="#绑定-this" class="headerlink" title="绑定 this"></a>绑定 this</h3><p>使用 call()、apply() 和 bind() 方法可以指定函数内 this 的指向</p><ul><li><p>call() 方法的第一个参数是一个对象，在调用函数时将其绑定到 this。其他参数为函数调用时接收的参数。<br>在非严格模式下第一个参数传入 null 或者 undefined 都会被全局对象代替，其他原始值会变为相应的包装对象。<br><code>fun.call(thisArg, arg1, arg2, ...)</code>  </p></li><li><p>apply() 方法和 call() 类似，区别在于 apply 的第二个参数是一个数组。<br><code>func.apply(thisArg, [argsArray])</code></p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">example.call(<span class="literal">null</span>) <span class="comment">// 1</span></span><br><span class="line">example.call(obj) <span class="comment">// 2</span></span><br><span class="line">example.call(obj2) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>bind() 方法返回一个新函数。新函数为原函数的拷贝，this 为方法的第一个参数。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> example2 = example.bind(obj)</span><br><span class="line">example2() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数中的-this"><a href="#箭头函数中的-this" class="headerlink" title="箭头函数中的 this"></a>箭头函数中的 this</h3><p>箭头函数的 this 是当前的词法作用域决定的<br>箭头函数中的 this 为外层函数的 this（箭头函数定义时所在作用域的 this）。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 箭头函数定义时的作用域(箭头函数外层作用域)</span></span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">3</span></span><br><span class="line">    example = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 箭头函数的作用域</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> example()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.f() <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>箭头函数中的 this 无法被修改</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">3</span></span><br><span class="line">    example = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> example.call(&#123; <span class="attr">n</span>: <span class="number">4</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.f() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful API</title>
      <link href="/2018/08/19/RESTful-API/"/>
      <url>/2018/08/19/RESTful-API/</url>
      
        <content type="html"><![CDATA[<h1 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h1><h2 id="什么是-RESTful-API"><a href="#什么是-RESTful-API" class="headerlink" title="什么是 RESTful API"></a>什么是 RESTful API</h2><p>REST 全称为 Representational State Transfer(表现层状态转换)。REST 基于 HTTP 的设计风格，是一种万维网软件架构风格，目的是便于不同软件/程序在网络中互相传递信息。<br>符合 REST 设计风格的 Web API 称为 RESTful API。RESTful API 是目前比较成熟的一套互联网应用程序的API设计理论。可以为不同的客户端提供统一的接口。</p><h2 id="RESTful-API-设计规范"><a href="#RESTful-API-设计规范" class="headerlink" title="RESTful API 设计规范"></a>RESTful API 设计规范</h2><h3 id="API版本"><a href="#API版本" class="headerlink" title="API版本"></a>API版本</h3><p>可以将 API 部署在专用的子域名下，或者放入主域名的 URL 中<br><code>https://api.example.com</code> 或 <code>https://example.com/api</code><br>将版本信息放入 HTTP header 头中，或 URL 中<br><code>https://api.example.com/v1</code><br>API 版本需向后兼容,使用新版本的 API 的同时,要保证旧版本的 API 可以正常使用</p><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>RESTful 的每个 URL 代表一种资源（resource），所有的动作都是对指定资源进行操作。URL 中不能有动词，只能有名词并且使用复数而且所用的名词往往与数据库的表格名对应，只能用小写。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/example.com/resources/</span><br></pre></td></tr></table></figure><h3 id="HTTP-方法用动词"><a href="#HTTP-方法用动词" class="headerlink" title="HTTP 方法用动词"></a>HTTP 方法用动词</h3><p>使用不同的 <a href="http://kjay.me/2018/03/02/HTTP/">HTTP</a> 方法表示对资源进行不同的操作。</p><p>常用的 HTTP 方法有以下五种：</p><ul><li><code>GET</code>:    获取资源</li><li><code>POST</code>:   添加资源</li><li><code>DELETE</code>: 删除资源</li><li><code>PUT</code>:    修改资源（整体替换）</li><li><code>PATCH</code>:  修改资源（部分修改）</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">GET /notebooks  <span class="comment">// 获取所有笔记本（对一组资源的操作）</span></span><br><span class="line">GET /notebooks/:ID  <span class="comment">// 获取某个笔记本信息（对单个资源的操作）</span></span><br><span class="line">POST /notebooks <span class="comment">// 创建一个笔记本</span></span><br><span class="line">DELETE /notebooks/:ID <span class="comment">//删除某个笔记本</span></span><br><span class="line">PUT /notebooks/:ID  <span class="comment">// 更新某个笔记本（更新全部笔记本信息）</span></span><br><span class="line">PATCH /notebooks/:ID  <span class="comment">// 更新某个笔记本（更新部分笔记本信息）</span></span><br></pre></td></tr></table></figure><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><p>请求的响应应返回相应的 <a href="http://kjay.me/2018/03/02/HTTP/">HTTP</a> 状态码。</p><ul><li><strong><code>200 OK</code></strong> 表示客户端发来的请求在服务器端被正常处理了。</li><li><strong><code>204 No Content</code></strong> 该状态码代表服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分。</li><li><strong><code>206 Partial Content</code></strong> 该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求。</li><li><strong><code>301 Moved Permanently</code></strong> 永久性重定向。该状态码表示请求的资源已被分配了新的 URI，以后应使用资源现在所指的 URI。</li><li><strong><code>302 Found</code></strong> 临时性重定向。该状态码表示请求的资源已被分配了新的 URI，希望用户能使用新的 URI 访问。</li><li><strong><code>303 See Other</code></strong> 该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 光谷定向获取请求的资源。</li><li><strong><code>400 Bad Request</code></strong> 请求出现语法错误。</li><li><strong><code>404 Not Found</code></strong> 服务器上无法找到请求的资源。</li><li><strong><code>500 Internal Server Error</code></strong> 服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。</li><li><strong><code>503 Service Unavailable</code></strong> 服务器暂时处于超负荷或正在进行停机维护，现在无法处理请求。</li></ul><h3 id="过滤参数"><a href="#过滤参数" class="headerlink" title="过滤参数"></a>过滤参数</h3><p>如果记录数量很多，服务器不可能都将它们返回给用户。API 应该 提供参数，过滤返回结果。下面是一些常见的参数。</p><ul><li>?limit=10：指定返回记录的数量</li><li>?offset=10：指定返回记录的开始位置。</li><li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li><li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li><li>?animal_type_id=1：指定筛选条件</li></ul><p>参数的设计允许存在冗余，即允许 API 路径和 URL 参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</p><h3 id="返回信息"><a href="#返回信息" class="headerlink" title="返回信息"></a>返回信息</h3><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p><ul><li>GET /notebooks：返回资源对象的列表（数组）</li><li>GET /notebooks/notes：返回单个资源对象</li><li>POST /notebooks：返回新生成的资源对象</li><li>PUT /notebooks/notes：返回完整的资源对象</li><li>PATCH /notebooks/notes：返回完整的资源对象</li><li>DELETE /notebooks/notes：返回一个空文档</li></ul><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>如果出现错误应返回明确的错误信息</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  <span class="attr">error</span>: <span class="string">&#x27;权限不足&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2018/03/31/webpack/"/>
      <url>/2018/03/31/webpack/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单配置</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>); <span class="comment">// 通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>); <span class="comment">// 用于访问内置插件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./path/to/my/entry/file.js&#x27;</span>,  <span class="comment">// 输入：项目主文件（入口文件）</span></span><br><span class="line">  <span class="attr">output</span>: &#123; <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),  <span class="comment">//想要生成(emit)到哪里</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span>  <span class="comment">// webpack bundle 的名称</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123; <span class="comment">// 配置加载资源</span></span><br><span class="line">    <span class="attr">rules</span>: [  <span class="comment">// 规则</span></span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, use: <span class="string">&#x27;raw-loader&#x27;</span> &#125; <span class="comment">// webpack 编译器碰到「在 require()/import 语句中被解析为 &#x27;.txt&#x27; 的路径」时，在对它打包之前，先使用 raw-loader 转换一下。</span></span><br><span class="line">      <span class="comment">// test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。</span></span><br><span class="line">      <span class="comment">// use 属性，表示进行转换时，应该使用哪个 loader。</span></span><br><span class="line">    ],</span><br><span class="line">  <span class="attr">plugins</span>: [   <span class="comment">// webpack插件配置</span></span><br><span class="line">    <span class="comment">// new webpack.optimize.UglifyJsPlugin(),  // 现在也不需要使用这个plugin了，只需要使用optimization.minimize为true就行，production mode下面自动为true</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="入口-entry"><a href="#入口-entry" class="headerlink" title="入口(entry)"></a>入口(entry)</h4><p>可以通过在 webpack 配置中配置 <code>entry</code> 属性，来指定一个入口起点（或多个入口起点）。</p><h5 id="单个入口（简写）语法"><a href="#单个入口（简写）语法" class="headerlink" title="单个入口（简写）语法"></a>单个入口（简写）语法</h5><p>用法：<code>entry: string|Array&lt;string&gt;</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./path/to/my/entry/file.js&#x27;</span> <span class="comment">// 简写</span></span><br><span class="line">  <span class="comment">// entry: &#123;</span></span><br><span class="line">  <span class="comment">//   main: &#x27;./path/to/my/entry/file.js&#x27;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h5><p>用法：<code>entry: &#123;[entryChunkName: string]: string|Array&lt;string&gt;&#125;</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">app</span>: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">    <span class="attr">vendors</span>: <span class="string">&#x27;./src/vendors.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><h4 id="输出-output"><a href="#输出-output" class="headerlink" title="输出(output)"></a>输出(output)</h4><p>output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件。注意，即使可以存在多个入口起点，但只指定一个输出配置。<br>在 webpack 中配置 <code>output</code> 属性的最低要求是，将它的值设置为一个对象，包括以下两点：</p><ul><li>filename 用于输出文件的文件名。</li><li>目标输出目录 path 的绝对路径。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home/proj/public/assets&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br><span class="line"><span class="comment">// 此配置将一个单独的 bundle.js 文件输出到 /home/proj/public/assets 目录中。</span></span><br></pre></td></tr></table></figure><p>如果配置创建了多个单独的 “chunk”，则应该使用占位符(substitutions)来确保每个文件具有唯一的名称。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">app</span>: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">    <span class="attr">search</span>: <span class="string">&#x27;./src/search.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: __dirname + <span class="string">&#x27;/dist&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入到硬盘：./dist/app.js, ./dist/search.js</span></span><br></pre></td></tr></table></figure><h4 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h4><p>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。<br>在你的应用程序中，有三种使用 loader 的方式：</p><ul><li><strong>配置（推荐）：在 webpack.config.js 文件中指定 loader。</strong></li></ul><p><code>module.rules</code> 允许你在 webpack 配置中指定多个 loader。 这是展示 loader 的一种简明方式，并且有助于使代码变得简洁。同时让你对各个 loader 有个全局概览：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">&#x27;style-loader&#x27;</span> &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">modules</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>内联：在每个 import 语句中显式指定 loader。</li></ul><p>可以在 import 语句或任何等效于 “import” 的方式中指定 loader。使用 ! 将资源中的 loader 分开。分开的每个部分都相对于当前目录解析。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Styles <span class="keyword">from</span> <span class="string">&#x27;style-loader!css-loader?modules!./styles.css&#x27;</span>;</span><br></pre></td></tr></table></figure><p>通过前置所有规则及使用 !，可以对应覆盖到配置中的任意 loader。<br>选项可以传递查询参数，例如 ?key=value&amp;foo=bar，或者一个 JSON 对象，例如 ?{“key”:”value”,”foo”:”bar”}。</p><ul><li>CLI：在 shell 命令中指定它们。</li></ul><p>你也可以通过 CLI 使用 loader：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">webpack --<span class="built_in">module</span>-bind jade-loader --<span class="built_in">module</span>-bind <span class="string">&#x27;css=style-loader!css-loader&#x27;</span></span><br></pre></td></tr></table></figure><p>这会对 .jade 文件使用 jade-loader，对 .css 文件使用 style-loader 和 css-loader。</p><h4 id="插件-plugins"><a href="#插件-plugins" class="headerlink" title="插件(plugins)"></a>插件(plugins)</h4><p>想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。<br>webpack.config.js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>); <span class="comment">//通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>); <span class="comment">//访问内置的插件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./path/to/my/entry/file.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        use: <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// new webpack.optimize.UglifyJsPlugin(),  // 现在也不需要使用这个plugin了，只需要使用optimization.minimize为true就行，production mode下面自动为true</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p><a href="https://doc.webpack-china.org/configuration/">配置</a><br><a href="https://webpack.js.org/configuration/">Configuration</a></p><h4 id="mode-–mode参数"><a href="#mode-–mode参数" class="headerlink" title="mode/–mode参数"></a>mode/–mode参数</h4><p>4.X 新增了mode/–mode参数来表示是开发还是生产，mode有两个可选值：development和production，production不支持监听，production侧重于打包后的文件大小，development侧重于构建的速度。<br><code>webpack --mode development</code></p><p>也可以在配置文件中配置：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h4><p>HtmlWebpackPlugin 会默认生成 index.html 文件<br>首先安装插件，并且调整 webpack.config.js 文件：<br><code>npm install --save-dev html-webpack-plugin</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+ <span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">+   plugins: [</span><br><span class="line">+     <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">+       title: <span class="string">&#x27;Output Management&#x27;</span></span><br><span class="line">+     &#125;)</span><br><span class="line">+   ]</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h4 id="清理-dist-文件夹"><a href="#清理-dist-文件夹" class="headerlink" title="清理 /dist 文件夹"></a>清理 /dist 文件夹</h4><p>clean-webpack-plugin 是一个比较普及的管理插件，让我们安装和配置下。<br><code>npm install clean-webpack-plugin --save-dev</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+ <span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">+     <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">&#x27;dist&#x27;</span>]), <span class="comment">// 在每次构建前清理 /dist 文件夹</span></span><br><span class="line">      <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Output Management&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h4 id="source-map"><a href="#source-map" class="headerlink" title="source map"></a>source map</h4><p>为了更容易地追踪错误和警告，JavaScript 提供了 source map 功能，将编译后的代码映射回原始源代码。<br>source map 有很多<a href="https://doc.webpack-china.org/configuration/devtool">不同的选项</a>可用，请务必仔细阅读它们，以便可以根据需要进行配置。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"> <span class="attr">devtool</span>: <span class="string">&#x27;inline-source-map&#x27;</span>,</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h4 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h4><p><code>webpack-dev-server</code> 为你提供了一个简单的 web 服务器，并且能够实时重新加载(live reloading)。让我们设置以下：<br><code>npm install --save-dev webpack-dev-server</code><br>修改配置文件，告诉开发服务器(dev server)，在哪里查找文件：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">+   devServer: &#123;</span><br><span class="line">+     port: <span class="number">8000</span>,</span><br><span class="line">+     contentBase: <span class="string">&#x27;./dist&#x27;</span></span><br><span class="line">+   &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>以上配置告知 <code>webpack-dev-server</code>，在 <code>localhost:8000</code>(默认8080) 下建立服务，将 dist 目录下的文件，作为可访问文件。</p><p>让我们添加一个 script 脚本，可以直接运行开发服务器(dev server)：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">+     <span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack-dev-server --open&quot;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>webpack-dev-server 带有许多可配置的选项。转到<a href="https://doc.webpack-china.org/configuration/dev-server">相关文档</a>以了解更多。</p><h4 id="模块热替换-Hot-Module-Replacement"><a href="#模块热替换-Hot-Module-Replacement" class="headerlink" title="模块热替换(Hot Module Replacement)"></a>模块热替换(Hot Module Replacement)</h4><p>模块热替换(Hot Module Replacement 或 HMR)是 webpack 提供的最有用的功能之一。它允许在运行时更新各种模块，而无需进行完全刷新。</p><p>启用此功能实际上相当简单。而我们要做的，就是更新 <code>webpack-dev-server</code> 的配置，和使用 webpack 内置的 HMR 插件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+ <span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"> <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">      <span class="attr">port</span>: <span class="number">8000</span>,</span><br><span class="line">      <span class="attr">overlay</span>: &#123;  <span class="comment">// webpack编译出现错误，则显示到网页上</span></span><br><span class="line">        <span class="attr">errors</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">+     hot: <span class="literal">true</span> <span class="comment">// 不刷新热加载数据</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Hot Module Replacement&#x27;</span></span><br><span class="line">      &#125;),</span><br><span class="line">+     <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">+     <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>注意，我们还添加了 <code>NamedModulesPlugin</code>，以便更容易查看要修补(patch)的依赖</p><h4 id="生产环境构建"><a href="#生产环境构建" class="headerlink" title="生产环境构建"></a>生产环境构建</h4><p>开发环境(development)和生产环境(production)的构建目标差异很大。在开发环境中，我们需要具有强大的、具有实时重新加载(live reloading)或热模块替换(hot module replacement)能力的 source map 和 localhost server。而在生产环境中，我们的目标则转向于关注更小的 bundle，更轻量的 source map，以及更优化的资源，以改善加载时间。由于要遵循逻辑分离，我们通常建议为每个环境编写<strong>彼此独立的 webpack 配置</strong>。<br>虽然，以上我们将生产环境和开发环境做了略微区分，但是，请注意，我们还是会遵循不重复原则(Don’t repeat yourself - DRY)，保留一个“通用”配置。为了将这些配置合并在一起，我们将使用一个名为 <code>webpack-merge</code> 的工具。通过“通用”配置，我们不必在环境特定(environment-specific)的配置中重复代码。</p><p>我们先从安装 webpack-merge 开始，并将之前指南中已经成型的那些代码再次进行分离：<br><code>npm install --save-dev webpack-merge</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// project</span></span><br><span class="line">  webpack-demo</span><br><span class="line">  |- package.json</span><br><span class="line">- |- webpack.config.js</span><br><span class="line">+ |- webpack.common.js</span><br><span class="line">+ |- webpack.dev.js</span><br><span class="line">+ |- webpack.prod.js</span><br><span class="line">  |- /dist</span><br><span class="line">  |- /src</span><br><span class="line">    |- index.js</span><br><span class="line">    |- math.js</span><br><span class="line">  |- /node_modules</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.common.js</span></span><br><span class="line">+ <span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">+ <span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line">+ <span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line">+</span><br><span class="line">+ <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">+   entry: &#123;</span><br><span class="line">+     app: <span class="string">&#x27;./src/index.js&#x27;</span></span><br><span class="line">+   &#125;,</span><br><span class="line">+   plugins: [</span><br><span class="line">+     <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">&#x27;dist&#x27;</span>]),</span><br><span class="line">+     <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">+       title: <span class="string">&#x27;Production&#x27;</span></span><br><span class="line">+     &#125;)</span><br><span class="line">+   ],</span><br><span class="line">+   output: &#123;</span><br><span class="line">+     filename: <span class="string">&#x27;[name].bundle.js&#x27;</span>,</span><br><span class="line">+     path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">+   &#125;</span><br><span class="line">+ &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.dev.js</span></span><br><span class="line">+ <span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line">+ <span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.js&#x27;</span>);</span><br><span class="line">+</span><br><span class="line">+ <span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">+   devtool: <span class="string">&#x27;inline-source-map&#x27;</span>,</span><br><span class="line">+   devServer: &#123;</span><br><span class="line">+     contentBase: <span class="string">&#x27;./dist&#x27;</span></span><br><span class="line">+   &#125;</span><br><span class="line">+ &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line">+ <span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="comment">// + const UglifyJSPlugin = require(&#x27;uglifyjs-webpack-plugin&#x27;);  // 4.X 现在也不需要使用这个plugin了，只需要使用optimization.minimize为true就行，production mode下面自动为true</span></span><br><span class="line">+ <span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.js&#x27;</span>);</span><br><span class="line">+</span><br><span class="line">+ <span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">+   plugins: [</span><br><span class="line"><span class="comment">// +     new UglifyJSPlugin()  // 4.X 现在也不需要使用这个plugin了，只需要使用optimization.minimize为true就行，production mode下面自动为true</span></span><br><span class="line">+   ]</span><br><span class="line">+ &#125;);</span><br></pre></td></tr></table></figure><p>现在，在 webpack.common.js 中，我们设置了 entry 和 output 配置，并且在其中引入这两个环境公用的全部插件。<br>在 webpack.dev.js 中，我们为此环境添加了推荐的 <code>devtool</code>（强大的 source map）和简单的 devServer 配置。<br>最后，在 webpack.prod.js 中，我们引入了之前在 tree shaking 指南中介绍过的 <del>UglifyJSPlugin</del>。4.X 现在也不需要使用这个plugin了，只需要使用optimization.minimize为true就行，production mode下面自动为true.从webpack 4开始，这也可以通过”mode”配置选项轻松切换，设置为”production”。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">+ mode: <span class="string">&quot;production&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在，我们把 scripts 重新指向到新配置。我们将 npm start 定义为开发环境脚本，并在其中使用 webpack-dev-server，将 npm run build 定义为生产环境脚本：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">-     <span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack-dev-server --open&quot;</span>,</span><br><span class="line">+     <span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack-dev-server --open --config webpack.dev.js&quot;</span>,</span><br><span class="line">-     <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">+     <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --config webpack.prod.js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="指定环境"><a href="#指定环境" class="headerlink" title="指定环境"></a>指定环境</h5><p>许多 library 将通过与 process.env.NODE_ENV 环境变量关联，以决定 library 中应该引用哪些内容。例如，当不处于生产环境中时，某些 library 为了使调试变得容易，可能会添加额外的日志记录(log)和测试(test)。其实，当使用 process.env.NODE_ENV === ‘production’ 时，一些 library 可能针对具体用户的环境进行代码优化，从而删除或添加一些重要代码。我们可以使用 webpack 内置的 <a href="https://doc.webpack-china.org/plugins/define-plugin">DefinePlugin</a> 为所有的依赖定义这个变量：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line">  <span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">+     <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">+       <span class="string">&#x27;process.env.NODE_ENV&#x27;</span>: <span class="built_in">JSON</span>.stringify(<span class="string">&#x27;production&#x27;</span>)</span><br><span class="line">+     &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>技术上讲，NODE_ENV 是一个由 Node.js 暴露给执行脚本的系统环境变量。通常用于决定在开发环境与生产环境(dev-vs-prod)下，服务器工具、构建脚本和客户端 library 的行为。然而，与预期不同的是，无法在构建脚本 webpack.config.js 中，将 process.env.NODE_ENV 设置为 “production”，请查看 #2537。因此，例如 process.env.NODE_ENV === ‘production’ ? ‘[name].[hash].bundle.js’ : ‘[name].bundle.js’ 这样的条件语句，在 webpack 配置文件中，无法按照预期运行。</p><h4 id="ExtractTextWebpackPlugin"><a href="#ExtractTextWebpackPlugin" class="headerlink" title="ExtractTextWebpackPlugin"></a><a href="https://doc.webpack-china.org/plugins/extract-text-webpack-plugin">ExtractTextWebpackPlugin</a></h4><p>4.X 版本支持插件 <a href="https://github.com/webpack-contrib/mini-css-extract-plugin">mini-css-extract-plugin</a><br>安装：<code>npm install --save-dev extract-text-webpack-plugin</code><br>用法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">&quot;extract-text-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          <span class="attr">fallback</span>: <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">          <span class="attr">use</span>: <span class="string">&quot;css-loader&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">&quot;styles.css&quot;</span>),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它会将所有的入口 chunk(entry chunks)中引用的 *.css，移动到独立分离的 CSS 文件。因此，你的样式将不再内嵌到 JS bundle 中，而是会放到一个单独的 CSS 文件（即 styles.css）当中。 如果你的样式文件大小较大，这会做更快提前加载，因为 CSS bundle 会跟 JS bundle 并行加载。</p><h4 id="代码分离"><a href="#代码分离" class="headerlink" title="代码分离"></a>代码分离</h4><p>有三种常用的代码分离方法：</p><ul><li>入口起点：使用 entry 配置手动地分离代码。</li><li>防止重复：使用 CommonsChunkPlugin 去重和分离 chunk。</li><li>动态导入：通过模块的内联函数调用来分离代码。</li></ul><h5 id="防止重复-prevent-duplication"><a href="#防止重复-prevent-duplication" class="headerlink" title="防止重复(prevent duplication)"></a>防止重复(prevent duplication)</h5><p>webpack 4删除了<a href="https://gist.github.com/sokra/1522d586b8e5c0f5072d7565c2bee693">CommonsChunkPlugin</a>,以支持两个新选项（<code>optimization.splitChunks</code>和<code>optimization.runtimeChunk</code>）。<br>默认配置只会对异步请求的模块进行提取拆分，如果要对entry进行拆分，需要设置<code>optimization.splitChunks.chunks = &#39;all&#39;</code>。<br><code>optimization.runtimeChunk</code>，设置为<code>true</code>就会自动拆分runtime文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认配置</span></span><br><span class="line"><span class="attr">splitChunks</span>: &#123;</span><br><span class="line"><span class="attr">chunks</span>: <span class="string">&quot;async&quot;</span>,                      <span class="comment">// 可选&quot;initial&quot;，&quot;async&quot;和&quot;all&quot;</span></span><br><span class="line">  <span class="attr">minSize</span>: <span class="number">30000</span>,                     <span class="comment">// 最小尺寸，默认0,</span></span><br><span class="line">  <span class="attr">minChunks</span>: <span class="number">1</span>,                       <span class="comment">// 最小 chunk ，默认1</span></span><br><span class="line">  <span class="attr">maxAsyncRequests</span>: <span class="number">5</span>,                <span class="comment">// 最大异步请求数，默认5</span></span><br><span class="line">  <span class="attr">maxInitialRequests</span>: <span class="number">3</span>,              <span class="comment">// 最大初始化请求数，默认3</span></span><br><span class="line">  <span class="attr">name</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">    <span class="attr">default</span>: &#123;</span><br><span class="line">      <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">priority</span>: -<span class="number">20</span></span><br><span class="line">      <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">vendors</span>: &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>, <span class="comment">// 正则规则验证，如果符合就提取 chunk</span></span><br><span class="line">      priority: -<span class="number">10</span>                   <span class="comment">// 缓存组优先级</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>CommonsChunkPlugin 插件可以将公共的依赖模块提取到已有的入口 chunk 中，或者提取到一个新生成的 chunk</del>。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">+     <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">+       name: <span class="string">&#x27;common&#x27;</span> <span class="comment">// 指定公共 bundle 的名称。</span></span><br><span class="line">+     &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vs code 快捷键</title>
      <link href="/2018/03/28/vs-code-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2018/03/28/vs-code-%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<ol><li>注释：</li></ol><ul><li>  a) 单行注释：[ctrl+k,ctrl+c] 或 ctrl+/</li><li>  b) 取消单行注释：[ctrl+k,ctrl+u] (按下ctrl不放，再按k + u)</li><li>  c) 多行注释：[alt+shift+A]</li><li>  d) 多行注释：/**</li></ul><ol start="2"><li>移动行：alt+up/down</li><li>显示/隐藏左侧目录栏 ctrl + b</li><li>复制当前行：shift + alt +up/down</li><li>删除当前行：shift + ctrl + k</li><li>控制台终端显示与隐藏：ctrl + ~</li><li>查找文件/安装vs code 插件地址：ctrl + p</li><li>代码格式化：shift + alt +f</li><li>新建一个窗口 : ctrl + shift + n</li><li>行增加缩进: ctrl + [</li><li>行减少缩进: ctrl + ]</li><li>裁剪尾随空格(去掉一行的末尾那些没用的空格) : ctrl + shift + x</li><li>字体放大/缩小: ctrl + ( + 或 - )</li><li>拆分编辑器 : ctrl + 1/2/3</li><li>切换窗口 : ctrl + shift + left/right</li><li>关闭编辑器窗口 : ctrl + w</li><li>关闭所有窗口 : ctrl + k + w</li><li>切换全屏 : F11</li><li>自动换行 : alt + z</li><li>显示git : ctrl + shift + g</li><li>全局查找文件：ctrl + shift + f</li><li>显示相关插件的命令(如：git log)：ctrl + shift + p</li><li>选中文字：shift + left / right / up / down</li><li>折叠代码： ctrl + k + 0-9 (0是完全折叠)</li><li>展开代码： ctrl + k + j (完全展开代码)</li><li>删除行 ： ctrl + shift + k</li><li>快速切换主题：ctrl + k / ctrl + t</li><li>快速回到顶部 ： ctrl + home</li><li>快速回到底部 : ctrl + end</li><li>格式化选定代码 ：ctrl + k / ctrl +f</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Media Queries</title>
      <link href="/2018/02/18/Media-Queries/"/>
      <url>/2018/02/18/Media-Queries/</url>
      
        <content type="html"><![CDATA[<h2 id="Media-Queries"><a href="#Media-Queries" class="headerlink" title="Media Queries"></a>Media Queries</h2><h3 id="Media-Queries使用方法"><a href="#Media-Queries使用方法" class="headerlink" title="Media Queries使用方法"></a>Media Queries使用方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@media 媒体类型and （媒体特性）&#123;你的样式&#125;</span><br></pre></td></tr></table></figure><p>注意：使用Media Queries必须要使用“@media”开头，然后指定媒体类型（也可以称为设备类型），随后是指定媒体特性（也可以称之为设备特性）。 媒体特性的书写方式和样式的书写方式非常相似，主要分为两个部分，第一个部分指的是媒体特性，第二部分为媒体特性所指定的值，而且这两个部分之间使用冒号分隔。例如：<code>(max-width: 480px)</code></p><h4 id="媒体特性"><a href="#媒体特性" class="headerlink" title="媒体特性"></a>媒体特性</h4><ol><li><p>最大宽度“max-width”(max-width 表示最大即小于等于)是媒体特性中最常用的一个特性，其意思是指媒体类型小于或等于指定的宽度时，样式生效。如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 当屏幕小于或等于480px时,页面中的广告区块（.ads）都将被隐藏。</span><br><span class="line">@media screen and (max-width:480px)&#123;</span><br><span class="line"> .ads &#123;</span><br><span class="line">   display:none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最小宽度“min-width”(min-width 表示最小即大于等于)与“max-width”相反，指的是媒体类型大于或等于指定宽度时，样式生效。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 当屏幕大于或等于900px时，容器“.wrapper”的宽度为980px。</span><br><span class="line">@media screen and (min-width:900px)&#123;</span><br><span class="line">  .wrapper&#123;width: 980px;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多个媒体特性使用关键词”and”将多个媒体特性结合在一起。也就是说，一个Media Query中可以包含0到多个表达式，表达式又可以包含0到多个关键字，以及一种媒体类型。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 当屏幕在600px~900px之间时，body的背景色渲染为“#f5f5f5”</span><br><span class="line">@media screen and (min-width:600px) and (max-width:900px)&#123;</span><br><span class="line">  body &#123;background-color:#f5f5f5;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在智能设备上，例如iPhone、iPad等，还可以根据屏幕设备的尺寸来设置相应的样式（或者调用相应的样式文件）。同样的，对于屏幕设备同样可以使用“min/max”对应参数，如“min-device-width”或者“max-device-width”。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// “iphone.css”样式适用于最大设备宽度为480px</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (max-device-width:480px)&quot; href=&quot;iphone.css&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用关键词“not”是用来排除某种制定的媒体类型，也就是用来排除符合表达式的设备。换句话说，not关键词表示对后面的表达式执行取反操作，如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 样式代码将被使用在除打印设备和设备宽度小于1200px下所有设备中。</span><br><span class="line">@media not print and (max-width: 1200px)&#123;样式代码&#125;</span><br></pre></td></tr></table></figure></li><li><p>only用来指定某种特定的媒体类型，可以用来排除不支持媒体查询的浏览器。其实only很多时候是用来对那些不支持Media Query但却支持Media Type的设备隐藏样式表的。其主要有：支持媒体特性的设备，正常调用样式，此时就当only不存在；表示不支持媒体特性但又支持媒体类型的设备，这样就会不读样式，因为其先会读取only而不是screen；另外不支持Media Queries的浏览器，不论是否支持only，样式都不会被采用。如:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;linkrel=&quot;stylesheet&quot; media=&quot;only screen and (max-device-width:240px)&quot; href=&quot;android240.css&quot; /&gt;</span><br></pre></td></tr></table></figure><p>在Media Query中如果没有明确指定Media Type，那么其默认为all，如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;linkrel=&quot;stylesheet&quot; media=&quot;(min-width:701px) and (max-width:900px)&quot; href=&quot;mediu.css&quot; /&gt;</span><br></pre></td></tr></table></figure><p>另外在样式中，还可以使用多条语句来将同一个样式应用于不同的媒体类型和媒体特性中，指定方式如下所示。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// style.css样式被用在宽度小于或等于480px的手持设备上，或者被用于屏幕宽度大于或等于960px的设备上。</span><br><span class="line">&lt;linkrel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot; media=&quot;handheld and (max-width:480px), screen and (min-width:960px)&quot; /&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
